package main

import (
	b64 "encoding/base64"
	"fmt"
	"github.com/tdewolff/minify/v2"
	"github.com/tdewolff/minify/v2/css"
	"github.com/tdewolff/minify/v2/js"
	"io/ioutil"
	"log"
	"os"
	"time"
)

func main()  {

	out, err := os.Create("embedded.go")
	if err != nil {
		log.Fatal(err)
	}
	_, _ = out.Write([]byte("// Code generated by ./embedded/generate.go. DO NOT EDIT\n"))
	_, _ = out.Write([]byte(fmt.Sprintf("// generated: %s\n\n", time.Now().Format(time.RFC1123Z))))
	_, _ = out.Write([]byte("package main\n\n"))
	_, _ = out.Write([]byte("import \"html/template\"\n\n"))
	_, _ = out.Write([]byte("const (\n"))

	m := minify.New()
	m.AddFunc("text/css", css.Minify)
	m.AddFunc("text/javascript", js.Minify)

	style, _ := ioutil.ReadFile("./embedded/gfm.css")
	minCss, e := m.Bytes("text/css", style)
	if e != nil {
		fmt.Println(e)
	}

	_, _ = out.Write([]byte("gfmCss=`"))
	_, _ = out.Write(minCss)
	_, _ = out.Write([]byte("`\n"))

	style, _ = ioutil.ReadFile("./embedded/print.css")
	minCss, e = m.Bytes("text/css", style)
	if e != nil {
		fmt.Println(e)
	}

	_, _ = out.Write([]byte("printCss=`"))
	_, _ = out.Write(minCss)
	_, _ = out.Write([]byte("`\n"))

	style, _ = ioutil.ReadFile("./embedded/style.css")
	// save custom css as base64 to avoid problems with escaping
	dec := b64.StdEncoding.EncodeToString(style)
	_, _ = out.Write([]byte("customCss=`"))
	_, _ = out.Write([]byte(dec))
	_, _ = out.Write([]byte("`\n"))

	script, _ := ioutil.ReadFile("./embedded/reload.js")
	minJs, e := m.Bytes("text/javascript", script)
	if e != nil {
		fmt.Println(e)
	}
	_, _ = out.Write([]byte("reloadJs=`"))
	_, _ = out.Write(minJs)
	_, _ = out.Write([]byte("`\n"))

	script, _ = ioutil.ReadFile("./embedded/script.js")
	if e != nil {
		fmt.Println(e)
	}
	// save custom script as base64 to avoid problems with escaping
	dec = b64.StdEncoding.EncodeToString(script)
	_, _ = out.Write([]byte("customJs=`"))
	_, _ = out.Write([]byte(dec))
	_, _ = out.Write([]byte("`\n"))

	_, _ = out.Write([]byte(")\n"))

	_, _ = out.Write([]byte("\n"))
	html, _ := ioutil.ReadFile("./embedded/template.html")
	_, _ = out.Write([]byte("var htmlTemplate = template.Must(template.New(\"tmp\").Parse(`\n"))
	_, _ = out.Write(html)
	_, _ = out.Write([]byte("`))\n"))

}
