package main

import (
	b64 "encoding/base64"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
  "regexp"
  "strings"
	"time"
)

var rxPath = regexp.MustCompile(``)

func main() {

	out, err := os.Create("embedded.go")
	if err != nil {
		log.Fatal(err)
	}
	_, _ = out.Write([]byte("// Code generated by ./embedded/generate.go. DO NOT EDIT\n"))
	_, _ = out.Write([]byte(fmt.Sprintf("// generated: %s\n\n", time.Now().Format(time.RFC1123Z))))
	_, _ = out.Write([]byte("package main\n\n"))
	_, _ = out.Write([]byte("import \"html/template\"\n\n"))

	// html template
	html, _ := ioutil.ReadFile("./embedded/template.html")
	_, _ = out.Write([]byte("var htmlTemplate = template.Must(template.New(\"tmp\").Parse(`\n"))
	_, _ = out.Write(html)
	_, _ = out.Write([]byte("`))\n\n"))


	_, _ = out.Write([]byte("var assets = map[string]string {\n"))

		_ = filepath.Walk("./embedded/www", func(path string, info os.FileInfo, err error) error {
			if info.IsDir() {
				return nil
			}
			data, err := ioutil.ReadFile(path)
			if err != nil {
				return err
			}
			dir, file := filepath.Split(path)
			dirs := strings.Split(dir, string(filepath.Separator))
			for i := len(dirs) -1; i > 0; i-- {
			  if dirs[i] != "" {
			    dir = dirs[i]
			    break
        }
      }

      vName := strings.Replace(file, ".", "_", 1)
			if dir != "www" {
        vName = fmt.Sprintf("%s_%s", dir, vName)
      }
			enc := b64.StdEncoding.EncodeToString(data)
			_, _ = out.Write([]byte(fmt.Sprintf(" `%s`: `", vName)))
			_, _ = out.Write([]byte(enc))
			_, _ = out.Write([]byte("`,\n"))
			return nil
		})
	_, _ = out.Write([]byte("}\n\n"))
}
