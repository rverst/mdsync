// Code generated by ./embedded/generate.go. DO NOT EDIT
// generated: Thu, 10 Sep 2020 21:47:41 +0200

package main

import "html/template"

const (
	gfmCss    = `article{padding:30px}.markdown-body{color:#373a3c}.markdown-body a{color:#0275d8;text-decoration:none}.markdown-body a:focus,.markdown-body a:hover{color:#014c8c;text-decoration:underline}code,pre{tab-size:4}tt,code,pre{font-family:Consolas,liberation mono,Menlo,Courier,monospace;font-size:12px}pre{margin-top:0;margin-bottom:0}blockquote{margin:0}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}.markdown-body{overflow:hidden;font-family:helvetica neue,Helvetica,segoe ui,Arial,freesans,sans-serif;font-size:16px;line-height:1.6;word-wrap:break-word}.markdown-body>*:first-child{margin-top:0!important}.markdown-body>*:last-child{margin-bottom:0!important}.markdown-body .absent{color:#c00}.markdown-body .anchor{position:absolute;top:10px;bottom:0;left:0;display:block;padding-right:6px;padding-left:30px;margin-left:-30px}.markdown-body .anchor:focus{outline:none}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{position:relative;margin-top:1em;margin-bottom:16px;font-weight:700;line-height:1.4}.markdown-body h1 .octicon-link,.markdown-body h2 .octicon-link,.markdown-body h3 .octicon-link,.markdown-body h4 .octicon-link,.markdown-body h5 .octicon-link,.markdown-body h6 .octicon-link{display:none;color:#000;vertical-align:middle}.markdown-body h1:hover .anchor,.markdown-body h2:hover .anchor,.markdown-body h3:hover .anchor,.markdown-body h4:hover .anchor,.markdown-body h5:hover .anchor,.markdown-body h6:hover .anchor{height:1em;padding-left:8px;margin-left:-30px;line-height:1;text-decoration:none}.markdown-body h1:hover .anchor .octicon-link,.markdown-body h2:hover .anchor .octicon-link,.markdown-body h3:hover .anchor .octicon-link,.markdown-body h4:hover .anchor .octicon-link,.markdown-body h5:hover .anchor .octicon-link,.markdown-body h6:hover .anchor .octicon-link{display:inline-block}.markdown-body h1 tt,.markdown-body h1 code,.markdown-body h2 tt,.markdown-body h2 code,.markdown-body h3 tt,.markdown-body h3 code,.markdown-body h4 tt,.markdown-body h4 code,.markdown-body h5 tt,.markdown-body h5 code,.markdown-body h6 tt,.markdown-body h6 code{font-size:inherit}.markdown-body h1{padding-bottom:.3em;font-size:2.25em;line-height:1.2;border-bottom:1px solid #eee}.markdown-body h2{padding-bottom:.3em;font-size:1.75em;line-height:1.225;border-bottom:1px solid #eee}.markdown-body h3{font-size:1.5em;line-height:1.43}.markdown-body h4{font-size:1.25em}.markdown-body h5{font-size:1em}.markdown-body h6{font-size:1em;color:#777}.markdown-body p,.markdown-body blockquote,.markdown-body ul,.markdown-body ol,.markdown-body dl,.markdown-body table,.markdown-body pre{margin-top:0;margin-bottom:16px}.markdown-body hr{height:4px;padding:0;margin:16px 0;background-color:#e7e7e7;border:0}.markdown-body ul,.markdown-body ol{padding-left:2em}.markdown-body ul.no-list,.markdown-body ol.no-list{padding:0;list-style-type:none}.markdown-body ul ul,.markdown-body ul ol,.markdown-body ol ol,.markdown-body ol ul{margin-top:0;margin-bottom:0}.markdown-body li>p{margin-top:16px}.markdown-body dl{padding:0}.markdown-body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:700}.markdown-body dl dd{padding:0 16px;margin-bottom:16px}.markdown-body blockquote{padding:0 15px;color:#777;border-left:4px solid #ddd}.markdown-body blockquote>:first-child{margin-top:0}.markdown-body blockquote>:last-child{margin-bottom:0}.markdown-body table{display:block;width:100%;overflow:auto;word-break:keep-all}.markdown-body table th{font-weight:700}.markdown-body table th,.markdown-body table td{padding:6px 13px;border:1px solid #ddd}.markdown-body table tr{background-color:#fff;border-top:1px solid #ccc}.markdown-body table tr:nth-child(2n){background-color:#f8f8f8}.markdown-body img{max-width:100%;-moz-box-sizing:border-box;box-sizing:border-box}.markdown-body span.frame{display:block;overflow:hidden}.markdown-body span.frame>span{display:block;float:left;width:auto;padding:7px;margin:13px 0 0;overflow:hidden;border:1px solid #ddd}.markdown-body span.frame span img{display:block;float:left}.markdown-body span.frame span span{display:block;padding:5px 0 0;clear:both;color:#333}.markdown-body span.align-center{display:block;overflow:hidden;clear:both}.markdown-body span.align-center>span{display:block;margin:13px auto 0;overflow:hidden;text-align:center}.markdown-body span.align-center span img{margin:0 auto;text-align:center}.markdown-body span.align-right{display:block;overflow:hidden;clear:both}.markdown-body span.align-right>span{display:block;margin:13px 0 0;overflow:hidden;text-align:right}.markdown-body span.align-right span img{margin:0;text-align:right}.markdown-body span.float-left{display:block;float:left;margin-right:13px;overflow:hidden}.markdown-body span.float-left span{margin:13px 0 0}.markdown-body span.float-right{display:block;float:right;margin-left:13px;overflow:hidden}.markdown-body span.float-right>span{display:block;margin:13px auto 0;overflow:hidden;text-align:right}.markdown-body code,.markdown-body tt{padding:.2em 0;margin:0;font-size:85%;background-color:rgba(0,0,0,4%);border-radius:3px}.markdown-body code:before,.markdown-body code:after,.markdown-body tt:before,.markdown-body tt:after{letter-spacing:-.2em;content:"\00a0"}.markdown-body code br,.markdown-body tt br{display:none}.markdown-body del code{text-decoration:inherit}.markdown-body pre>code{padding:0;margin:0;font-size:100%;word-break:normal;white-space:pre;background:0 0;border:0}.markdown-body .highlight{margin-bottom:16px}.markdown-body .highlight pre,.markdown-body pre{padding:16px;overflow:auto;font-size:85%;line-height:1.45;background-color:#f7f7f7;border-radius:3px}.markdown-body .highlight pre{margin-bottom:0;word-break:normal}.markdown-body pre{word-wrap:normal}.markdown-body pre code,.markdown-body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:initial;border:0}.markdown-body pre code:before,.markdown-body pre code:after,.markdown-body pre tt:before,.markdown-body pre tt:after{content:normal}.highlight{background:#fff}.highlight .h{color:#333;font-style:normal;font-weight:400}.highlight .mf,.highlight .mh,.highlight .mi,.highlight .mo,.highlight .il,.highlight .m{color:#945277}.highlight .s,.highlight .sb,.highlight .sc,.highlight .sd,.highlight .s2,.highlight .se,.highlight .sh,.highlight .si,.highlight .sx,.highlight .s1{color:#df5000}.highlight .kc,.highlight .kd,.highlight .kn,.highlight .kp,.highlight .kr,.highlight .kt,.highlight .k,.highlight .o{font-weight:700}.highlight .kt{color:#458}.highlight .c,.highlight .cm,.highlight .c1{color:#998;font-style:italic}.highlight .cp,.highlight .cs{color:#999;font-weight:700}.highlight .cs{font-style:italic}.highlight .n{color:#333}.highlight .na,.highlight .nv,.highlight .vc,.highlight .vg,.highlight .vi{color:teal}.highlight .nb{color:#0086b3}.highlight .nc{color:#458;font-weight:700}.highlight .no{color:#094e99}.highlight .ni{color:purple}.highlight .ne{color:#900;font-weight:700}.highlight .nf{color:#945277;font-weight:700}.highlight .nn{color:#555}.highlight .nt{color:navy}.highlight .err{color:#a61717;background-color:#e3d2d2}.highlight .gd{color:#000;background-color:#fdd}.highlight .gd .x{color:#000;background-color:#faa}.highlight .ge{font-style:italic}.highlight .gr{color:#a00}.highlight .gh{color:#999}.highlight .gi{color:#000;background-color:#dfd}.highlight .gi .x{color:#000;background-color:#afa}.highlight .go{color:#888}.highlight .gp{color:#555}.highlight .gs{font-weight:700}.highlight .gu{color:purple;font-weight:700}.highlight .gt{color:#a00}.highlight .ow{font-weight:700}.highlight .w{color:#bbb}.highlight .sr{color:#017936}.highlight .ss{color:#8b467f}.highlight .bp{color:#999}.highlight .gc{color:#999;background-color:#eaf2f5}.type-csharp .highlight .k{color:#00f}.type-csharp .highlight .kt{color:#00f}.type-csharp .highlight .nf{color:#000;font-weight:400}.type-csharp .highlight .nc{color:#2b91af}.type-csharp .highlight .nn{color:#000}.type-csharp .highlight .s{color:#a31515}.type-csharp .highlight .sc{color:#a31515}`
	printCss  = `hr{break-after:page;height:.1mm;visibility:hidden}h1{break-before:recto}h1:first-of-type,section>h1:first-child{break-before:avoid}h2{break-before:column}h1,h2,h3,h4,h5,h6{page-break-after:avoid}h1+h2,h2+h3,h3+h4,h4+h5,h5+h6{page-break-before:avoid}blockquote{page-break-inside:avoid}pre{page-break-inside:avoid;background-color:gray}`
	customCss = `Lm1hcmtkb3duLWJvZHkgewogICAgbWFyZ2luOiAwIGF1dG87CiAgICBtYXgtd2lkdGg6IDczOHB4OwogICAgZm9udC1mYW1pbHk6ICJJb3NldmthIEV0b2lsZSIsICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgIlNlZ29lIFVJIiwgQXJpYWwsIGZyZWVzYW5zLCBzYW5zLXNlcmlmOwp9Cgp0dCwgY29kZSwgcHJlIHsKICAgIGZvbnQtZmFtaWx5OiAiSW9zZXZrYSBUZXJtIiwgQ29uc29sYXMsICJMaWJlcmF0aW9uIE1vbm8iLCBNZW5sbywgQ291cmllciwgbW9ub3NwYWNlICFpbXBvcnRhbnQ7CiAgICBmb250LXNpemU6IDEycHggIWltcG9ydGFudDsKfQoKaDEgewogICAgYm9yZGVyLWJvdHRvbTogbm9uZSAhaW1wb3J0YW50Owp9CgpAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUwMHB4KSAgewogICAgYXJ0aWNsZSB7CiAgICAgICAgcGFkZGluZzogMTBweDsKICAgIH0KfQoKLyoKR3J1dmJveCBzdHlsZSAobGlnaHQpIChjKSBQYXZlbCBQZXJ0c2V2IChvcmlnaW5hbCBzdHlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vbW9yaGV0ei9ncnV2Ym94KQoqLwoKLmhsanMgewogICAgZGlzcGxheTogYmxvY2s7CiAgICBvdmVyZmxvdy14OiBhdXRvOwogICAgcGFkZGluZzogMC41ZW07CiAgICBiYWNrZ3JvdW5kOiAjZmJmMWM3ICFpbXBvcnRhbnQ7Cn0KCi5obGpzLAouaGxqcy1zdWJzdCB7CiAgICBjb2xvcjogIzNjMzgzNjsKfQoKLyogR3J1dmJveCBSZWQgKi8KLmhsanMtZGVsZXRpb24sCi5obGpzLWZvcm11bGEsCi5obGpzLWtleXdvcmQsCi5obGpzLWxpbmssCi5obGpzLXNlbGVjdG9yLXRhZyB7CiAgICBjb2xvcjogIzlkMDAwNjsKfQoKLyogR3J1dmJveCBCbHVlICovCi5obGpzLWJ1aWx0X2luLAouaGxqcy1lbXBoYXNpcywKLmhsanMtbmFtZSwKLmhsanMtcXVvdGUsCi5obGpzLXN0cm9uZywKLmhsanMtdGl0bGUsCi5obGpzLXZhcmlhYmxlIHsKICAgIGNvbG9yOiAjMDc2Njc4Owp9CgovKiBHcnV2Ym94IFllbGxvdyAqLwouaGxqcy1hdHRyLAouaGxqcy1wYXJhbXMsCi5obGpzLXRlbXBsYXRlLXRhZywKLmhsanMtdHlwZSB7CiAgICBjb2xvcjogI2I1NzYxNDsKfQoKLyogR3J1dmJveCBQdXJwbGUgKi8KLmhsanMtYnVpbHRpbi1uYW1lLAouaGxqcy1kb2N0YWcsCi5obGpzLWxpdGVyYWwsCi5obGpzLW51bWJlciB7CiAgICBjb2xvcjogIzhmM2Y3MTsKfQoKLyogR3J1dmJveCBPcmFuZ2UgKi8KLmhsanMtY29kZSwKLmhsanMtbWV0YSwKLmhsanMtcmVnZXhwLAouaGxqcy1zZWxlY3Rvci1pZCwKLmhsanMtdGVtcGxhdGUtdmFyaWFibGUgewogICAgY29sb3I6ICNhZjNhMDM7Cn0KCi8qIEdydXZib3ggR3JlZW4gKi8KLmhsanMtYWRkaXRpb24sCi5obGpzLW1ldGEtc3RyaW5nLAouaGxqcy1zZWN0aW9uLAouaGxqcy1zZWxlY3Rvci1hdHRyLAouaGxqcy1zZWxlY3Rvci1jbGFzcywKLmhsanMtc3RyaW5nLAouaGxqcy1zeW1ib2wgewogICAgY29sb3I6ICM3OTc0MGU7Cn0KCi8qIEdydXZib3ggQXF1YSAqLwouaGxqcy1hdHRyaWJ1dGUsCi5obGpzLWJ1bGxldCwKLmhsanMtY2xhc3MsCi5obGpzLWZ1bmN0aW9uLAouaGxqcy1mdW5jdGlvbiAuaGxqcy1rZXl3b3JkLAouaGxqcy1tZXRhLWtleXdvcmQsCi5obGpzLXNlbGVjdG9yLXBzZXVkbywKLmhsanMtdGFnIHsKICAgIGNvbG9yOiAjNDI3YjU4Owp9CgovKiBHcnV2Ym94IEdyYXkgKi8KLmhsanMtY29tbWVudCB7CiAgICBjb2xvcjogIzkyODM3NDsKfQoKLyogR3J1dmJveCBQdXJwbGUgKi8KLmhsanMtbGlua19sYWJlbCwKLmhsanMtbGl0ZXJhbCwKLmhsanMtbnVtYmVyIHsKICAgIGNvbG9yOiAjOGYzZjcxOwp9CgouaGxqcy1jb21tZW50LAouaGxqcy1lbXBoYXNpcyB7CiAgICBmb250LXN0eWxlOiBpdGFsaWM7Cn0KCi5obGpzLXNlY3Rpb24sCi5obGpzLXN0cm9uZywKLmhsanMtdGFnIHsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cg==`
	reloadJs  = `'use strict';const saveScroll=()=>{let a=window.pageXOffset||document.body.scrollLeft,b=window.pageYOffset||document.body.scrollTop;window.sessionStorage.setItem('scrollX',a.toString()),window.sessionStorage.setItem('scrollY',b.toString())},loadScroll=()=>{let a,b=0;window.sessionStorage.getItem('scrollX')&&(a=parseFloat(window.sessionStorage.getItem('scrollX'))),window.sessionStorage.getItem('scrollY')&&(b=parseFloat(window.sessionStorage.getItem('scrollY'))),window.scrollTo(a,b)},socketMessageListener=a=>{console.log('ws data',a.data);let b=JSON.parse(a.data);b.message==="reload"&&location.reload()},socketOpenListener=()=>{console.log('ws connected',socket.url)},socketCloseListener=()=>{socket&&console.log('ws disconnected');let a=window.origin.replace('http','ws')+'/ws';console.log(a),socket=new WebSocket(a),socket.addEventListener('open',socketOpenListener),socket.addEventListener('message',socketMessageListener),socket.addEventListener('close',socketCloseListener)};let socket;document.addEventListener("DOMContentLoaded",loadScroll),window.addEventListener("beforeunload",saveScroll),socketCloseListener()`
	customJs  = `LyoKICBIaWdobGlnaHQuanMgMTAuMi4wIChkYTdkMTQ5YikKICBMaWNlbnNlOiBCU0QtMy1DbGF1c2UKICBDb3B5cmlnaHQgKGMpIDIwMDYtMjAyMCwgSXZhbiBTYWdhbGFldgoqLwp2YXIgaGxqcyA9IGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CgogIGZ1bmN0aW9uIGUobikgewogICAgT2JqZWN0LmZyZWV6ZShuKTsKICAgIHZhciB0ID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgbjsKICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5mb3JFYWNoKChmdW5jdGlvbiAocikgewogICAgICAhT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobiwgcikgfHwgbnVsbCA9PT0gbltyXSB8fCAib2JqZWN0IiAhPSB0eXBlb2YgbltyXSAmJiAiZnVuY3Rpb24iICE9IHR5cGVvZiBuW3JdIHx8IHQgJiYgKCJjYWxsZXIiID09PSByIHx8ICJjYWxsZWUiID09PSByIHx8ICJhcmd1bWVudHMiID09PSByKSB8fCBPYmplY3QuaXNGcm96ZW4obltyXSkgfHwgZShuW3JdKQogICAgfSkpLCBuCiAgfQoKICBjbGFzcyBuIHsKICAgIGNvbnN0cnVjdG9yKGUpIHsKICAgICAgdm9pZCAwID09PSBlLmRhdGEgJiYgKGUuZGF0YSA9IHt9KSwgdGhpcy5kYXRhID0gZS5kYXRhCiAgICB9CgogICAgaWdub3JlTWF0Y2goKSB7CiAgICAgIHRoaXMuaWdub3JlID0gITAKICAgIH0KICB9CgogIGZ1bmN0aW9uIHQoZSkgewogICAgcmV0dXJuIGUucmVwbGFjZSgvJi9nLCAiJmFtcDsiKS5yZXBsYWNlKC88L2csICImbHQ7IikucmVwbGFjZSgvPi9nLCAiJmd0OyIpLnJlcGxhY2UoLyIvZywgIiZxdW90OyIpLnJlcGxhY2UoLycvZywgIiYjeDI3OyIpCiAgfQoKICBmdW5jdGlvbiByKGUsIC4uLm4pIHsKICAgIHZhciB0ID0ge307CiAgICBmb3IgKGNvbnN0IG4gaW4gZSkgdFtuXSA9IGVbbl07CiAgICByZXR1cm4gbi5mb3JFYWNoKChmdW5jdGlvbiAoZSkgewogICAgICBmb3IgKGNvbnN0IG4gaW4gZSkgdFtuXSA9IGVbbl0KICAgIH0pKSwgdAogIH0KCiAgZnVuY3Rpb24gYShlKSB7CiAgICByZXR1cm4gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpCiAgfQoKICB2YXIgaSA9IE9iamVjdC5mcmVlemUoewogICAgX19wcm90b19fOiBudWxsLCBlc2NhcGVIVE1MOiB0LCBpbmhlcml0OiByLCBub2RlU3RyZWFtOiBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgbiA9IFtdOwogICAgICByZXR1cm4gZnVuY3Rpb24gZSh0LCByKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IHQuZmlyc3RDaGlsZDsgaTsgaSA9IGkubmV4dFNpYmxpbmcpIDMgPT09IGkubm9kZVR5cGUgPyByICs9IGkubm9kZVZhbHVlLmxlbmd0aCA6IDEgPT09IGkubm9kZVR5cGUgJiYgKG4ucHVzaCh7CiAgICAgICAgICBldmVudDogInN0YXJ0IiwKICAgICAgICAgIG9mZnNldDogciwKICAgICAgICAgIG5vZGU6IGkKICAgICAgICB9KSwgciA9IGUoaSwgciksIGEoaSkubWF0Y2goL2JyfGhyfGltZ3xpbnB1dC8pIHx8IG4ucHVzaCh7ZXZlbnQ6ICJzdG9wIiwgb2Zmc2V0OiByLCBub2RlOiBpfSkpOwogICAgICAgIHJldHVybiByCiAgICAgIH0oZSwgMCksIG4KICAgIH0sIG1lcmdlU3RyZWFtczogZnVuY3Rpb24gKGUsIG4sIHIpIHsKICAgICAgdmFyIGkgPSAwLCBzID0gIiIsIG8gPSBbXTsKCiAgICAgIGZ1bmN0aW9uIGwoKSB7CiAgICAgICAgcmV0dXJuIGUubGVuZ3RoICYmIG4ubGVuZ3RoID8gZVswXS5vZmZzZXQgIT09IG5bMF0ub2Zmc2V0ID8gZVswXS5vZmZzZXQgPCBuWzBdLm9mZnNldCA/IGUgOiBuIDogInN0YXJ0IiA9PT0gblswXS5ldmVudCA/IGUgOiBuIDogZS5sZW5ndGggPyBlIDogbgogICAgICB9CgogICAgICBmdW5jdGlvbiBjKGUpIHsKICAgICAgICBzICs9ICI8IiArIGEoZSkgKyBbXS5tYXAuY2FsbChlLmF0dHJpYnV0ZXMsIChmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuICIgIiArIGUubm9kZU5hbWUgKyAnPSInICsgdChlLnZhbHVlKSArICciJwogICAgICAgIH0pKS5qb2luKCIiKSArICI+IgogICAgICB9CgogICAgICBmdW5jdGlvbiB1KGUpIHsKICAgICAgICBzICs9ICI8LyIgKyBhKGUpICsgIj4iCiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGcoZSkgewogICAgICAgICgic3RhcnQiID09PSBlLmV2ZW50ID8gYyA6IHUpKGUubm9kZSkKICAgICAgfQoKICAgICAgZm9yICg7IGUubGVuZ3RoIHx8IG4ubGVuZ3RoOykgewogICAgICAgIHZhciBkID0gbCgpOwogICAgICAgIGlmIChzICs9IHQoci5zdWJzdHJpbmcoaSwgZFswXS5vZmZzZXQpKSwgaSA9IGRbMF0ub2Zmc2V0LCBkID09PSBlKSB7CiAgICAgICAgICBvLnJldmVyc2UoKS5mb3JFYWNoKHUpOwogICAgICAgICAgZG8gewogICAgICAgICAgICBnKGQuc3BsaWNlKDAsIDEpWzBdKSwgZCA9IGwoKQogICAgICAgICAgfSB3aGlsZSAoZCA9PT0gZSAmJiBkLmxlbmd0aCAmJiBkWzBdLm9mZnNldCA9PT0gaSk7CiAgICAgICAgICBvLnJldmVyc2UoKS5mb3JFYWNoKGMpCiAgICAgICAgfSBlbHNlICJzdGFydCIgPT09IGRbMF0uZXZlbnQgPyBvLnB1c2goZFswXS5ub2RlKSA6IG8ucG9wKCksIGcoZC5zcGxpY2UoMCwgMSlbMF0pCiAgICAgIH0KICAgICAgcmV0dXJuIHMgKyB0KHIuc3Vic3RyKGkpKQogICAgfQogIH0pOwogIGNvbnN0IHMgPSAiPC9zcGFuPiIsIG8gPSBlID0+ICEhZS5raW5kOwoKICBjbGFzcyBsIHsKICAgIGNvbnN0cnVjdG9yKGUsIG4pIHsKICAgICAgdGhpcy5idWZmZXIgPSAiIiwgdGhpcy5jbGFzc1ByZWZpeCA9IG4uY2xhc3NQcmVmaXgsIGUud2Fsayh0aGlzKQogICAgfQoKICAgIGFkZFRleHQoZSkgewogICAgICB0aGlzLmJ1ZmZlciArPSB0KGUpCiAgICB9CgogICAgb3Blbk5vZGUoZSkgewogICAgICBpZiAoIW8oZSkpIHJldHVybjsKICAgICAgbGV0IG4gPSBlLmtpbmQ7CiAgICAgIGUuc3VibGFuZ3VhZ2UgfHwgKG4gPSBgJHt0aGlzLmNsYXNzUHJlZml4fSR7bn1gKSwgdGhpcy5zcGFuKG4pCiAgICB9CgogICAgY2xvc2VOb2RlKGUpIHsKICAgICAgbyhlKSAmJiAodGhpcy5idWZmZXIgKz0gcykKICAgIH0KCiAgICB2YWx1ZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyCiAgICB9CgogICAgc3BhbihlKSB7CiAgICAgIHRoaXMuYnVmZmVyICs9IGA8c3BhbiBjbGFzcz0iJHtlfSI+YAogICAgfQogIH0KCiAgY2xhc3MgYyB7CiAgICBjb25zdHJ1Y3RvcigpIHsKICAgICAgdGhpcy5yb290Tm9kZSA9IHtjaGlsZHJlbjogW119LCB0aGlzLnN0YWNrID0gW3RoaXMucm9vdE5vZGVdCiAgICB9CgogICAgZ2V0IHRvcCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXQogICAgfQoKICAgIGdldCByb290KCkgewogICAgICByZXR1cm4gdGhpcy5yb290Tm9kZQogICAgfQoKICAgIGFkZChlKSB7CiAgICAgIHRoaXMudG9wLmNoaWxkcmVuLnB1c2goZSkKICAgIH0KCiAgICBvcGVuTm9kZShlKSB7CiAgICAgIGNvbnN0IG4gPSB7a2luZDogZSwgY2hpbGRyZW46IFtdfTsKICAgICAgdGhpcy5hZGQobiksIHRoaXMuc3RhY2sucHVzaChuKQogICAgfQoKICAgIGNsb3NlTm9kZSgpIHsKICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoID4gMSkgcmV0dXJuIHRoaXMuc3RhY2sucG9wKCkKICAgIH0KCiAgICBjbG9zZUFsbE5vZGVzKCkgewogICAgICBmb3IgKDsgdGhpcy5jbG9zZU5vZGUoKTspIDsKICAgIH0KCiAgICB0b0pTT04oKSB7CiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnJvb3ROb2RlLCBudWxsLCA0KQogICAgfQoKICAgIHdhbGsoZSkgewogICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5fd2FsayhlLCB0aGlzLnJvb3ROb2RlKQogICAgfQoKICAgIHN0YXRpYyBfd2FsayhlLCBuKSB7CiAgICAgIHJldHVybiAic3RyaW5nIiA9PSB0eXBlb2YgbiA/IGUuYWRkVGV4dChuKSA6IG4uY2hpbGRyZW4gJiYgKGUub3Blbk5vZGUobiksIG4uY2hpbGRyZW4uZm9yRWFjaChuID0+IHRoaXMuX3dhbGsoZSwgbikpLCBlLmNsb3NlTm9kZShuKSksIGUKICAgIH0KCiAgICBzdGF0aWMgX2NvbGxhcHNlKGUpIHsKICAgICAgInN0cmluZyIgIT0gdHlwZW9mIGUgJiYgZS5jaGlsZHJlbiAmJiAoZS5jaGlsZHJlbi5ldmVyeShlID0+ICJzdHJpbmciID09IHR5cGVvZiBlKSA/IGUuY2hpbGRyZW4gPSBbZS5jaGlsZHJlbi5qb2luKCIiKV0gOiBlLmNoaWxkcmVuLmZvckVhY2goZSA9PiB7CiAgICAgICAgYy5fY29sbGFwc2UoZSkKICAgICAgfSkpCiAgICB9CiAgfQoKICBjbGFzcyB1IGV4dGVuZHMgYyB7CiAgICBjb25zdHJ1Y3RvcihlKSB7CiAgICAgIHN1cGVyKCksIHRoaXMub3B0aW9ucyA9IGUKICAgIH0KCiAgICBhZGRLZXl3b3JkKGUsIG4pIHsKICAgICAgIiIgIT09IGUgJiYgKHRoaXMub3Blbk5vZGUobiksIHRoaXMuYWRkVGV4dChlKSwgdGhpcy5jbG9zZU5vZGUoKSkKICAgIH0KCiAgICBhZGRUZXh0KGUpIHsKICAgICAgIiIgIT09IGUgJiYgdGhpcy5hZGQoZSkKICAgIH0KCiAgICBhZGRTdWJsYW5ndWFnZShlLCBuKSB7CiAgICAgIGNvbnN0IHQgPSBlLnJvb3Q7CiAgICAgIHQua2luZCA9IG4sIHQuc3VibGFuZ3VhZ2UgPSAhMCwgdGhpcy5hZGQodCkKICAgIH0KCiAgICB0b0hUTUwoKSB7CiAgICAgIHJldHVybiBuZXcgbCh0aGlzLCB0aGlzLm9wdGlvbnMpLnZhbHVlKCkKICAgIH0KCiAgICBmaW5hbGl6ZSgpIHsKICAgICAgcmV0dXJuICEwCiAgICB9CiAgfQoKICBmdW5jdGlvbiBnKGUpIHsKICAgIHJldHVybiBlID8gInN0cmluZyIgPT0gdHlwZW9mIGUgPyBlIDogZS5zb3VyY2UgOiBudWxsCiAgfQoKICBjb25zdCBkID0gIigtPykoXFxiMFt4WF1bYS1mQS1GMC05XSt8KFxcYlxcZCsoXFwuXFxkKik/fFxcLlxcZCspKFtlRV1bLStdP1xcZCspPykiLAogICAgaCA9IHtiZWdpbjogIlxcXFxbXFxzXFxTXSIsIHJlbGV2YW5jZTogMH0sCiAgICBmID0ge2NsYXNzTmFtZTogInN0cmluZyIsIGJlZ2luOiAiJyIsIGVuZDogIiciLCBpbGxlZ2FsOiAiXFxuIiwgY29udGFpbnM6IFtoXX0sCiAgICBwID0ge2NsYXNzTmFtZTogInN0cmluZyIsIGJlZ2luOiAnIicsIGVuZDogJyInLCBpbGxlZ2FsOiAiXFxuIiwgY29udGFpbnM6IFtoXX0sCiAgICBtID0ge2JlZ2luOiAvXGIoYXxhbnx0aGV8YXJlfEknbXxpc24ndHxkb24ndHxkb2Vzbid0fHdvbid0fGJ1dHxqdXN0fHNob3VsZHxwcmV0dHl8c2ltcGx5fGVub3VnaHxnb25uYXxnb2luZ3x3dGZ8c298c3VjaHx3aWxsfHlvdXx5b3VyfHRoZXl8bGlrZXxtb3JlKVxiL30sCiAgICBiID0gZnVuY3Rpb24gKGUsIG4sIHQgPSB7fSkgewogICAgICB2YXIgYSA9IHIoe2NsYXNzTmFtZTogImNvbW1lbnQiLCBiZWdpbjogZSwgZW5kOiBuLCBjb250YWluczogW119LCB0KTsKICAgICAgcmV0dXJuIGEuY29udGFpbnMucHVzaChtKSwgYS5jb250YWlucy5wdXNoKHsKICAgICAgICBjbGFzc05hbWU6ICJkb2N0YWciLAogICAgICAgIGJlZ2luOiAiKD86VE9ET3xGSVhNRXxOT1RFfEJVR3xPUFRJTUlaRXxIQUNLfFhYWCk6IiwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfSksIGEKICAgIH0sIHYgPSBiKCIvLyIsICIkIiksIHggPSBiKCIvXFwqIiwgIlxcKi8iKSwgRSA9IGIoIiMiLCAiJCIpOwogIHZhciBfID0gT2JqZWN0LmZyZWV6ZSh7CiAgICBfX3Byb3RvX186IG51bGwsCiAgICBJREVOVF9SRTogIlthLXpBLVpdXFx3KiIsCiAgICBVTkRFUlNDT1JFX0lERU5UX1JFOiAiW2EtekEtWl9dXFx3KiIsCiAgICBOVU1CRVJfUkU6ICJcXGJcXGQrKFxcLlxcZCspPyIsCiAgICBDX05VTUJFUl9SRTogZCwKICAgIEJJTkFSWV9OVU1CRVJfUkU6ICJcXGIoMGJbMDFdKykiLAogICAgUkVfU1RBUlRFUlNfUkU6ICIhfCE9fCE9PXwlfCU9fCZ8JiZ8Jj18XFwqfFxcKj18XFwrfFxcKz18LHwtfC09fC89fC98Onw7fDw8fDw8PXw8PXw8fD09PXw9PXw9fD4+Pj18Pj49fD49fD4+Pnw+Pnw+fFxcP3xcXFt8XFx7fFxcKHxcXF58XFxePXxcXHx8XFx8PXxcXHxcXHx8fiIsCiAgICBTSEVCQU5HOiAoZSA9IHt9KSA9PiB7CiAgICAgIGNvbnN0IG4gPSAvXiMhWyBdKlwvLzsKICAgICAgcmV0dXJuIGUuYmluYXJ5ICYmIChlLmJlZ2luID0gZnVuY3Rpb24gKC4uLmUpIHsKICAgICAgICByZXR1cm4gZS5tYXAoZSA9PiBnKGUpKS5qb2luKCIiKQogICAgICB9KG4sIC8uKlxiLywgZS5iaW5hcnksIC9cYi4qLykpLCByKHsKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICBiZWdpbjogbiwKICAgICAgICBlbmQ6IC8kLywKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgIm9uOmJlZ2luIjogKGUsIG4pID0+IHsKICAgICAgICAgIDAgIT09IGUuaW5kZXggJiYgbi5pZ25vcmVNYXRjaCgpCiAgICAgICAgfQogICAgICB9LCBlKQogICAgfSwKICAgIEJBQ0tTTEFTSF9FU0NBUEU6IGgsCiAgICBBUE9TX1NUUklOR19NT0RFOiBmLAogICAgUVVPVEVfU1RSSU5HX01PREU6IHAsCiAgICBQSFJBU0FMX1dPUkRTX01PREU6IG0sCiAgICBDT01NRU5UOiBiLAogICAgQ19MSU5FX0NPTU1FTlRfTU9ERTogdiwKICAgIENfQkxPQ0tfQ09NTUVOVF9NT0RFOiB4LAogICAgSEFTSF9DT01NRU5UX01PREU6IEUsCiAgICBOVU1CRVJfTU9ERToge2NsYXNzTmFtZTogIm51bWJlciIsIGJlZ2luOiAiXFxiXFxkKyhcXC5cXGQrKT8iLCByZWxldmFuY2U6IDB9LAogICAgQ19OVU1CRVJfTU9ERToge2NsYXNzTmFtZTogIm51bWJlciIsIGJlZ2luOiBkLCByZWxldmFuY2U6IDB9LAogICAgQklOQVJZX05VTUJFUl9NT0RFOiB7Y2xhc3NOYW1lOiAibnVtYmVyIiwgYmVnaW46ICJcXGIoMGJbMDFdKykiLCByZWxldmFuY2U6IDB9LAogICAgQ1NTX05VTUJFUl9NT0RFOiB7CiAgICAgIGNsYXNzTmFtZTogIm51bWJlciIsCiAgICAgIGJlZ2luOiAiXFxiXFxkKyhcXC5cXGQrKT8oJXxlbXxleHxjaHxyZW18dnd8dmh8dm1pbnx2bWF4fGNtfG1tfGlufHB0fHBjfHB4fGRlZ3xncmFkfHJhZHx0dXJufHN8bXN8SHp8a0h6fGRwaXxkcGNtfGRwcHgpPyIsCiAgICAgIHJlbGV2YW5jZTogMAogICAgfSwKICAgIFJFR0VYUF9NT0RFOiB7CiAgICAgIGJlZ2luOiAvKD89XC9bXi9cbl0qXC8pLywKICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgY2xhc3NOYW1lOiAicmVnZXhwIiwKICAgICAgICBiZWdpbjogL1wvLywKICAgICAgICBlbmQ6IC9cL1tnaW11eV0qLywKICAgICAgICBpbGxlZ2FsOiAvXG4vLAogICAgICAgIGNvbnRhaW5zOiBbaCwge2JlZ2luOiAvXFsvLCBlbmQ6IC9cXS8sIHJlbGV2YW5jZTogMCwgY29udGFpbnM6IFtoXX1dCiAgICAgIH1dCiAgICB9LAogICAgVElUTEVfTU9ERToge2NsYXNzTmFtZTogInRpdGxlIiwgYmVnaW46ICJbYS16QS1aXVxcdyoiLCByZWxldmFuY2U6IDB9LAogICAgVU5ERVJTQ09SRV9USVRMRV9NT0RFOiB7Y2xhc3NOYW1lOiAidGl0bGUiLCBiZWdpbjogIlthLXpBLVpfXVxcdyoiLCByZWxldmFuY2U6IDB9LAogICAgTUVUSE9EX0dVQVJEOiB7YmVnaW46ICJcXC5cXHMqW2EtekEtWl9dXFx3KiIsIHJlbGV2YW5jZTogMH0sCiAgICBFTkRfU0FNRV9BU19CRUdJTjogZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZSwgewogICAgICAgICJvbjpiZWdpbiI6IChlLCBuKSA9PiB7CiAgICAgICAgICBuLmRhdGEuX2JlZ2luTWF0Y2ggPSBlWzFdCiAgICAgICAgfSwgIm9uOmVuZCI6IChlLCBuKSA9PiB7CiAgICAgICAgICBuLmRhdGEuX2JlZ2luTWF0Y2ggIT09IGVbMV0gJiYgbi5pZ25vcmVNYXRjaCgpCiAgICAgICAgfQogICAgICB9KQogICAgfQogIH0pLCB3ID0gIm9mIGFuZCBmb3IgaW4gbm90IG9yIGlmIHRoZW4iLnNwbGl0KCIgIik7CgogIGZ1bmN0aW9uIE4oZSwgbikgewogICAgcmV0dXJuIG4gPyArbiA6IGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB3LmluY2x1ZGVzKGUudG9Mb3dlckNhc2UoKSkKICAgIH0oZSkgPyAwIDogMQogIH0KCiAgY29uc3QgeSA9IHsKICAgIHByb3BzOiBbImxhbmd1YWdlIiwgImNvZGUiLCAiYXV0b2RldGVjdCJdLCBkYXRhOiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB7ZGV0ZWN0ZWRMYW5ndWFnZTogIiIsIHVua25vd25MYW5ndWFnZTogITF9CiAgICB9LCBjb21wdXRlZDogewogICAgICBjbGFzc05hbWUoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudW5rbm93bkxhbmd1YWdlID8gIiIgOiAiaGxqcyAiICsgdGhpcy5kZXRlY3RlZExhbmd1YWdlCiAgICAgIH0sIGhpZ2hsaWdodGVkKCkgewogICAgICAgIGlmICghdGhpcy5hdXRvRGV0ZWN0ICYmICFobGpzLmdldExhbmd1YWdlKHRoaXMubGFuZ3VhZ2UpKSByZXR1cm4gY29uc29sZS53YXJuKGBUaGUgbGFuZ3VhZ2UgIiR7dGhpcy5sYW5ndWFnZX0iIHlvdSBzcGVjaWZpZWQgY291bGQgbm90IGJlIGZvdW5kLmApLCB0aGlzLnVua25vd25MYW5ndWFnZSA9ICEwLCB0KHRoaXMuY29kZSk7CiAgICAgICAgbGV0IGU7CiAgICAgICAgcmV0dXJuIHRoaXMuYXV0b0RldGVjdCA/IChlID0gaGxqcy5oaWdobGlnaHRBdXRvKHRoaXMuY29kZSksIHRoaXMuZGV0ZWN0ZWRMYW5ndWFnZSA9IGUubGFuZ3VhZ2UpIDogKGUgPSBobGpzLmhpZ2hsaWdodCh0aGlzLmxhbmd1YWdlLCB0aGlzLmNvZGUsIHRoaXMuaWdub3JlSWxsZWdhbHMpLCB0aGlzLmRldGVjdGVjdExhbmd1YWdlID0gdGhpcy5sYW5ndWFnZSksIGUudmFsdWUKICAgICAgfSwgYXV0b0RldGVjdCgpIHsKICAgICAgICByZXR1cm4gISh0aGlzLmxhbmd1YWdlICYmIChlID0gdGhpcy5hdXRvZGV0ZWN0LCAhZSAmJiAiIiAhPT0gZSkpOwogICAgICAgIHZhciBlCiAgICAgIH0sIGlnbm9yZUlsbGVnYWxzOiAoKSA9PiAhMAogICAgfSwgcmVuZGVyKGUpIHsKICAgICAgcmV0dXJuIGUoInByZSIsIHt9LCBbZSgiY29kZSIsIHtjbGFzczogdGhpcy5jbGFzc05hbWUsIGRvbVByb3BzOiB7aW5uZXJIVE1MOiB0aGlzLmhpZ2hsaWdodGVkfX0pXSkKICAgIH0KICB9LCBSID0gewogICAgaW5zdGFsbChlKSB7CiAgICAgIGUuY29tcG9uZW50KCJoaWdobGlnaHRqcyIsIHkpCiAgICB9CiAgfSwgayA9IHQsIE8gPSByLCB7bm9kZVN0cmVhbTogTSwgbWVyZ2VTdHJlYW1zOiBMfSA9IGksIFQgPSBTeW1ib2woIm5vbWF0Y2giKTsKICByZXR1cm4gZnVuY3Rpb24gKHQpIHsKICAgIHZhciBhID0gW10sIGkgPSBPYmplY3QuY3JlYXRlKG51bGwpLCBzID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgbyA9IFtdLCBsID0gITAsIGMgPSAvKF4oPFtePl0rPnxcdHwpK3xcbikvZ20sCiAgICAgIGQgPSAiQ291bGQgbm90IGZpbmQgdGhlIGxhbmd1YWdlICd7fScsIGRpZCB5b3UgZm9yZ2V0IHRvIGxvYWQvaW5jbHVkZSBhIGxhbmd1YWdlIG1vZHVsZT8iOwogICAgY29uc3QgaCA9IHtkaXNhYmxlQXV0b2RldGVjdDogITAsIG5hbWU6ICJQbGFpbiB0ZXh0IiwgY29udGFpbnM6IFtdfTsKICAgIHZhciBmID0gewogICAgICBub0hpZ2hsaWdodFJlOiAvXihuby0/aGlnaGxpZ2h0KSQvaSwKICAgICAgbGFuZ3VhZ2VEZXRlY3RSZTogL1xibGFuZyg/OnVhZ2UpPy0oW1x3LV0rKVxiL2ksCiAgICAgIGNsYXNzUHJlZml4OiAiaGxqcy0iLAogICAgICB0YWJSZXBsYWNlOiBudWxsLAogICAgICB1c2VCUjogITEsCiAgICAgIGxhbmd1YWdlczogbnVsbCwKICAgICAgX19lbWl0dGVyOiB1CiAgICB9OwoKICAgIGZ1bmN0aW9uIHAoZSkgewogICAgICByZXR1cm4gZi5ub0hpZ2hsaWdodFJlLnRlc3QoZSkKICAgIH0KCiAgICBmdW5jdGlvbiBtKGUsIG4sIHQsIHIpIHsKICAgICAgdmFyIGEgPSB7Y29kZTogbiwgbGFuZ3VhZ2U6IGV9OwogICAgICBTKCJiZWZvcmU6aGlnaGxpZ2h0IiwgYSk7CiAgICAgIHZhciBpID0gYS5yZXN1bHQgPyBhLnJlc3VsdCA6IGIoYS5sYW5ndWFnZSwgYS5jb2RlLCB0LCByKTsKICAgICAgcmV0dXJuIGkuY29kZSA9IGEuY29kZSwgUygiYWZ0ZXI6aGlnaGxpZ2h0IiwgaSksIGkKICAgIH0KCiAgICBmdW5jdGlvbiBiKGUsIHQsIGEsIHMpIHsKICAgICAgdmFyIG8gPSB0OwoKICAgICAgZnVuY3Rpb24gYyhlLCBuKSB7CiAgICAgICAgdmFyIHQgPSBFLmNhc2VfaW5zZW5zaXRpdmUgPyBuWzBdLnRvTG93ZXJDYXNlKCkgOiBuWzBdOwogICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZS5rZXl3b3JkcywgdCkgJiYgZS5rZXl3b3Jkc1t0XQogICAgICB9CgogICAgICBmdW5jdGlvbiB1KCkgewogICAgICAgIG51bGwgIT0gUi5zdWJMYW5ndWFnZSA/IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICgiIiAhPT0gTCkgewogICAgICAgICAgICB2YXIgZSA9IG51bGw7CiAgICAgICAgICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgUi5zdWJMYW5ndWFnZSkgewogICAgICAgICAgICAgIGlmICghaVtSLnN1Ykxhbmd1YWdlXSkgcmV0dXJuIHZvaWQgTS5hZGRUZXh0KEwpOwogICAgICAgICAgICAgIGUgPSBiKFIuc3ViTGFuZ3VhZ2UsIEwsICEwLCBPW1Iuc3ViTGFuZ3VhZ2VdKSwgT1tSLnN1Ykxhbmd1YWdlXSA9IGUudG9wCiAgICAgICAgICAgIH0gZWxzZSBlID0gdihMLCBSLnN1Ykxhbmd1YWdlLmxlbmd0aCA/IFIuc3ViTGFuZ3VhZ2UgOiBudWxsKTsKICAgICAgICAgICAgUi5yZWxldmFuY2UgPiAwICYmIChqICs9IGUucmVsZXZhbmNlKSwgTS5hZGRTdWJsYW5ndWFnZShlLmVtaXR0ZXIsIGUubGFuZ3VhZ2UpCiAgICAgICAgICB9CiAgICAgICAgfSgpIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKCFSLmtleXdvcmRzKSByZXR1cm4gdm9pZCBNLmFkZFRleHQoTCk7CiAgICAgICAgICBsZXQgZSA9IDA7CiAgICAgICAgICBSLmtleXdvcmRQYXR0ZXJuUmUubGFzdEluZGV4ID0gMDsKICAgICAgICAgIGxldCBuID0gUi5rZXl3b3JkUGF0dGVyblJlLmV4ZWMoTCksIHQgPSAiIjsKICAgICAgICAgIGZvciAoOyBuOykgewogICAgICAgICAgICB0ICs9IEwuc3Vic3RyaW5nKGUsIG4uaW5kZXgpOwogICAgICAgICAgICBjb25zdCByID0gYyhSLCBuKTsKICAgICAgICAgICAgaWYgKHIpIHsKICAgICAgICAgICAgICBjb25zdCBbZSwgYV0gPSByOwogICAgICAgICAgICAgIE0uYWRkVGV4dCh0KSwgdCA9ICIiLCBqICs9IGEsIE0uYWRkS2V5d29yZChuWzBdLCBlKQogICAgICAgICAgICB9IGVsc2UgdCArPSBuWzBdOwogICAgICAgICAgICBlID0gUi5rZXl3b3JkUGF0dGVyblJlLmxhc3RJbmRleCwgbiA9IFIua2V5d29yZFBhdHRlcm5SZS5leGVjKEwpCiAgICAgICAgICB9CiAgICAgICAgICB0ICs9IEwuc3Vic3RyKGUpLCBNLmFkZFRleHQodCkKICAgICAgICB9KCksIEwgPSAiIgogICAgICB9CgogICAgICBmdW5jdGlvbiBoKGUpIHsKICAgICAgICByZXR1cm4gZS5jbGFzc05hbWUgJiYgTS5vcGVuTm9kZShlLmNsYXNzTmFtZSksIFIgPSBPYmplY3QuY3JlYXRlKGUsIHtwYXJlbnQ6IHt2YWx1ZTogUn19KQogICAgICB9CgogICAgICBmdW5jdGlvbiBwKGUpIHsKICAgICAgICByZXR1cm4gMCA9PT0gUi5tYXRjaGVyLnJlZ2V4SW5kZXggPyAoTCArPSBlWzBdLCAxKSA6IChJID0gITAsIDApCiAgICAgIH0KCiAgICAgIHZhciBtID0ge307CgogICAgICBmdW5jdGlvbiB4KHQsIHIpIHsKICAgICAgICB2YXIgaSA9IHIgJiYgclswXTsKICAgICAgICBpZiAoTCArPSB0LCBudWxsID09IGkpIHJldHVybiB1KCksIDA7CiAgICAgICAgaWYgKCJiZWdpbiIgPT09IG0udHlwZSAmJiAiZW5kIiA9PT0gci50eXBlICYmIG0uaW5kZXggPT09IHIuaW5kZXggJiYgIiIgPT09IGkpIHsKICAgICAgICAgIGlmIChMICs9IG8uc2xpY2Uoci5pbmRleCwgci5pbmRleCArIDEpLCAhbCkgewogICAgICAgICAgICBjb25zdCBuID0gRXJyb3IoIjAgd2lkdGggbWF0Y2ggcmVnZXgiKTsKICAgICAgICAgICAgdGhyb3cgbi5sYW5ndWFnZU5hbWUgPSBlLCBuLmJhZFJ1bGUgPSBtLnJ1bGUsIG4KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiAxCiAgICAgICAgfQogICAgICAgIGlmIChtID0gciwgImJlZ2luIiA9PT0gci50eXBlKSByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0ID0gZVswXSwgciA9IGUucnVsZTsKICAgICAgICAgIGNvbnN0IGEgPSBuZXcgbihyKSwgaSA9IFtyLl9fYmVmb3JlQmVnaW4sIHJbIm9uOmJlZ2luIl1dOwogICAgICAgICAgZm9yIChjb25zdCBuIG9mIGkpIGlmIChuICYmIChuKGUsIGEpLCBhLmlnbm9yZSkpIHJldHVybiBwKHQpOwogICAgICAgICAgcmV0dXJuIHIgJiYgci5lbmRTYW1lQXNCZWdpbiAmJiAoci5lbmRSZSA9IFJlZ0V4cCh0LnJlcGxhY2UoL1stL1xcXiQqKz8uKCl8W1xde31dL2csICJcXCQmIiksICJtIikpLCByLnNraXAgPyBMICs9IHQgOiAoci5leGNsdWRlQmVnaW4gJiYgKEwgKz0gdCksIHUoKSwgci5yZXR1cm5CZWdpbiB8fCByLmV4Y2x1ZGVCZWdpbiB8fCAoTCA9IHQpKSwgaChyKSwgci5yZXR1cm5CZWdpbiA/IDAgOiB0Lmxlbmd0aAogICAgICAgIH0ocik7CiAgICAgICAgaWYgKCJpbGxlZ2FsIiA9PT0gci50eXBlICYmICFhKSB7CiAgICAgICAgICBjb25zdCBlID0gRXJyb3IoJ0lsbGVnYWwgbGV4ZW1lICInICsgaSArICciIGZvciBtb2RlICInICsgKFIuY2xhc3NOYW1lIHx8ICI8dW5uYW1lZD4iKSArICciJyk7CiAgICAgICAgICB0aHJvdyBlLm1vZGUgPSBSLCBlCiAgICAgICAgfQogICAgICAgIGlmICgiZW5kIiA9PT0gci50eXBlKSB7CiAgICAgICAgICB2YXIgcyA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciB0ID0gZVswXSwgciA9IG8uc3Vic3RyKGUuaW5kZXgpLCBhID0gZnVuY3Rpb24gZSh0LCByLCBhKSB7CiAgICAgICAgICAgICAgbGV0IGkgPSBmdW5jdGlvbiAoZSwgbikgewogICAgICAgICAgICAgICAgdmFyIHQgPSBlICYmIGUuZXhlYyhuKTsKICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIDAgPT09IHQuaW5kZXgKICAgICAgICAgICAgICB9KHQuZW5kUmUsIGEpOwogICAgICAgICAgICAgIGlmIChpKSB7CiAgICAgICAgICAgICAgICBpZiAodFsib246ZW5kIl0pIHsKICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBuKHQpOwogICAgICAgICAgICAgICAgICB0WyJvbjplbmQiXShyLCBlKSwgZS5pZ25vcmUgJiYgKGkgPSAhMSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoOyB0LmVuZHNQYXJlbnQgJiYgdC5wYXJlbnQ7KSB0ID0gdC5wYXJlbnQ7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0LmVuZHNXaXRoUGFyZW50KSByZXR1cm4gZSh0LnBhcmVudCwgciwgYSkKICAgICAgICAgICAgfShSLCBlLCByKTsKICAgICAgICAgICAgaWYgKCFhKSByZXR1cm4gVDsKICAgICAgICAgICAgdmFyIGkgPSBSOwogICAgICAgICAgICBpLnNraXAgPyBMICs9IHQgOiAoaS5yZXR1cm5FbmQgfHwgaS5leGNsdWRlRW5kIHx8IChMICs9IHQpLCB1KCksIGkuZXhjbHVkZUVuZCAmJiAoTCA9IHQpKTsKICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgIFIuY2xhc3NOYW1lICYmIE0uY2xvc2VOb2RlKCksIFIuc2tpcCB8fCBSLnN1Ykxhbmd1YWdlIHx8IChqICs9IFIucmVsZXZhbmNlKSwgUiA9IFIucGFyZW50CiAgICAgICAgICAgIH0gd2hpbGUgKFIgIT09IGEucGFyZW50KTsKICAgICAgICAgICAgcmV0dXJuIGEuc3RhcnRzICYmIChhLmVuZFNhbWVBc0JlZ2luICYmIChhLnN0YXJ0cy5lbmRSZSA9IGEuZW5kUmUpLCBoKGEuc3RhcnRzKSksIGkucmV0dXJuRW5kID8gMCA6IHQubGVuZ3RoCiAgICAgICAgICB9KHIpOwogICAgICAgICAgaWYgKHMgIT09IFQpIHJldHVybiBzCiAgICAgICAgfQogICAgICAgIGlmICgiaWxsZWdhbCIgPT09IHIudHlwZSAmJiAiIiA9PT0gaSkgcmV0dXJuIDE7CiAgICAgICAgaWYgKFMgPiAxZTUgJiYgUyA+IDMgKiByLmluZGV4KSB0aHJvdyBFcnJvcigicG90ZW50aWFsIGluZmluaXRlIGxvb3AsIHdheSBtb3JlIGl0ZXJhdGlvbnMgdGhhbiBtYXRjaGVzIik7CiAgICAgICAgcmV0dXJuIEwgKz0gaSwgaS5sZW5ndGgKICAgICAgfQoKICAgICAgdmFyIEUgPSB5KGUpOwogICAgICBpZiAoIUUpIHRocm93IGNvbnNvbGUuZXJyb3IoZC5yZXBsYWNlKCJ7fSIsIGUpKSwgRXJyb3IoJ1Vua25vd24gbGFuZ3VhZ2U6ICInICsgZSArICciJyk7CiAgICAgIHZhciBfID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBmdW5jdGlvbiBuKG4sIHQpIHsKICAgICAgICAgIHJldHVybiBSZWdFeHAoZyhuKSwgIm0iICsgKGUuY2FzZV9pbnNlbnNpdGl2ZSA/ICJpIiA6ICIiKSArICh0ID8gImciIDogIiIpKQogICAgICAgIH0KCiAgICAgICAgY2xhc3MgdCB7CiAgICAgICAgICBjb25zdHJ1Y3RvcigpIHsKICAgICAgICAgICAgdGhpcy5tYXRjaEluZGV4ZXMgPSB7fSwgdGhpcy5yZWdleGVzID0gW10sIHRoaXMubWF0Y2hBdCA9IDEsIHRoaXMucG9zaXRpb24gPSAwCiAgICAgICAgICB9CgogICAgICAgICAgYWRkUnVsZShlLCBuKSB7CiAgICAgICAgICAgIG4ucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uKyssIHRoaXMubWF0Y2hJbmRleGVzW3RoaXMubWF0Y2hBdF0gPSBuLCB0aGlzLnJlZ2V4ZXMucHVzaChbbiwgZV0pLCB0aGlzLm1hdGNoQXQgKz0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwKGUudG9TdHJpbmcoKSArICJ8IikuZXhlYygiIikubGVuZ3RoIC0gMQogICAgICAgICAgICB9KGUpICsgMQogICAgICAgICAgfQoKICAgICAgICAgIGNvbXBpbGUoKSB7CiAgICAgICAgICAgIDAgPT09IHRoaXMucmVnZXhlcy5sZW5ndGggJiYgKHRoaXMuZXhlYyA9ICgpID0+IG51bGwpOwogICAgICAgICAgICBjb25zdCBlID0gdGhpcy5yZWdleGVzLm1hcChlID0+IGVbMV0pOwogICAgICAgICAgICB0aGlzLm1hdGNoZXJSZSA9IG4oZnVuY3Rpb24gKGUsIG4gPSAifCIpIHsKICAgICAgICAgICAgICBmb3IgKHZhciB0ID0gL1xbKD86W15cXFxdXXxcXC4pKlxdfFwoXD8/fFxcKFsxLTldWzAtOV0qKXxcXC4vLCByID0gMCwgYSA9ICIiLCBpID0gMDsgaSA8IGUubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBzID0gciArPSAxLCBvID0gZyhlW2ldKTsKICAgICAgICAgICAgICAgIGZvciAoaSA+IDAgJiYgKGEgKz0gbiksIGEgKz0gIigiOyBvLmxlbmd0aCA+IDA7KSB7CiAgICAgICAgICAgICAgICAgIHZhciBsID0gdC5leGVjKG8pOwogICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBsKSB7CiAgICAgICAgICAgICAgICAgICAgYSArPSBvOwogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgYSArPSBvLnN1YnN0cmluZygwLCBsLmluZGV4KSwgbyA9IG8uc3Vic3RyaW5nKGwuaW5kZXggKyBsWzBdLmxlbmd0aCksICJcXCIgPT09IGxbMF1bMF0gJiYgbFsxXSA/IGEgKz0gIlxcIiArICgrbFsxXSArIHMpIDogKGEgKz0gbFswXSwgIigiID09PSBsWzBdICYmIHIrKykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGEgKz0gIikiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgIH0oZSksICEwKSwgdGhpcy5sYXN0SW5kZXggPSAwCiAgICAgICAgICB9CgogICAgICAgICAgZXhlYyhlKSB7CiAgICAgICAgICAgIHRoaXMubWF0Y2hlclJlLmxhc3RJbmRleCA9IHRoaXMubGFzdEluZGV4OwogICAgICAgICAgICBjb25zdCBuID0gdGhpcy5tYXRjaGVyUmUuZXhlYyhlKTsKICAgICAgICAgICAgaWYgKCFuKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgY29uc3QgdCA9IG4uZmluZEluZGV4KChlLCBuKSA9PiBuID4gMCAmJiB2b2lkIDAgIT09IGUpLCByID0gdGhpcy5tYXRjaEluZGV4ZXNbdF07CiAgICAgICAgICAgIHJldHVybiBuLnNwbGljZSgwLCB0KSwgT2JqZWN0LmFzc2lnbihuLCByKQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY2xhc3MgYSB7CiAgICAgICAgICBjb25zdHJ1Y3RvcigpIHsKICAgICAgICAgICAgdGhpcy5ydWxlcyA9IFtdLCB0aGlzLm11bHRpUmVnZXhlcyA9IFtdLCB0aGlzLmNvdW50ID0gMCwgdGhpcy5sYXN0SW5kZXggPSAwLCB0aGlzLnJlZ2V4SW5kZXggPSAwCiAgICAgICAgICB9CgogICAgICAgICAgZ2V0TWF0Y2hlcihlKSB7CiAgICAgICAgICAgIGlmICh0aGlzLm11bHRpUmVnZXhlc1tlXSkgcmV0dXJuIHRoaXMubXVsdGlSZWdleGVzW2VdOwogICAgICAgICAgICBjb25zdCBuID0gbmV3IHQ7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1bGVzLnNsaWNlKGUpLmZvckVhY2goKFtlLCB0XSkgPT4gbi5hZGRSdWxlKGUsIHQpKSwgbi5jb21waWxlKCksIHRoaXMubXVsdGlSZWdleGVzW2VdID0gbiwgbgogICAgICAgICAgfQoKICAgICAgICAgIHJlc3VtaW5nU2NhbkF0U2FtZVBvc2l0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gMCAhPSB0aGlzLnJlZ2V4SW5kZXgKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zaWRlckFsbCgpIHsKICAgICAgICAgICAgdGhpcy5yZWdleEluZGV4ID0gMAogICAgICAgICAgfQoKICAgICAgICAgIGFkZFJ1bGUoZSwgbikgewogICAgICAgICAgICB0aGlzLnJ1bGVzLnB1c2goW2UsIG5dKSwgImJlZ2luIiA9PT0gbi50eXBlICYmIHRoaXMuY291bnQrKwogICAgICAgICAgfQoKICAgICAgICAgIGV4ZWMoZSkgewogICAgICAgICAgICBjb25zdCBuID0gdGhpcy5nZXRNYXRjaGVyKHRoaXMucmVnZXhJbmRleCk7CiAgICAgICAgICAgIG4ubGFzdEluZGV4ID0gdGhpcy5sYXN0SW5kZXg7CiAgICAgICAgICAgIGNvbnN0IHQgPSBuLmV4ZWMoZSk7CiAgICAgICAgICAgIHJldHVybiB0ICYmICh0aGlzLnJlZ2V4SW5kZXggKz0gdC5wb3NpdGlvbiArIDEsIHRoaXMucmVnZXhJbmRleCA9PT0gdGhpcy5jb3VudCAmJiAodGhpcy5yZWdleEluZGV4ID0gMCkpLCB0CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpKGUsIG4pIHsKICAgICAgICAgIGNvbnN0IHQgPSBlLmlucHV0W2UuaW5kZXggLSAxXSwgciA9IGUuaW5wdXRbZS5pbmRleCArIGVbMF0ubGVuZ3RoXTsKICAgICAgICAgICIuIiAhPT0gdCAmJiAiLiIgIT09IHIgfHwgbi5pZ25vcmVNYXRjaCgpCiAgICAgICAgfQoKICAgICAgICBpZiAoZS5jb250YWlucyAmJiBlLmNvbnRhaW5zLmluY2x1ZGVzKCJzZWxmIikpIHRocm93IEVycm9yKCJFUlI6IGNvbnRhaW5zIGBzZWxmYCBpcyBub3Qgc3VwcG9ydGVkIGF0IHRoZSB0b3AtbGV2ZWwgb2YgYSBsYW5ndWFnZS4gIFNlZSBkb2N1bWVudGF0aW9uLiIpOwogICAgICAgIHJldHVybiBmdW5jdGlvbiB0KHMsIG8pIHsKICAgICAgICAgIGNvbnN0IGwgPSBzOwogICAgICAgICAgaWYgKHMuY29tcGlsZWQpIHJldHVybiBsOwogICAgICAgICAgcy5jb21waWxlZCA9ICEwLCBzLl9fYmVmb3JlQmVnaW4gPSBudWxsLCBzLmtleXdvcmRzID0gcy5rZXl3b3JkcyB8fCBzLmJlZ2luS2V5d29yZHM7CiAgICAgICAgICBsZXQgYyA9IG51bGw7CiAgICAgICAgICBpZiAoIm9iamVjdCIgPT0gdHlwZW9mIHMua2V5d29yZHMgJiYgKGMgPSBzLmtleXdvcmRzLiRwYXR0ZXJuLCBkZWxldGUgcy5rZXl3b3Jkcy4kcGF0dGVybiksIHMua2V5d29yZHMgJiYgKHMua2V5d29yZHMgPSBmdW5jdGlvbiAoZSwgbikgewogICAgICAgICAgICB2YXIgdCA9IHt9OwogICAgICAgICAgICByZXR1cm4gInN0cmluZyIgPT0gdHlwZW9mIGUgPyByKCJrZXl3b3JkIiwgZSkgOiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbiAobikgewogICAgICAgICAgICAgIHIobiwgZVtuXSkKICAgICAgICAgICAgfSkpLCB0OwoKICAgICAgICAgICAgZnVuY3Rpb24gcihlLCByKSB7CiAgICAgICAgICAgICAgbiAmJiAociA9IHIudG9Mb3dlckNhc2UoKSksIHIuc3BsaXQoIiAiKS5mb3JFYWNoKChmdW5jdGlvbiAobikgewogICAgICAgICAgICAgICAgdmFyIHIgPSBuLnNwbGl0KCJ8Iik7CiAgICAgICAgICAgICAgICB0W3JbMF1dID0gW2UsIE4oclswXSwgclsxXSldCiAgICAgICAgICAgICAgfSkpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0ocy5rZXl3b3JkcywgZS5jYXNlX2luc2Vuc2l0aXZlKSksIHMubGV4ZW1lcyAmJiBjKSB0aHJvdyBFcnJvcigiRVJSOiBQcmVmZXIgYGtleXdvcmRzLiRwYXR0ZXJuYCB0byBgbW9kZS5sZXhlbWVzYCwgQk9USCBhcmUgbm90IGFsbG93ZWQuIChzZWUgbW9kZSByZWZlcmVuY2UpICIpOwogICAgICAgICAgcmV0dXJuIGwua2V5d29yZFBhdHRlcm5SZSA9IG4ocy5sZXhlbWVzIHx8IGMgfHwgL1x3Ky8sICEwKSwgbyAmJiAocy5iZWdpbktleXdvcmRzICYmIChzLmJlZ2luID0gIlxcYigiICsgcy5iZWdpbktleXdvcmRzLnNwbGl0KCIgIikuam9pbigifCIpICsgIikoPz1cXGJ8XFxzKSIsIHMuX19iZWZvcmVCZWdpbiA9IGkpLCBzLmJlZ2luIHx8IChzLmJlZ2luID0gL1xCfFxiLyksIGwuYmVnaW5SZSA9IG4ocy5iZWdpbiksIHMuZW5kU2FtZUFzQmVnaW4gJiYgKHMuZW5kID0gcy5iZWdpbiksIHMuZW5kIHx8IHMuZW5kc1dpdGhQYXJlbnQgfHwgKHMuZW5kID0gL1xCfFxiLyksIHMuZW5kICYmIChsLmVuZFJlID0gbihzLmVuZCkpLCBsLnRlcm1pbmF0b3JfZW5kID0gZyhzLmVuZCkgfHwgIiIsIHMuZW5kc1dpdGhQYXJlbnQgJiYgby50ZXJtaW5hdG9yX2VuZCAmJiAobC50ZXJtaW5hdG9yX2VuZCArPSAocy5lbmQgPyAifCIgOiAiIikgKyBvLnRlcm1pbmF0b3JfZW5kKSksIHMuaWxsZWdhbCAmJiAobC5pbGxlZ2FsUmUgPSBuKHMuaWxsZWdhbCkpLCB2b2lkIDAgPT09IHMucmVsZXZhbmNlICYmIChzLnJlbGV2YW5jZSA9IDEpLCBzLmNvbnRhaW5zIHx8IChzLmNvbnRhaW5zID0gW10pLCBzLmNvbnRhaW5zID0gW10uY29uY2F0KC4uLnMuY29udGFpbnMubWFwKChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gZS52YXJpYW50cyAmJiAhZS5jYWNoZWRfdmFyaWFudHMgJiYgKGUuY2FjaGVkX3ZhcmlhbnRzID0gZS52YXJpYW50cy5tYXAoKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcihlLCB7dmFyaWFudHM6IG51bGx9LCBuKQogICAgICAgICAgICAgIH0pKSksIGUuY2FjaGVkX3ZhcmlhbnRzID8gZS5jYWNoZWRfdmFyaWFudHMgOiBmdW5jdGlvbiBlKG4pIHsKICAgICAgICAgICAgICAgIHJldHVybiAhIW4gJiYgKG4uZW5kc1dpdGhQYXJlbnQgfHwgZShuLnN0YXJ0cykpCiAgICAgICAgICAgICAgfShlKSA/IHIoZSwge3N0YXJ0czogZS5zdGFydHMgPyByKGUuc3RhcnRzKSA6IG51bGx9KSA6IE9iamVjdC5pc0Zyb3plbihlKSA/IHIoZSkgOiBlCiAgICAgICAgICAgIH0oInNlbGYiID09PSBlID8gcyA6IGUpCiAgICAgICAgICB9KSkpLCBzLmNvbnRhaW5zLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHQoZSwgbCkKICAgICAgICAgIH0pKSwgcy5zdGFydHMgJiYgdChzLnN0YXJ0cywgbyksIGwubWF0Y2hlciA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgYTsKICAgICAgICAgICAgcmV0dXJuIGUuY29udGFpbnMuZm9yRWFjaChlID0+IG4uYWRkUnVsZShlLmJlZ2luLCB7CiAgICAgICAgICAgICAgcnVsZTogZSwKICAgICAgICAgICAgICB0eXBlOiAiYmVnaW4iCiAgICAgICAgICAgIH0pKSwgZS50ZXJtaW5hdG9yX2VuZCAmJiBuLmFkZFJ1bGUoZS50ZXJtaW5hdG9yX2VuZCwge3R5cGU6ICJlbmQifSksIGUuaWxsZWdhbCAmJiBuLmFkZFJ1bGUoZS5pbGxlZ2FsLCB7dHlwZTogImlsbGVnYWwifSksIG4KICAgICAgICAgIH0obCksIGwKICAgICAgICB9KGUpCiAgICAgIH0oRSksIHcgPSAiIiwgUiA9IHMgfHwgXywgTyA9IHt9LCBNID0gbmV3IGYuX19lbWl0dGVyKGYpOwogICAgICAhZnVuY3Rpb24gKCkgewogICAgICAgIGZvciAodmFyIGUgPSBbXSwgbiA9IFI7IG4gIT09IEU7IG4gPSBuLnBhcmVudCkgbi5jbGFzc05hbWUgJiYgZS51bnNoaWZ0KG4uY2xhc3NOYW1lKTsKICAgICAgICBlLmZvckVhY2goZSA9PiBNLm9wZW5Ob2RlKGUpKQogICAgICB9KCk7CiAgICAgIHZhciBMID0gIiIsIGogPSAwLCBBID0gMCwgUyA9IDAsIEkgPSAhMTsKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKFIubWF0Y2hlci5jb25zaWRlckFsbCgpOyA7KSB7CiAgICAgICAgICBTKyssIEkgPyBJID0gITEgOiAoUi5tYXRjaGVyLmxhc3RJbmRleCA9IEEsIFIubWF0Y2hlci5jb25zaWRlckFsbCgpKTsKICAgICAgICAgIGNvbnN0IGUgPSBSLm1hdGNoZXIuZXhlYyhvKTsKICAgICAgICAgIGlmICghZSAmJiBSLm1hdGNoZXIucmVzdW1pbmdTY2FuQXRTYW1lUG9zaXRpb24oKSkgewogICAgICAgICAgICBMICs9IG9bQV0sIEEgKz0gMTsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KICAgICAgICAgIGlmICghZSkgYnJlYWs7CiAgICAgICAgICBjb25zdCBuID0geChvLnN1YnN0cmluZyhBLCBlLmluZGV4KSwgZSk7CiAgICAgICAgICBBID0gZS5pbmRleCArIG4KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHgoby5zdWJzdHIoQSkpLCBNLmNsb3NlQWxsTm9kZXMoKSwgTS5maW5hbGl6ZSgpLCB3ID0gTS50b0hUTUwoKSwgewogICAgICAgICAgcmVsZXZhbmNlOiBqLAogICAgICAgICAgdmFsdWU6IHcsCiAgICAgICAgICBsYW5ndWFnZTogZSwKICAgICAgICAgIGlsbGVnYWw6ICExLAogICAgICAgICAgZW1pdHRlcjogTSwKICAgICAgICAgIHRvcDogUgogICAgICAgIH0KICAgICAgfSBjYXRjaCAobikgewogICAgICAgIGlmIChuLm1lc3NhZ2UgJiYgbi5tZXNzYWdlLmluY2x1ZGVzKCJJbGxlZ2FsIikpIHJldHVybiB7CiAgICAgICAgICBpbGxlZ2FsOiAhMCwKICAgICAgICAgIGlsbGVnYWxCeToge21zZzogbi5tZXNzYWdlLCBjb250ZXh0OiBvLnNsaWNlKEEgLSAxMDAsIEEgKyAxMDApLCBtb2RlOiBuLm1vZGV9LAogICAgICAgICAgc29mYXI6IHcsCiAgICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgICB2YWx1ZTogayhvKSwKICAgICAgICAgIGVtaXR0ZXI6IE0KICAgICAgICB9OwogICAgICAgIGlmIChsKSByZXR1cm4ge2lsbGVnYWw6ICExLCByZWxldmFuY2U6IDAsIHZhbHVlOiBrKG8pLCBlbWl0dGVyOiBNLCBsYW5ndWFnZTogZSwgdG9wOiBSLCBlcnJvclJhaXNlZDogbn07CiAgICAgICAgdGhyb3cgbgogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdihlLCBuKSB7CiAgICAgIG4gPSBuIHx8IGYubGFuZ3VhZ2VzIHx8IE9iamVjdC5rZXlzKGkpOwogICAgICB2YXIgdCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgY29uc3QgbiA9IHtyZWxldmFuY2U6IDAsIGVtaXR0ZXI6IG5ldyBmLl9fZW1pdHRlcihmKSwgdmFsdWU6IGsoZSksIGlsbGVnYWw6ICExLCB0b3A6IGh9OwogICAgICAgIHJldHVybiBuLmVtaXR0ZXIuYWRkVGV4dChlKSwgbgogICAgICB9KGUpLCByID0gdDsKICAgICAgcmV0dXJuIG4uZmlsdGVyKHkpLmZpbHRlcihBKS5mb3JFYWNoKChmdW5jdGlvbiAobikgewogICAgICAgIHZhciBhID0gYihuLCBlLCAhMSk7CiAgICAgICAgYS5sYW5ndWFnZSA9IG4sIGEucmVsZXZhbmNlID4gci5yZWxldmFuY2UgJiYgKHIgPSBhKSwgYS5yZWxldmFuY2UgPiB0LnJlbGV2YW5jZSAmJiAociA9IHQsIHQgPSBhKQogICAgICB9KSksIHIubGFuZ3VhZ2UgJiYgKHQuc2Vjb25kX2Jlc3QgPSByKSwgdAogICAgfQoKICAgIGZ1bmN0aW9uIHgoZSkgewogICAgICByZXR1cm4gZi50YWJSZXBsYWNlIHx8IGYudXNlQlIgPyBlLnJlcGxhY2UoYywgZSA9PiAiXG4iID09PSBlID8gZi51c2VCUiA/ICI8YnI+IiA6IGUgOiBmLnRhYlJlcGxhY2UgPyBlLnJlcGxhY2UoL1x0L2csIGYudGFiUmVwbGFjZSkgOiBlKSA6IGUKICAgIH0KCiAgICBmdW5jdGlvbiBFKGUpIHsKICAgICAgbGV0IG4gPSBudWxsOwogICAgICBjb25zdCB0ID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgbiA9IGUuY2xhc3NOYW1lICsgIiAiOwogICAgICAgIG4gKz0gZS5wYXJlbnROb2RlID8gZS5wYXJlbnROb2RlLmNsYXNzTmFtZSA6ICIiOwogICAgICAgIGNvbnN0IHQgPSBmLmxhbmd1YWdlRGV0ZWN0UmUuZXhlYyhuKTsKICAgICAgICBpZiAodCkgewogICAgICAgICAgdmFyIHIgPSB5KHRbMV0pOwogICAgICAgICAgcmV0dXJuIHIgfHwgKGNvbnNvbGUud2FybihkLnJlcGxhY2UoInt9IiwgdFsxXSkpLCBjb25zb2xlLndhcm4oIkZhbGxpbmcgYmFjayB0byBuby1oaWdobGlnaHQgbW9kZSBmb3IgdGhpcyBibG9jay4iLCBlKSksIHIgPyB0WzFdIDogIm5vLWhpZ2hsaWdodCIKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG4uc3BsaXQoL1xzKy8pLmZpbmQoZSA9PiBwKGUpIHx8IHkoZSkpCiAgICAgIH0oZSk7CiAgICAgIGlmIChwKHQpKSByZXR1cm47CiAgICAgIFMoImJlZm9yZTpoaWdobGlnaHRCbG9jayIsIHsKICAgICAgICBibG9jazogZSwKICAgICAgICBsYW5ndWFnZTogdAogICAgICB9KSwgZi51c2VCUiA/IChuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikpLmlubmVySFRNTCA9IGUuaW5uZXJIVE1MLnJlcGxhY2UoL1xuL2csICIiKS5yZXBsYWNlKC88YnJbIC9dKj4vZywgIlxuIikgOiBuID0gZTsKICAgICAgY29uc3QgciA9IG4udGV4dENvbnRlbnQsIGEgPSB0ID8gbSh0LCByLCAhMCkgOiB2KHIpLCBpID0gTShuKTsKICAgICAgaWYgKGkubGVuZ3RoKSB7CiAgICAgICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIGUuaW5uZXJIVE1MID0gYS52YWx1ZSwgYS52YWx1ZSA9IEwoaSwgTShlKSwgcikKICAgICAgfQogICAgICBhLnZhbHVlID0geChhLnZhbHVlKSwgUygiYWZ0ZXI6aGlnaGxpZ2h0QmxvY2siLCB7CiAgICAgICAgYmxvY2s6IGUsCiAgICAgICAgcmVzdWx0OiBhCiAgICAgIH0pLCBlLmlubmVySFRNTCA9IGEudmFsdWUsIGUuY2xhc3NOYW1lID0gZnVuY3Rpb24gKGUsIG4sIHQpIHsKICAgICAgICB2YXIgciA9IG4gPyBzW25dIDogdCwgYSA9IFtlLnRyaW0oKV07CiAgICAgICAgcmV0dXJuIGUubWF0Y2goL1xiaGxqc1xiLykgfHwgYS5wdXNoKCJobGpzIiksIGUuaW5jbHVkZXMocikgfHwgYS5wdXNoKHIpLCBhLmpvaW4oIiAiKS50cmltKCkKICAgICAgfShlLmNsYXNzTmFtZSwgdCwgYS5sYW5ndWFnZSksIGUucmVzdWx0ID0gewogICAgICAgIGxhbmd1YWdlOiBhLmxhbmd1YWdlLAogICAgICAgIHJlOiBhLnJlbGV2YW5jZSwKICAgICAgICByZWxhdmFuY2U6IGEucmVsZXZhbmNlCiAgICAgIH0sIGEuc2Vjb25kX2Jlc3QgJiYgKGUuc2Vjb25kX2Jlc3QgPSB7CiAgICAgICAgbGFuZ3VhZ2U6IGEuc2Vjb25kX2Jlc3QubGFuZ3VhZ2UsCiAgICAgICAgcmU6IGEuc2Vjb25kX2Jlc3QucmVsZXZhbmNlLAogICAgICAgIHJlbGF2YW5jZTogYS5zZWNvbmRfYmVzdC5yZWxldmFuY2UKICAgICAgfSkKICAgIH0KCiAgICBjb25zdCB3ID0gKCkgPT4gewogICAgICBpZiAoIXcuY2FsbGVkKSB7CiAgICAgICAgdy5jYWxsZWQgPSAhMDsKICAgICAgICB2YXIgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInByZSBjb2RlIik7CiAgICAgICAgYS5mb3JFYWNoLmNhbGwoZSwgRSkKICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiB5KGUpIHsKICAgICAgcmV0dXJuIGUgPSAoZSB8fCAiIikudG9Mb3dlckNhc2UoKSwgaVtlXSB8fCBpW3NbZV1dCiAgICB9CgogICAgZnVuY3Rpb24gaihlLCB7bGFuZ3VhZ2VOYW1lOiBufSkgewogICAgICAic3RyaW5nIiA9PSB0eXBlb2YgZSAmJiAoZSA9IFtlXSksIGUuZm9yRWFjaChlID0+IHsKICAgICAgICBzW2VdID0gbgogICAgICB9KQogICAgfQoKICAgIGZ1bmN0aW9uIEEoZSkgewogICAgICB2YXIgbiA9IHkoZSk7CiAgICAgIHJldHVybiBuICYmICFuLmRpc2FibGVBdXRvZGV0ZWN0CiAgICB9CgogICAgZnVuY3Rpb24gUyhlLCBuKSB7CiAgICAgIHZhciB0ID0gZTsKICAgICAgby5mb3JFYWNoKChmdW5jdGlvbiAoZSkgewogICAgICAgIGVbdF0gJiYgZVt0XShuKQogICAgICB9KSkKICAgIH0KCiAgICBPYmplY3QuYXNzaWduKHQsIHsKICAgICAgaGlnaGxpZ2h0OiBtLCBoaWdobGlnaHRBdXRvOiB2LCBmaXhNYXJrdXA6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybigiZml4TWFya3VwIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBlbnRpcmVseSBpbiB2MTEuMCIpLCBjb25zb2xlLndhcm4oIlBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2hpZ2hsaWdodGpzL2hpZ2hsaWdodC5qcy9pc3N1ZXMvMjUzNCIpLCB4KGUpCiAgICAgIH0sIGhpZ2hsaWdodEJsb2NrOiBFLCBjb25maWd1cmU6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgZiA9IE8oZiwgZSkKICAgICAgfSwgaW5pdEhpZ2hsaWdodGluZzogdywgaW5pdEhpZ2hsaWdodGluZ09uTG9hZDogZnVuY3Rpb24gKCkgewogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgdywgITEpCiAgICAgIH0sIHJlZ2lzdGVyTGFuZ3VhZ2U6IGZ1bmN0aW9uIChlLCBuKSB7CiAgICAgICAgdmFyIHIgPSBudWxsOwogICAgICAgIHRyeSB7CiAgICAgICAgICByID0gbih0KQogICAgICAgIH0gY2F0Y2ggKG4pIHsKICAgICAgICAgIGlmIChjb25zb2xlLmVycm9yKCJMYW5ndWFnZSBkZWZpbml0aW9uIGZvciAne30nIGNvdWxkIG5vdCBiZSByZWdpc3RlcmVkLiIucmVwbGFjZSgie30iLCBlKSksICFsKSB0aHJvdyBuOwogICAgICAgICAgY29uc29sZS5lcnJvcihuKSwgciA9IGgKICAgICAgICB9CiAgICAgICAgci5uYW1lIHx8IChyLm5hbWUgPSBlKSwgaVtlXSA9IHIsIHIucmF3RGVmaW5pdGlvbiA9IG4uYmluZChudWxsLCB0KSwgci5hbGlhc2VzICYmIGooci5hbGlhc2VzLCB7bGFuZ3VhZ2VOYW1lOiBlfSkKICAgICAgfSwgbGlzdExhbmd1YWdlczogZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhpKQogICAgICB9LCBnZXRMYW5ndWFnZTogeSwgcmVnaXN0ZXJBbGlhc2VzOiBqLCByZXF1aXJlTGFuZ3VhZ2U6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIG4gPSB5KGUpOwogICAgICAgIGlmIChuKSByZXR1cm4gbjsKICAgICAgICB0aHJvdyBFcnJvcigiVGhlICd7fScgbGFuZ3VhZ2UgaXMgcmVxdWlyZWQsIGJ1dCBub3QgbG9hZGVkLiIucmVwbGFjZSgie30iLCBlKSkKICAgICAgfSwgYXV0b0RldGVjdGlvbjogQSwgaW5oZXJpdDogTywgYWRkUGx1Z2luOiBmdW5jdGlvbiAoZSkgewogICAgICAgIG8ucHVzaChlKQogICAgICB9LCB2dWVQbHVnaW46IFIKICAgIH0pLCB0LmRlYnVnTW9kZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgbCA9ICExCiAgICB9LCB0LnNhZmVNb2RlID0gZnVuY3Rpb24gKCkgewogICAgICBsID0gITAKICAgIH0sIHQudmVyc2lvblN0cmluZyA9ICIxMC4yLjAiOwogICAgZm9yIChjb25zdCBuIGluIF8pICJvYmplY3QiID09IHR5cGVvZiBfW25dICYmIGUoX1tuXSk7CiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih0LCBfKSwgdAogIH0oe30pCn0oKTsKIm9iamVjdCIgPT0gdHlwZW9mIGV4cG9ydHMgJiYgInVuZGVmaW5lZCIgIT0gdHlwZW9mIG1vZHVsZSAmJiAobW9kdWxlLmV4cG9ydHMgPSBobGpzKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJweXRob24iLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSB7CiAgICAgICAga2V5d29yZDogImFuZCBlbGlmIGlzIGdsb2JhbCBhcyBpbiBpZiBmcm9tIHJhaXNlIGZvciBleGNlcHQgZmluYWxseSBwcmludCBpbXBvcnQgcGFzcyByZXR1cm4gZXhlYyBlbHNlIGJyZWFrIG5vdCB3aXRoIGNsYXNzIGFzc2VydCB5aWVsZCB0cnkgd2hpbGUgY29udGludWUgZGVsIG9yIGRlZiBsYW1iZGEgYXN5bmMgYXdhaXQgbm9ubG9jYWx8MTAiLAogICAgICAgIGJ1aWx0X2luOiAiRWxsaXBzaXMgTm90SW1wbGVtZW50ZWQiLAogICAgICAgIGxpdGVyYWw6ICJGYWxzZSBOb25lIFRydWUiCiAgICAgIH0sIGEgPSB7Y2xhc3NOYW1lOiAibWV0YSIsIGJlZ2luOiAvXig+Pj58XC5cLlwuKSAvfSwKICAgICAgaSA9IHtjbGFzc05hbWU6ICJzdWJzdCIsIGJlZ2luOiAvXHsvLCBlbmQ6IC9cfS8sIGtleXdvcmRzOiBuLCBpbGxlZ2FsOiAvIy99LAogICAgICBzID0ge2JlZ2luOiAvXHtcey8sIHJlbGV2YW5jZTogMH0sIHIgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRV0sCiAgICAgICAgdmFyaWFudHM6IFt7CiAgICAgICAgICBiZWdpbjogLyh1fGIpP3I/JycnLywKICAgICAgICAgIGVuZDogLycnJy8sCiAgICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgYV0sCiAgICAgICAgICByZWxldmFuY2U6IDEwCiAgICAgICAgfSwgewogICAgICAgICAgYmVnaW46IC8odXxiKT9yPyIiIi8sCiAgICAgICAgICBlbmQ6IC8iIiIvLAogICAgICAgICAgY29udGFpbnM6IFtlLkJBQ0tTTEFTSF9FU0NBUEUsIGFdLAogICAgICAgICAgcmVsZXZhbmNlOiAxMAogICAgICAgIH0sIHtiZWdpbjogLyhmcnxyZnxmKScnJy8sIGVuZDogLycnJy8sIGNvbnRhaW5zOiBbZS5CQUNLU0xBU0hfRVNDQVBFLCBhLCBzLCBpXX0sIHsKICAgICAgICAgIGJlZ2luOiAvKGZyfHJmfGYpIiIiLywKICAgICAgICAgIGVuZDogLyIiIi8sCiAgICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgYSwgcywgaV0KICAgICAgICB9LCB7YmVnaW46IC8odXxyfHVyKScvLCBlbmQ6IC8nLywgcmVsZXZhbmNlOiAxMH0sIHsKICAgICAgICAgIGJlZ2luOiAvKHV8cnx1cikiLywKICAgICAgICAgIGVuZDogLyIvLAogICAgICAgICAgcmVsZXZhbmNlOiAxMAogICAgICAgIH0sIHtiZWdpbjogLyhifGJyKScvLCBlbmQ6IC8nL30sIHtiZWdpbjogLyhifGJyKSIvLCBlbmQ6IC8iL30sIHsKICAgICAgICAgIGJlZ2luOiAvKGZyfHJmfGYpJy8sCiAgICAgICAgICBlbmQ6IC8nLywKICAgICAgICAgIGNvbnRhaW5zOiBbZS5CQUNLU0xBU0hfRVNDQVBFLCBzLCBpXQogICAgICAgIH0sIHsKICAgICAgICAgIGJlZ2luOiAvKGZyfHJmfGYpIi8sCiAgICAgICAgICBlbmQ6IC8iLywKICAgICAgICAgIGNvbnRhaW5zOiBbZS5CQUNLU0xBU0hfRVNDQVBFLCBzLCBpXQogICAgICAgIH0sIGUuQVBPU19TVFJJTkdfTU9ERSwgZS5RVU9URV9TVFJJTkdfTU9ERV0KICAgICAgfSwgbCA9IHsKICAgICAgICBjbGFzc05hbWU6ICJudW1iZXIiLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogZS5CSU5BUllfTlVNQkVSX1JFICsgIltsTGpKXT8ifSwge2JlZ2luOiAiXFxiKDBvWzAtN10rKVtsTGpKXT8ifSwge2JlZ2luOiBlLkNfTlVNQkVSX1JFICsgIltsTGpKXT8ifV0KICAgICAgfSwgdCA9IHsKICAgICAgICBjbGFzc05hbWU6ICJwYXJhbXMiLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvXChccypcKS8sIHNraXA6ICEwLCBjbGFzc05hbWU6IG51bGx9LCB7CiAgICAgICAgICBiZWdpbjogL1woLywKICAgICAgICAgIGVuZDogL1wpLywKICAgICAgICAgIGV4Y2x1ZGVCZWdpbjogITAsCiAgICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICAgIGNvbnRhaW5zOiBbInNlbGYiLCBhLCBsLCByLCBlLkhBU0hfQ09NTUVOVF9NT0RFXQogICAgICAgIH1dCiAgICAgIH07CiAgICByZXR1cm4gaS5jb250YWlucyA9IFtyLCBsLCBhXSwgewogICAgICBuYW1lOiAiUHl0aG9uIiwKICAgICAgYWxpYXNlczogWyJweSIsICJneXAiLCAiaXB5dGhvbiJdLAogICAgICBrZXl3b3JkczogbiwKICAgICAgaWxsZWdhbDogLyg8XC98LT58XD8pfD0+LywKICAgICAgY29udGFpbnM6IFthLCBsLCB7CiAgICAgICAgYmVnaW5LZXl3b3JkczogImlmIiwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfSwgciwgZS5IQVNIX0NPTU1FTlRfTU9ERSwgewogICAgICAgIHZhcmlhbnRzOiBbe2NsYXNzTmFtZTogImZ1bmN0aW9uIiwgYmVnaW5LZXl3b3JkczogImRlZiJ9LCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJjbGFzcyIsCiAgICAgICAgICBiZWdpbktleXdvcmRzOiAiY2xhc3MiCiAgICAgICAgfV0sCiAgICAgICAgZW5kOiAvOi8sCiAgICAgICAgaWxsZWdhbDogL1skez07XG4sXS8sCiAgICAgICAgY29udGFpbnM6IFtlLlVOREVSU0NPUkVfVElUTEVfTU9ERSwgdCwge2JlZ2luOiAvLT4vLCBlbmRzV2l0aFBhcmVudDogITAsIGtleXdvcmRzOiAiTm9uZSJ9XQogICAgICB9LCB7Y2xhc3NOYW1lOiAibWV0YSIsIGJlZ2luOiAvXltcdCBdKkAvLCBlbmQ6IC8kL30sIHtiZWdpbjogL1xiKHByaW50fGV4ZWMpXCgvfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgicHl0aG9uLXJlcGwiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAobikgewogICAgcmV0dXJuIHsKICAgICAgYWxpYXNlczogWyJweWNvbiJdLAogICAgICBjb250YWluczogW3sKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICBzdGFydHM6IHtlbmQ6IC8gfCQvLCBzdGFydHM6IHtlbmQ6ICIkIiwgc3ViTGFuZ3VhZ2U6ICJweXRob24ifX0sCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46IC9ePj4+KD89WyBdfCQpL30sIHtiZWdpbjogL15cLlwuXC4oPz1bIF18JCkvfV0KICAgICAgfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgicHJvdG9idWYiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIlByb3RvY29sIEJ1ZmZlcnMiLAogICAgICBrZXl3b3JkczogewogICAgICAgIGtleXdvcmQ6ICJwYWNrYWdlIGltcG9ydCBvcHRpb24gb3B0aW9uYWwgcmVxdWlyZWQgcmVwZWF0ZWQgZ3JvdXAgb25lb2YiLAogICAgICAgIGJ1aWx0X2luOiAiZG91YmxlIGZsb2F0IGludDMyIGludDY0IHVpbnQzMiB1aW50NjQgc2ludDMyIHNpbnQ2NCBmaXhlZDMyIGZpeGVkNjQgc2ZpeGVkMzIgc2ZpeGVkNjQgYm9vbCBzdHJpbmcgYnl0ZXMiLAogICAgICAgIGxpdGVyYWw6ICJ0cnVlIGZhbHNlIgogICAgICB9LAogICAgICBjb250YWluczogW2UuUVVPVEVfU1RSSU5HX01PREUsIGUuTlVNQkVSX01PREUsIGUuQ19MSU5FX0NPTU1FTlRfTU9ERSwgZS5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgewogICAgICAgIGNsYXNzTmFtZTogImNsYXNzIiwKICAgICAgICBiZWdpbktleXdvcmRzOiAibWVzc2FnZSBlbnVtIHNlcnZpY2UiLAogICAgICAgIGVuZDogL1x7LywKICAgICAgICBpbGxlZ2FsOiAvXG4vLAogICAgICAgIGNvbnRhaW5zOiBbZS5pbmhlcml0KGUuVElUTEVfTU9ERSwge3N0YXJ0czoge2VuZHNXaXRoUGFyZW50OiAhMCwgZXhjbHVkZUVuZDogITB9fSldCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJmdW5jdGlvbiIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogInJwYyIsCiAgICAgICAgZW5kOiAvW3s7XS8sCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAga2V5d29yZHM6ICJycGMgcmV0dXJucyIKICAgICAgfSwge2JlZ2luOiAvXlxzKltBLVpfXSsvLCBlbmQ6IC9ccyo9LywgZXhjbHVkZUVuZDogITB9XQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJjLWxpa2UiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgZnVuY3Rpb24gdChlKSB7CiAgICAgIHJldHVybiAiKD86IiArIGUgKyAiKT8iCiAgICB9CgogICAgdmFyIG4gPSAiKGRlY2x0eXBlXFwoYXV0b1xcKXwiICsgdCgiW2EtekEtWl9dXFx3Kjo6IikgKyAiW2EtekEtWl9dXFx3KiIgKyB0KCI8Lio/PiIpICsgIikiLAogICAgICByID0ge2NsYXNzTmFtZTogImtleXdvcmQiLCBiZWdpbjogIlxcYlthLXpcXGRfXSpfdFxcYiJ9LCBhID0gewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgdmFyaWFudHM6IFt7CiAgICAgICAgICBiZWdpbjogJyh1OD98VXxMKT8iJywKICAgICAgICAgIGVuZDogJyInLAogICAgICAgICAgaWxsZWdhbDogIlxcbiIsCiAgICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRV0KICAgICAgICB9LCB7CiAgICAgICAgICBiZWdpbjogIih1OD98VXxMKT8nKFxcXFwoeFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0LDh9fFswLTddezN9fFxcUyl8LikiLAogICAgICAgICAgZW5kOiAiJyIsCiAgICAgICAgICBpbGxlZ2FsOiAiLiIKICAgICAgICB9LCBlLkVORF9TQU1FX0FTX0JFR0lOKHtiZWdpbjogLyg/OnU4P3xVfEwpP1IiKFteKClcXCBdezAsMTZ9KVwoLywgZW5kOiAvXCkoW14oKVxcIF17MCwxNn0pIi99KV0KICAgICAgfSwgaSA9IHsKICAgICAgICBjbGFzc05hbWU6ICJudW1iZXIiLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAiXFxiKDBiWzAxJ10rKSJ9LCB7YmVnaW46ICIoLT8pXFxiKFtcXGQnXSsoXFwuW1xcZCddKik/fFxcLltcXGQnXSspKHV8VXxsfEx8dWx8VUx8ZnxGfGJ8QikifSwge2JlZ2luOiAiKC0/KShcXGIwW3hYXVthLWZBLUYwLTknXSt8KFxcYltcXGQnXSsoXFwuW1xcZCddKik/fFxcLltcXGQnXSspKFtlRV1bLStdP1tcXGQnXSspPykifV0sCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIHMgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAibWV0YSIsCiAgICAgICAgYmVnaW46IC8jXHMqW2Etel0rXGIvLAogICAgICAgIGVuZDogLyQvLAogICAgICAgIGtleXdvcmRzOiB7Im1ldGEta2V5d29yZCI6ICJpZiBlbHNlIGVsaWYgZW5kaWYgZGVmaW5lIHVuZGVmIHdhcm5pbmcgZXJyb3IgbGluZSBwcmFnbWEgX1ByYWdtYSBpZmRlZiBpZm5kZWYgaW5jbHVkZSJ9LAogICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgYmVnaW46IC9cXFxuLywKICAgICAgICAgIHJlbGV2YW5jZTogMAogICAgICAgIH0sIGUuaW5oZXJpdChhLCB7Y2xhc3NOYW1lOiAibWV0YS1zdHJpbmcifSksIHsKICAgICAgICAgIGNsYXNzTmFtZTogIm1ldGEtc3RyaW5nIiwKICAgICAgICAgIGJlZ2luOiAvPC4qPz4vLAogICAgICAgICAgZW5kOiAvJC8sCiAgICAgICAgICBpbGxlZ2FsOiAiXFxuIgogICAgICAgIH0sIGUuQ19MSU5FX0NPTU1FTlRfTU9ERSwgZS5DX0JMT0NLX0NPTU1FTlRfTU9ERV0KICAgICAgfSwgbyA9IHtjbGFzc05hbWU6ICJ0aXRsZSIsIGJlZ2luOiB0KCJbYS16QS1aX11cXHcqOjoiKSArIGUuSURFTlRfUkUsIHJlbGV2YW5jZTogMH0sCiAgICAgIGMgPSB0KCJbYS16QS1aX11cXHcqOjoiKSArIGUuSURFTlRfUkUgKyAiXFxzKlxcKCIsIGwgPSB7CiAgICAgICAga2V5d29yZDogImludCBmbG9hdCB3aGlsZSBwcml2YXRlIGNoYXIgY2hhcjhfdCBjaGFyMTZfdCBjaGFyMzJfdCBjYXRjaCBpbXBvcnQgbW9kdWxlIGV4cG9ydCB2aXJ0dWFsIG9wZXJhdG9yIHNpemVvZiBkeW5hbWljX2Nhc3R8MTAgdHlwZWRlZiBjb25zdF9jYXN0fDEwIGNvbnN0IGZvciBzdGF0aWNfY2FzdHwxMCB1bmlvbiBuYW1lc3BhY2UgdW5zaWduZWQgbG9uZyB2b2xhdGlsZSBzdGF0aWMgcHJvdGVjdGVkIGJvb2wgdGVtcGxhdGUgbXV0YWJsZSBpZiBwdWJsaWMgZnJpZW5kIGRvIGdvdG8gYXV0byB2b2lkIGVudW0gZWxzZSBicmVhayBleHRlcm4gdXNpbmcgYXNtIGNhc2UgdHlwZWlkIHdjaGFyX3Qgc2hvcnQgcmVpbnRlcnByZXRfY2FzdHwxMCBkZWZhdWx0IGRvdWJsZSByZWdpc3RlciBleHBsaWNpdCBzaWduZWQgdHlwZW5hbWUgdHJ5IHRoaXMgc3dpdGNoIGNvbnRpbnVlIGlubGluZSBkZWxldGUgYWxpZ25hcyBhbGlnbm9mIGNvbnN0ZXhwciBjb25zdGV2YWwgY29uc3Rpbml0IGRlY2x0eXBlIGNvbmNlcHQgY29fYXdhaXQgY29fcmV0dXJuIGNvX3lpZWxkIHJlcXVpcmVzIG5vZXhjZXB0IHN0YXRpY19hc3NlcnQgdGhyZWFkX2xvY2FsIHJlc3RyaWN0IGZpbmFsIG92ZXJyaWRlIGF0b21pY19ib29sIGF0b21pY19jaGFyIGF0b21pY19zY2hhciBhdG9taWNfdWNoYXIgYXRvbWljX3Nob3J0IGF0b21pY191c2hvcnQgYXRvbWljX2ludCBhdG9taWNfdWludCBhdG9taWNfbG9uZyBhdG9taWNfdWxvbmcgYXRvbWljX2xsb25nIGF0b21pY191bGxvbmcgbmV3IHRocm93IHJldHVybiBhbmQgYW5kX2VxIGJpdGFuZCBiaXRvciBjb21wbCBub3Qgbm90X2VxIG9yIG9yX2VxIHhvciB4b3JfZXEiLAogICAgICAgIGJ1aWx0X2luOiAic3RkIHN0cmluZyB3c3RyaW5nIGNpbiBjb3V0IGNlcnIgY2xvZyBzdGRpbiBzdGRvdXQgc3RkZXJyIHN0cmluZ3N0cmVhbSBpc3RyaW5nc3RyZWFtIG9zdHJpbmdzdHJlYW0gYXV0b19wdHIgZGVxdWUgbGlzdCBxdWV1ZSBzdGFjayB2ZWN0b3IgbWFwIHNldCBwYWlyIGJpdHNldCBtdWx0aXNldCBtdWx0aW1hcCB1bm9yZGVyZWRfc2V0IHVub3JkZXJlZF9tYXAgdW5vcmRlcmVkX211bHRpc2V0IHVub3JkZXJlZF9tdWx0aW1hcCBwcmlvcml0eV9xdWV1ZSBtYWtlX3BhaXIgYXJyYXkgc2hhcmVkX3B0ciBhYm9ydCB0ZXJtaW5hdGUgYWJzIGFjb3MgYXNpbiBhdGFuMiBhdGFuIGNhbGxvYyBjZWlsIGNvc2ggY29zIGV4aXQgZXhwIGZhYnMgZmxvb3IgZm1vZCBmcHJpbnRmIGZwdXRzIGZyZWUgZnJleHAgZnNjYW5mIGZ1dHVyZSBpc2FsbnVtIGlzYWxwaGEgaXNjbnRybCBpc2RpZ2l0IGlzZ3JhcGggaXNsb3dlciBpc3ByaW50IGlzcHVuY3QgaXNzcGFjZSBpc3VwcGVyIGlzeGRpZ2l0IHRvbG93ZXIgdG91cHBlciBsYWJzIGxkZXhwIGxvZzEwIGxvZyBtYWxsb2MgcmVhbGxvYyBtZW1jaHIgbWVtY21wIG1lbWNweSBtZW1zZXQgbW9kZiBwb3cgcHJpbnRmIHB1dGNoYXIgcHV0cyBzY2FuZiBzaW5oIHNpbiBzbnByaW50ZiBzcHJpbnRmIHNxcnQgc3NjYW5mIHN0cmNhdCBzdHJjaHIgc3RyY21wIHN0cmNweSBzdHJjc3BuIHN0cmxlbiBzdHJuY2F0IHN0cm5jbXAgc3RybmNweSBzdHJwYnJrIHN0cnJjaHIgc3Ryc3BuIHN0cnN0ciB0YW5oIHRhbiB2ZnByaW50ZiB2cHJpbnRmIHZzcHJpbnRmIGVuZGwgaW5pdGlhbGl6ZXJfbGlzdCB1bmlxdWVfcHRyIF9Cb29sIGNvbXBsZXggX0NvbXBsZXggaW1hZ2luYXJ5IF9JbWFnaW5hcnkiLAogICAgICAgIGxpdGVyYWw6ICJ0cnVlIGZhbHNlIG51bGxwdHIgTlVMTCIKICAgICAgfSwgZCA9IFtyLCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREUsIGksIGFdLCBfID0gewogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvPS8sIGVuZDogLzsvfSwge2JlZ2luOiAvXCgvLCBlbmQ6IC9cKS99LCB7CiAgICAgICAgICBiZWdpbktleXdvcmRzOiAibmV3IHRocm93IHJldHVybiBlbHNlIiwKICAgICAgICAgIGVuZDogLzsvCiAgICAgICAgfV0sCiAgICAgICAga2V5d29yZHM6IGwsCiAgICAgICAgY29udGFpbnM6IGQuY29uY2F0KFt7YmVnaW46IC9cKC8sIGVuZDogL1wpLywga2V5d29yZHM6IGwsIGNvbnRhaW5zOiBkLmNvbmNhdChbInNlbGYiXSksIHJlbGV2YW5jZTogMH1dKSwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfSwgdSA9IHsKICAgICAgICBjbGFzc05hbWU6ICJmdW5jdGlvbiIsCiAgICAgICAgYmVnaW46ICIoIiArIG4gKyAiW1xcKiZcXHNdKykrIiArIGMsCiAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgIGVuZDogL1t7Oz1dLywKICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICBrZXl3b3JkczogbCwKICAgICAgICBpbGxlZ2FsOiAvW15cd1xzXComOjw+XS8sCiAgICAgICAgY29udGFpbnM6IFt7YmVnaW46ICJkZWNsdHlwZVxcKGF1dG9cXCkiLCBrZXl3b3JkczogbCwgcmVsZXZhbmNlOiAwfSwgewogICAgICAgICAgYmVnaW46IGMsCiAgICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgICBjb250YWluczogW29dLAogICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgfSwgewogICAgICAgICAgY2xhc3NOYW1lOiAicGFyYW1zIiwKICAgICAgICAgIGJlZ2luOiAvXCgvLAogICAgICAgICAgZW5kOiAvXCkvLAogICAgICAgICAga2V5d29yZHM6IGwsCiAgICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgICBjb250YWluczogW2UuQ19MSU5FX0NPTU1FTlRfTU9ERSwgZS5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgYSwgaSwgciwgewogICAgICAgICAgICBiZWdpbjogL1woLywKICAgICAgICAgICAgZW5kOiAvXCkvLAogICAgICAgICAgICBrZXl3b3JkczogbCwKICAgICAgICAgICAgcmVsZXZhbmNlOiAwLAogICAgICAgICAgICBjb250YWluczogWyJzZWxmIiwgZS5DX0xJTkVfQ09NTUVOVF9NT0RFLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCBhLCBpLCByXQogICAgICAgICAgfV0KICAgICAgICB9LCByLCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREUsIHNdCiAgICAgIH07CiAgICByZXR1cm4gewogICAgICBhbGlhc2VzOiBbImMiLCAiY2MiLCAiaCIsICJjKysiLCAiaCsrIiwgImhwcCIsICJoaCIsICJoeHgiLCAiY3h4Il0sCiAgICAgIGtleXdvcmRzOiBsLAogICAgICBkaXNhYmxlQXV0b2RldGVjdDogITAsCiAgICAgIGlsbGVnYWw6ICI8LyIsCiAgICAgIGNvbnRhaW5zOiBbXS5jb25jYXQoXywgdSwgZCwgW3MsIHsKICAgICAgICBiZWdpbjogIlxcYihkZXF1ZXxsaXN0fHF1ZXVlfHByaW9yaXR5X3F1ZXVlfHBhaXJ8c3RhY2t8dmVjdG9yfG1hcHxzZXR8Yml0c2V0fG11bHRpc2V0fG11bHRpbWFwfHVub3JkZXJlZF9tYXB8dW5vcmRlcmVkX3NldHx1bm9yZGVyZWRfbXVsdGlzZXR8dW5vcmRlcmVkX211bHRpbWFwfGFycmF5KVxccyo8IiwKICAgICAgICBlbmQ6ICI+IiwKICAgICAgICBrZXl3b3JkczogbCwKICAgICAgICBjb250YWluczogWyJzZWxmIiwgcl0KICAgICAgfSwge2JlZ2luOiBlLklERU5UX1JFICsgIjo6Iiwga2V5d29yZHM6IGx9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiY2xhc3MiLAogICAgICAgIGJlZ2luS2V5d29yZHM6ICJjbGFzcyBzdHJ1Y3QiLAogICAgICAgIGVuZDogL1t7OzpdLywKICAgICAgICBjb250YWluczogW3tiZWdpbjogLzwvLCBlbmQ6IC8+LywgY29udGFpbnM6IFsic2VsZiJdfSwgZS5USVRMRV9NT0RFXQogICAgICB9XSksCiAgICAgIGV4cG9ydHM6IHtwcmVwcm9jZXNzb3I6IHMsIHN0cmluZ3M6IGEsIGtleXdvcmRzOiBsfQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJwZ3NxbCIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChFKSB7CiAgICB2YXIgVCA9IEUuQ09NTUVOVCgiLS0iLCAiJCIpLCBOID0gIlxcJChbYS16QS1aX10/fFthLXpBLVpfXVthLXpBLVpfMC05XSopXFwkIiwKICAgICAgQSA9ICJCSUdJTlQgSU5UOCBCSUdTRVJJQUwgU0VSSUFMOCBCSVQgVkFSWUlORyBWQVJCSVQgQk9PTEVBTiBCT09MIEJPWCBCWVRFQSBDSEFSQUNURVIgQ0hBUiBWQVJDSEFSIENJRFIgQ0lSQ0xFIERBVEUgRE9VQkxFIFBSRUNJU0lPTiBGTE9BVDggRkxPQVQgSU5FVCBJTlRFR0VSIElOVCBJTlQ0IElOVEVSVkFMIEpTT04gSlNPTkIgTElORSBMU0VHfDEwIE1BQ0FERFIgTUFDQUREUjggTU9ORVkgTlVNRVJJQyBERUMgREVDSU1BTCBQQVRIIFBPSU5UIFBPTFlHT04gUkVBTCBGTE9BVDQgU01BTExJTlQgSU5UMiBTTUFMTFNFUklBTHwxMCBTRVJJQUwyfDEwIFNFUklBTHwxMCBTRVJJQUw0fDEwIFRFWFQgVElNRSBaT05FIFRJTUVUWnwxMCBUSU1FU1RBTVAgVElNRVNUQU1QVFp8MTAgVFNRVUVSWXwxMCBUU1ZFQ1RPUnwxMCBUWElEX1NOQVBTSE9UfDEwIFVVSUQgWE1MIE5BVElPTkFMIE5DSEFSIElOVDRSQU5HRXwxMCBJTlQ4UkFOR0V8MTAgTlVNUkFOR0V8MTAgVFNSQU5HRXwxMCBUU1RaUkFOR0V8MTAgREFURVJBTkdFfDEwIEFOWUVMRU1FTlQgQU5ZQVJSQVkgQU5ZTk9OQVJSQVkgQU5ZRU5VTSBBTllSQU5HRSBDU1RSSU5HIElOVEVSTkFMIFJFQ09SRCBQR19ERExfQ09NTUFORCBWT0lEIFVOS05PV04gT1BBUVVFIFJFRkNVUlNPUiBOQU1FIE9JRCBSRUdQUk9DfDEwIFJFR1BST0NFRFVSRXwxMCBSRUdPUEVSfDEwIFJFR09QRVJBVE9SfDEwIFJFR0NMQVNTfDEwIFJFR1RZUEV8MTAgUkVHUk9MRXwxMCBSRUdOQU1FU1BBQ0V8MTAgUkVHQ09ORklHfDEwIFJFR0RJQ1RJT05BUll8MTAgIiwKICAgICAgUiA9IEEudHJpbSgpLnNwbGl0KCIgIikubWFwKChmdW5jdGlvbiAoRSkgewogICAgICAgIHJldHVybiBFLnNwbGl0KCJ8IilbMF0KICAgICAgfSkpLmpvaW4oInwiKSwKICAgICAgSSA9ICJBUlJBWV9BR0cgQVZHIEJJVF9BTkQgQklUX09SIEJPT0xfQU5EIEJPT0xfT1IgQ09VTlQgRVZFUlkgSlNPTl9BR0cgSlNPTkJfQUdHIEpTT05fT0JKRUNUX0FHRyBKU09OQl9PQkpFQ1RfQUdHIE1BWCBNSU4gTU9ERSBTVFJJTkdfQUdHIFNVTSBYTUxBR0cgQ09SUiBDT1ZBUl9QT1AgQ09WQVJfU0FNUCBSRUdSX0FWR1ggUkVHUl9BVkdZIFJFR1JfQ09VTlQgUkVHUl9JTlRFUkNFUFQgUkVHUl9SMiBSRUdSX1NMT1BFIFJFR1JfU1hYIFJFR1JfU1hZIFJFR1JfU1lZIFNURERFViBTVERERVZfUE9QIFNURERFVl9TQU1QIFZBUklBTkNFIFZBUl9QT1AgVkFSX1NBTVAgUEVSQ0VOVElMRV9DT05UIFBFUkNFTlRJTEVfRElTQyBST1dfTlVNQkVSIFJBTksgREVOU0VfUkFOSyBQRVJDRU5UX1JBTksgQ1VNRV9ESVNUIE5USUxFIExBRyBMRUFEIEZJUlNUX1ZBTFVFIExBU1RfVkFMVUUgTlRIX1ZBTFVFIE5VTV9OT05OVUxMUyBOVU1fTlVMTFMgQUJTIENCUlQgQ0VJTCBDRUlMSU5HIERFR1JFRVMgRElWIEVYUCBGTE9PUiBMTiBMT0cgTU9EIFBJIFBPV0VSIFJBRElBTlMgUk9VTkQgU0NBTEUgU0lHTiBTUVJUIFRSVU5DIFdJRFRIX0JVQ0tFVCBSQU5ET00gU0VUU0VFRCBBQ09TIEFDT1NEIEFTSU4gQVNJTkQgQVRBTiBBVEFORCBBVEFOMiBBVEFOMkQgQ09TIENPU0QgQ09UIENPVEQgU0lOIFNJTkQgVEFOIFRBTkQgQklUX0xFTkdUSCBDSEFSX0xFTkdUSCBDSEFSQUNURVJfTEVOR1RIIExPV0VSIE9DVEVUX0xFTkdUSCBPVkVSTEFZIFBPU0lUSU9OIFNVQlNUUklORyBUUkVBVCBUUklNIFVQUEVSIEFTQ0lJIEJUUklNIENIUiBDT05DQVQgQ09OQ0FUX1dTIENPTlZFUlQgQ09OVkVSVF9GUk9NIENPTlZFUlRfVE8gREVDT0RFIEVOQ09ERSBJTklUQ0FQIExFRlQgTEVOR1RIIExQQUQgTFRSSU0gTUQ1IFBBUlNFX0lERU5UIFBHX0NMSUVOVF9FTkNPRElORyBRVU9URV9JREVOVHwxMCBRVU9URV9MSVRFUkFMfDEwIFFVT1RFX05VTExBQkxFfDEwIFJFR0VYUF9NQVRDSCBSRUdFWFBfTUFUQ0hFUyBSRUdFWFBfUkVQTEFDRSBSRUdFWFBfU1BMSVRfVE9fQVJSQVkgUkVHRVhQX1NQTElUX1RPX1RBQkxFIFJFUEVBVCBSRVBMQUNFIFJFVkVSU0UgUklHSFQgUlBBRCBSVFJJTSBTUExJVF9QQVJUIFNUUlBPUyBTVUJTVFIgVE9fQVNDSUkgVE9fSEVYIFRSQU5TTEFURSBPQ1RFVF9MRU5HVEggR0VUX0JJVCBHRVRfQllURSBTRVRfQklUIFNFVF9CWVRFIFRPX0NIQVIgVE9fREFURSBUT19OVU1CRVIgVE9fVElNRVNUQU1QIEFHRSBDTE9DS19USU1FU1RBTVB8MTAgREFURV9QQVJUIERBVEVfVFJVTkMgSVNGSU5JVEUgSlVTVElGWV9EQVlTIEpVU1RJRllfSE9VUlMgSlVTVElGWV9JTlRFUlZBTCBNQUtFX0RBVEUgTUFLRV9JTlRFUlZBTHwxMCBNQUtFX1RJTUUgTUFLRV9USU1FU1RBTVB8MTAgTUFLRV9USU1FU1RBTVBUWnwxMCBOT1cgU1RBVEVNRU5UX1RJTUVTVEFNUHwxMCBUSU1FT0ZEQVkgVFJBTlNBQ1RJT05fVElNRVNUQU1QfDEwIEVOVU1fRklSU1QgRU5VTV9MQVNUIEVOVU1fUkFOR0UgQVJFQSBDRU5URVIgRElBTUVURVIgSEVJR0hUIElTQ0xPU0VEIElTT1BFTiBOUE9JTlRTIFBDTE9TRSBQT1BFTiBSQURJVVMgV0lEVEggQk9YIEJPVU5EX0JPWCBDSVJDTEUgTElORSBMU0VHIFBBVEggUE9MWUdPTiBBQkJSRVYgQlJPQURDQVNUIEhPU1QgSE9TVE1BU0sgTUFTS0xFTiBORVRNQVNLIE5FVFdPUksgU0VUX01BU0tMRU4gVEVYVCBJTkVUX1NBTUVfRkFNSUxZIElORVRfTUVSR0UgTUFDQUREUjhfU0VUN0JJVCBBUlJBWV9UT19UU1ZFQ1RPUiBHRVRfQ1VSUkVOVF9UU19DT05GSUcgTlVNTk9ERSBQTEFJTlRPX1RTUVVFUlkgUEhSQVNFVE9fVFNRVUVSWSBXRUJTRUFSQ0hfVE9fVFNRVUVSWSBRVUVSWVRSRUUgU0VUV0VJR0hUIFNUUklQIFRPX1RTUVVFUlkgVE9fVFNWRUNUT1IgSlNPTl9UT19UU1ZFQ1RPUiBKU09OQl9UT19UU1ZFQ1RPUiBUU19ERUxFVEUgVFNfRklMVEVSIFRTX0hFQURMSU5FIFRTX1JBTksgVFNfUkFOS19DRCBUU19SRVdSSVRFIFRTUVVFUllfUEhSQVNFIFRTVkVDVE9SX1RPX0FSUkFZIFRTVkVDVE9SX1VQREFURV9UUklHR0VSIFRTVkVDVE9SX1VQREFURV9UUklHR0VSX0NPTFVNTiBYTUxDT01NRU5UIFhNTENPTkNBVCBYTUxFTEVNRU5UIFhNTEZPUkVTVCBYTUxQSSBYTUxST09UIFhNTEVYSVNUUyBYTUxfSVNfV0VMTF9GT1JNRUQgWE1MX0lTX1dFTExfRk9STUVEX0RPQ1VNRU5UIFhNTF9JU19XRUxMX0ZPUk1FRF9DT05URU5UIFhQQVRIIFhQQVRIX0VYSVNUUyBYTUxUQUJMRSBYTUxOQU1FU1BBQ0VTIFRBQkxFX1RPX1hNTCBUQUJMRV9UT19YTUxTQ0hFTUEgVEFCTEVfVE9fWE1MX0FORF9YTUxTQ0hFTUEgUVVFUllfVE9fWE1MIFFVRVJZX1RPX1hNTFNDSEVNQSBRVUVSWV9UT19YTUxfQU5EX1hNTFNDSEVNQSBDVVJTT1JfVE9fWE1MIENVUlNPUl9UT19YTUxTQ0hFTUEgU0NIRU1BX1RPX1hNTCBTQ0hFTUFfVE9fWE1MU0NIRU1BIFNDSEVNQV9UT19YTUxfQU5EX1hNTFNDSEVNQSBEQVRBQkFTRV9UT19YTUwgREFUQUJBU0VfVE9fWE1MU0NIRU1BIERBVEFCQVNFX1RPX1hNTF9BTkRfWE1MU0NIRU1BIFhNTEFUVFJJQlVURVMgVE9fSlNPTiBUT19KU09OQiBBUlJBWV9UT19KU09OIFJPV19UT19KU09OIEpTT05fQlVJTERfQVJSQVkgSlNPTkJfQlVJTERfQVJSQVkgSlNPTl9CVUlMRF9PQkpFQ1QgSlNPTkJfQlVJTERfT0JKRUNUIEpTT05fT0JKRUNUIEpTT05CX09CSkVDVCBKU09OX0FSUkFZX0xFTkdUSCBKU09OQl9BUlJBWV9MRU5HVEggSlNPTl9FQUNIIEpTT05CX0VBQ0ggSlNPTl9FQUNIX1RFWFQgSlNPTkJfRUFDSF9URVhUIEpTT05fRVhUUkFDVF9QQVRIIEpTT05CX0VYVFJBQ1RfUEFUSCBKU09OX09CSkVDVF9LRVlTIEpTT05CX09CSkVDVF9LRVlTIEpTT05fUE9QVUxBVEVfUkVDT1JEIEpTT05CX1BPUFVMQVRFX1JFQ09SRCBKU09OX1BPUFVMQVRFX1JFQ09SRFNFVCBKU09OQl9QT1BVTEFURV9SRUNPUkRTRVQgSlNPTl9BUlJBWV9FTEVNRU5UUyBKU09OQl9BUlJBWV9FTEVNRU5UUyBKU09OX0FSUkFZX0VMRU1FTlRTX1RFWFQgSlNPTkJfQVJSQVlfRUxFTUVOVFNfVEVYVCBKU09OX1RZUEVPRiBKU09OQl9UWVBFT0YgSlNPTl9UT19SRUNPUkQgSlNPTkJfVE9fUkVDT1JEIEpTT05fVE9fUkVDT1JEU0VUIEpTT05CX1RPX1JFQ09SRFNFVCBKU09OX1NUUklQX05VTExTIEpTT05CX1NUUklQX05VTExTIEpTT05CX1NFVCBKU09OQl9JTlNFUlQgSlNPTkJfUFJFVFRZIENVUlJWQUwgTEFTVFZBTCBORVhUVkFMIFNFVFZBTCBDT0FMRVNDRSBOVUxMSUYgR1JFQVRFU1QgTEVBU1QgQVJSQVlfQVBQRU5EIEFSUkFZX0NBVCBBUlJBWV9ORElNUyBBUlJBWV9ESU1TIEFSUkFZX0ZJTEwgQVJSQVlfTEVOR1RIIEFSUkFZX0xPV0VSIEFSUkFZX1BPU0lUSU9OIEFSUkFZX1BPU0lUSU9OUyBBUlJBWV9QUkVQRU5EIEFSUkFZX1JFTU9WRSBBUlJBWV9SRVBMQUNFIEFSUkFZX1RPX1NUUklORyBBUlJBWV9VUFBFUiBDQVJESU5BTElUWSBTVFJJTkdfVE9fQVJSQVkgVU5ORVNUIElTRU1QVFkgTE9XRVJfSU5DIFVQUEVSX0lOQyBMT1dFUl9JTkYgVVBQRVJfSU5GIFJBTkdFX01FUkdFIEdFTkVSQVRFX1NFUklFUyBHRU5FUkFURV9TVUJTQ1JJUFRTIENVUlJFTlRfREFUQUJBU0UgQ1VSUkVOVF9RVUVSWSBDVVJSRU5UX1NDSEVNQXwxMCBDVVJSRU5UX1NDSEVNQVN8MTAgSU5FVF9DTElFTlRfQUREUiBJTkVUX0NMSUVOVF9QT1JUIElORVRfU0VSVkVSX0FERFIgSU5FVF9TRVJWRVJfUE9SVCBST1dfU0VDVVJJVFlfQUNUSVZFIEZPUk1BVF9UWVBFIFRPX1JFR0NMQVNTIFRPX1JFR1BST0MgVE9fUkVHUFJPQ0VEVVJFIFRPX1JFR09QRVIgVE9fUkVHT1BFUkFUT1IgVE9fUkVHVFlQRSBUT19SRUdOQU1FU1BBQ0UgVE9fUkVHUk9MRSBDT0xfREVTQ1JJUFRJT04gT0JKX0RFU0NSSVBUSU9OIFNIT0JKX0RFU0NSSVBUSU9OIFRYSURfQ1VSUkVOVCBUWElEX0NVUlJFTlRfSUZfQVNTSUdORUQgVFhJRF9DVVJSRU5UX1NOQVBTSE9UIFRYSURfU05BUFNIT1RfWElQIFRYSURfU05BUFNIT1RfWE1BWCBUWElEX1NOQVBTSE9UX1hNSU4gVFhJRF9WSVNJQkxFX0lOX1NOQVBTSE9UIFRYSURfU1RBVFVTIENVUlJFTlRfU0VUVElORyBTRVRfQ09ORklHIEJSSU5fU1VNTUFSSVpFX05FV19WQUxVRVMgQlJJTl9TVU1NQVJJWkVfUkFOR0UgQlJJTl9ERVNVTU1BUklaRV9SQU5HRSBHSU5fQ0xFQU5fUEVORElOR19MSVNUIFNVUFBSRVNTX1JFRFVOREFOVF9VUERBVEVTX1RSSUdHRVIgTE9fRlJPTV9CWVRFQSBMT19QVVQgTE9fR0VUIExPX0NSRUFUIExPX0NSRUFURSBMT19VTkxJTksgTE9fSU1QT1JUIExPX0VYUE9SVCBMT1JFQUQgTE9XUklURSBHUk9VUElORyBDQVNUIi5zcGxpdCgiICIpLm1hcCgoZnVuY3Rpb24gKEUpIHsKICAgICAgICByZXR1cm4gRS5zcGxpdCgifCIpWzBdCiAgICAgIH0pKS5qb2luKCJ8Iik7CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiUG9zdGdyZVNRTCIsIGFsaWFzZXM6IFsicG9zdGdyZXMiLCAicG9zdGdyZXNxbCJdLCBjYXNlX2luc2Vuc2l0aXZlOiAhMCwga2V5d29yZHM6IHsKICAgICAgICBrZXl3b3JkOiAiQUJPUlQgQUxURVIgQU5BTFlaRSBCRUdJTiBDQUxMIENIRUNLUE9JTlR8MTAgQ0xPU0UgQ0xVU1RFUiBDT01NRU5UIENPTU1JVCBDT1BZIENSRUFURSBERUFMTE9DQVRFIERFQ0xBUkUgREVMRVRFIERJU0NBUkQgRE8gRFJPUCBFTkQgRVhFQ1VURSBFWFBMQUlOIEZFVENIIEdSQU5UIElNUE9SVCBJTlNFUlQgTElTVEVOIExPQUQgTE9DSyBNT1ZFIE5PVElGWSBQUkVQQVJFIFJFQVNTSUdOfDEwIFJFRlJFU0ggUkVJTkRFWCBSRUxFQVNFIFJFU0VUIFJFVk9LRSBST0xMQkFDSyBTQVZFUE9JTlQgU0VDVVJJVFkgU0VMRUNUIFNFVCBTSE9XIFNUQVJUIFRSVU5DQVRFIFVOTElTVEVOfDEwIFVQREFURSBWQUNVVU18MTAgVkFMVUVTIEFHR1JFR0FURSBDT0xMQVRJT04gQ09OVkVSU0lPTnwxMCBEQVRBQkFTRSBERUZBVUxUIFBSSVZJTEVHRVMgRE9NQUlOIFRSSUdHRVIgRVhURU5TSU9OIEZPUkVJR04gV1JBUFBFUnwxMCBUQUJMRSBGVU5DVElPTiBHUk9VUCBMQU5HVUFHRSBMQVJHRSBPQkpFQ1QgTUFURVJJQUxJWkVEIFZJRVcgT1BFUkFUT1IgQ0xBU1MgRkFNSUxZIFBPTElDWSBQVUJMSUNBVElPTnwxMCBST0xFIFJVTEUgU0NIRU1BIFNFUVVFTkNFIFNFUlZFUiBTVEFUSVNUSUNTIFNVQlNDUklQVElPTiBTWVNURU0gVEFCTEVTUEFDRSBDT05GSUdVUkFUSU9OIERJQ1RJT05BUlkgUEFSU0VSIFRFTVBMQVRFIFRZUEUgVVNFUiBNQVBQSU5HIFBSRVBBUkVEIEFDQ0VTUyBNRVRIT0QgQ0FTVCBBUyBUUkFOU0ZPUk0gVFJBTlNBQ1RJT04gT1dORUQgVE8gSU5UTyBTRVNTSU9OIEFVVEhPUklaQVRJT04gSU5ERVggUFJPQ0VEVVJFIEFTU0VSVElPTiBBTEwgQU5BTFlTRSBBTkQgQU5ZIEFSUkFZIEFTQyBBU1lNTUVUUklDfDEwIEJPVEggQ0FTRSBDSEVDSyBDT0xMQVRFIENPTFVNTiBDT05DVVJSRU5UTFl8MTAgQ09OU1RSQUlOVCBDUk9TUyBERUZFUlJBQkxFIFJBTkdFIERFU0MgRElTVElOQ1QgRUxTRSBFWENFUFQgRk9SIEZSRUVaRXwxMCBGUk9NIEZVTEwgSEFWSU5HIElMSUtFIElOIElOSVRJQUxMWSBJTk5FUiBJTlRFUlNFQ1QgSVMgSVNOVUxMIEpPSU4gTEFURVJBTCBMRUFESU5HIExJS0UgTElNSVQgTkFUVVJBTCBOT1QgTk9UTlVMTCBOVUxMIE9GRlNFVCBPTiBPTkxZIE9SIE9SREVSIE9VVEVSIE9WRVJMQVBTIFBMQUNJTkcgUFJJTUFSWSBSRUZFUkVOQ0VTIFJFVFVSTklORyBTSU1JTEFSIFNPTUUgU1lNTUVUUklDIFRBQkxFU0FNUExFIFRIRU4gVFJBSUxJTkcgVU5JT04gVU5JUVVFIFVTSU5HIFZBUklBRElDfDEwIFZFUkJPU0UgV0hFTiBXSEVSRSBXSU5ET1cgV0lUSCBCWSBSRVRVUk5TIElOT1VUIE9VVCBTRVRPRnwxMCBJRiBTVFJJQ1QgQ1VSUkVOVCBDT05USU5VRSBPV05FUiBMT0NBVElPTiBPVkVSIFBBUlRJVElPTiBXSVRISU4gQkVUV0VFTiBFU0NBUEUgRVhURVJOQUwgSU5WT0tFUiBERUZJTkVSIFdPUksgUkVOQU1FIFZFUlNJT04gQ09OTkVDVElPTiBDT05ORUNUIFRBQkxFUyBURU1QIFRFTVBPUkFSWSBGVU5DVElPTlMgU0VRVUVOQ0VTIFRZUEVTIFNDSEVNQVMgT1BUSU9OIENBU0NBREUgUkVTVFJJQ1QgQUREIEFETUlOIEVYSVNUUyBWQUxJRCBWQUxJREFURSBFTkFCTEUgRElTQUJMRSBSRVBMSUNBfDEwIEFMV0FZUyBQQVNTSU5HIENPTFVNTlMgUEFUSCBSRUYgVkFMVUUgT1ZFUlJJRElORyBJTU1VVEFCTEUgU1RBQkxFIFZPTEFUSUxFIEJFRk9SRSBBRlRFUiBFQUNIIFJPVyBQUk9DRURVUkFMIFJPVVRJTkUgTk8gSEFORExFUiBWQUxJREFUT1IgT1BUSU9OUyBTVE9SQUdFIE9JRFN8MTAgV0lUSE9VVCBJTkhFUklUIERFUEVORFMgQ0FMTEVEIElOUFVUIExFQUtQUk9PRnwxMCBDT1NUIFJPV1MgTk9XQUlUIFNFQVJDSCBVTlRJTCBFTkNSWVBURUR8MTAgUEFTU1dPUkQgQ09ORkxJQ1R8MTAgSU5TVEVBRCBJTkhFUklUUyBDSEFSQUNURVJJU1RJQ1MgV1JJVEUgQ1VSU09SIEFMU08gU1RBVEVNRU5UIFNIQVJFIEVYQ0xVU0lWRSBJTkxJTkUgSVNPTEFUSU9OIFJFUEVBVEFCTEUgUkVBRCBDT01NSVRURUQgU0VSSUFMSVpBQkxFIFVOQ09NTUlUVEVEIExPQ0FMIEdMT0JBTCBTUUwgUFJPQ0VEVVJFUyBSRUNVUlNJVkUgU05BUFNIT1QgUk9MTFVQIENVQkUgVFJVU1RFRHwxMCBJTkNMVURFIEZPTExPV0lORyBQUkVDRURJTkcgVU5CT1VOREVEIFJBTkdFIEdST1VQUyBVTkVOQ1JZUFRFRHwxMCBTWVNJRCBGT1JNQVQgREVMSU1JVEVSIEhFQURFUiBRVU9URSBFTkNPRElORyBGSUxURVIgT0ZGIEZPUkNFX1FVT1RFIEZPUkNFX05PVF9OVUxMIEZPUkNFX05VTEwgQ09TVFMgQlVGRkVSUyBUSU1JTkcgU1VNTUFSWSBESVNBQkxFX1BBR0VfU0tJUFBJTkcgUkVTVEFSVCBDWUNMRSBHRU5FUkFURUQgSURFTlRJVFkgREVGRVJSRUQgSU1NRURJQVRFIExFVkVMIExPR0dFRCBVTkxPR0dFRCBPRiBOT1RISU5HIE5PTkUgRVhDTFVERSBBVFRSSUJVVEUgVVNBR0UgUk9VVElORVMgVFJVRSBGQUxTRSBOQU4gSU5GSU5JVFkgQUxJQVMgQkVHSU4gQ09OU1RBTlQgREVDTEFSRSBFTkQgRVhDRVBUSU9OIFJFVFVSTiBQRVJGT1JNfDEwIFJBSVNFIEdFVCBESUFHTk9TVElDUyBTVEFDS0VEfDEwIEZPUkVBQ0ggTE9PUCBFTFNJRiBFWElUIFdISUxFIFJFVkVSU0UgU0xJQ0UgREVCVUcgTE9HIElORk8gTk9USUNFIFdBUk5JTkcgQVNTRVJUIE9QRU4gU1VQRVJVU0VSIE5PU1VQRVJVU0VSIENSRUFURURCIE5PQ1JFQVRFREIgQ1JFQVRFUk9MRSBOT0NSRUFURVJPTEUgSU5IRVJJVCBOT0lOSEVSSVQgTE9HSU4gTk9MT0dJTiBSRVBMSUNBVElPTiBOT1JFUExJQ0FUSU9OIEJZUEFTU1JMUyBOT0JZUEFTU1JMUyAiLAogICAgICAgIGJ1aWx0X2luOiAiQ1VSUkVOVF9USU1FIENVUlJFTlRfVElNRVNUQU1QIENVUlJFTlRfVVNFUiBDVVJSRU5UX0NBVEFMT0d8MTAgQ1VSUkVOVF9EQVRFIExPQ0FMVElNRSBMT0NBTFRJTUVTVEFNUCBDVVJSRU5UX1JPTEV8MTAgQ1VSUkVOVF9TQ0hFTUF8MTAgU0VTU0lPTl9VU0VSIFBVQkxJQyBGT1VORCBORVcgT0xEIFRHX05BTUV8MTAgVEdfV0hFTnwxMCBUR19MRVZFTHwxMCBUR19PUHwxMCBUR19SRUxJRHwxMCBUR19SRUxOQU1FfDEwIFRHX1RBQkxFX05BTUV8MTAgVEdfVEFCTEVfU0NIRU1BfDEwIFRHX05BUkdTfDEwIFRHX0FSR1Z8MTAgVEdfRVZFTlR8MTAgVEdfVEFHfDEwIFJPV19DT1VOVCBSRVNVTFRfT0lEfDEwIFBHX0NPTlRFWFR8MTAgUkVUVVJORURfU1FMU1RBVEUgQ09MVU1OX05BTUUgQ09OU1RSQUlOVF9OQU1FIFBHX0RBVEFUWVBFX05BTUV8MTAgTUVTU0FHRV9URVhUIFRBQkxFX05BTUUgU0NIRU1BX05BTUUgUEdfRVhDRVBUSU9OX0RFVEFJTHwxMCBQR19FWENFUFRJT05fSElOVHwxMCBQR19FWENFUFRJT05fQ09OVEVYVHwxMCBTUUxTVEFURSBTUUxFUlJNfDEwIFNVQ0NFU1NGVUxfQ09NUExFVElPTiBXQVJOSU5HIERZTkFNSUNfUkVTVUxUX1NFVFNfUkVUVVJORUQgSU1QTElDSVRfWkVST19CSVRfUEFERElORyBOVUxMX1ZBTFVFX0VMSU1JTkFURURfSU5fU0VUX0ZVTkNUSU9OIFBSSVZJTEVHRV9OT1RfR1JBTlRFRCBQUklWSUxFR0VfTk9UX1JFVk9LRUQgU1RSSU5HX0RBVEFfUklHSFRfVFJVTkNBVElPTiBERVBSRUNBVEVEX0ZFQVRVUkUgTk9fREFUQSBOT19BRERJVElPTkFMX0RZTkFNSUNfUkVTVUxUX1NFVFNfUkVUVVJORUQgU1FMX1NUQVRFTUVOVF9OT1RfWUVUX0NPTVBMRVRFIENPTk5FQ1RJT05fRVhDRVBUSU9OIENPTk5FQ1RJT05fRE9FU19OT1RfRVhJU1QgQ09OTkVDVElPTl9GQUlMVVJFIFNRTENMSUVOVF9VTkFCTEVfVE9fRVNUQUJMSVNIX1NRTENPTk5FQ1RJT04gU1FMU0VSVkVSX1JFSkVDVEVEX0VTVEFCTElTSE1FTlRfT0ZfU1FMQ09OTkVDVElPTiBUUkFOU0FDVElPTl9SRVNPTFVUSU9OX1VOS05PV04gUFJPVE9DT0xfVklPTEFUSU9OIFRSSUdHRVJFRF9BQ1RJT05fRVhDRVBUSU9OIEZFQVRVUkVfTk9UX1NVUFBPUlRFRCBJTlZBTElEX1RSQU5TQUNUSU9OX0lOSVRJQVRJT04gTE9DQVRPUl9FWENFUFRJT04gSU5WQUxJRF9MT0NBVE9SX1NQRUNJRklDQVRJT04gSU5WQUxJRF9HUkFOVE9SIElOVkFMSURfR1JBTlRfT1BFUkFUSU9OIElOVkFMSURfUk9MRV9TUEVDSUZJQ0FUSU9OIERJQUdOT1NUSUNTX0VYQ0VQVElPTiBTVEFDS0VEX0RJQUdOT1NUSUNTX0FDQ0VTU0VEX1dJVEhPVVRfQUNUSVZFX0hBTkRMRVIgQ0FTRV9OT1RfRk9VTkQgQ0FSRElOQUxJVFlfVklPTEFUSU9OIERBVEFfRVhDRVBUSU9OIEFSUkFZX1NVQlNDUklQVF9FUlJPUiBDSEFSQUNURVJfTk9UX0lOX1JFUEVSVE9JUkUgREFURVRJTUVfRklFTERfT1ZFUkZMT1cgRElWSVNJT05fQllfWkVSTyBFUlJPUl9JTl9BU1NJR05NRU5UIEVTQ0FQRV9DSEFSQUNURVJfQ09ORkxJQ1QgSU5ESUNBVE9SX09WRVJGTE9XIElOVEVSVkFMX0ZJRUxEX09WRVJGTE9XIElOVkFMSURfQVJHVU1FTlRfRk9SX0xPR0FSSVRITSBJTlZBTElEX0FSR1VNRU5UX0ZPUl9OVElMRV9GVU5DVElPTiBJTlZBTElEX0FSR1VNRU5UX0ZPUl9OVEhfVkFMVUVfRlVOQ1RJT04gSU5WQUxJRF9BUkdVTUVOVF9GT1JfUE9XRVJfRlVOQ1RJT04gSU5WQUxJRF9BUkdVTUVOVF9GT1JfV0lEVEhfQlVDS0VUX0ZVTkNUSU9OIElOVkFMSURfQ0hBUkFDVEVSX1ZBTFVFX0ZPUl9DQVNUIElOVkFMSURfREFURVRJTUVfRk9STUFUIElOVkFMSURfRVNDQVBFX0NIQVJBQ1RFUiBJTlZBTElEX0VTQ0FQRV9PQ1RFVCBJTlZBTElEX0VTQ0FQRV9TRVFVRU5DRSBOT05TVEFOREFSRF9VU0VfT0ZfRVNDQVBFX0NIQVJBQ1RFUiBJTlZBTElEX0lORElDQVRPUl9QQVJBTUVURVJfVkFMVUUgSU5WQUxJRF9QQVJBTUVURVJfVkFMVUUgSU5WQUxJRF9SRUdVTEFSX0VYUFJFU1NJT04gSU5WQUxJRF9ST1dfQ09VTlRfSU5fTElNSVRfQ0xBVVNFIElOVkFMSURfUk9XX0NPVU5UX0lOX1JFU1VMVF9PRkZTRVRfQ0xBVVNFIElOVkFMSURfVEFCTEVTQU1QTEVfQVJHVU1FTlQgSU5WQUxJRF9UQUJMRVNBTVBMRV9SRVBFQVQgSU5WQUxJRF9USU1FX1pPTkVfRElTUExBQ0VNRU5UX1ZBTFVFIElOVkFMSURfVVNFX09GX0VTQ0FQRV9DSEFSQUNURVIgTU9TVF9TUEVDSUZJQ19UWVBFX01JU01BVENIIE5VTExfVkFMVUVfTk9UX0FMTE9XRUQgTlVMTF9WQUxVRV9OT19JTkRJQ0FUT1JfUEFSQU1FVEVSIE5VTUVSSUNfVkFMVUVfT1VUX09GX1JBTkdFIFNFUVVFTkNFX0dFTkVSQVRPUl9MSU1JVF9FWENFRURFRCBTVFJJTkdfREFUQV9MRU5HVEhfTUlTTUFUQ0ggU1RSSU5HX0RBVEFfUklHSFRfVFJVTkNBVElPTiBTVUJTVFJJTkdfRVJST1IgVFJJTV9FUlJPUiBVTlRFUk1JTkFURURfQ19TVFJJTkcgWkVST19MRU5HVEhfQ0hBUkFDVEVSX1NUUklORyBGTE9BVElOR19QT0lOVF9FWENFUFRJT04gSU5WQUxJRF9URVhUX1JFUFJFU0VOVEFUSU9OIElOVkFMSURfQklOQVJZX1JFUFJFU0VOVEFUSU9OIEJBRF9DT1BZX0ZJTEVfRk9STUFUIFVOVFJBTlNMQVRBQkxFX0NIQVJBQ1RFUiBOT1RfQU5fWE1MX0RPQ1VNRU5UIElOVkFMSURfWE1MX0RPQ1VNRU5UIElOVkFMSURfWE1MX0NPTlRFTlQgSU5WQUxJRF9YTUxfQ09NTUVOVCBJTlZBTElEX1hNTF9QUk9DRVNTSU5HX0lOU1RSVUNUSU9OIElOVEVHUklUWV9DT05TVFJBSU5UX1ZJT0xBVElPTiBSRVNUUklDVF9WSU9MQVRJT04gTk9UX05VTExfVklPTEFUSU9OIEZPUkVJR05fS0VZX1ZJT0xBVElPTiBVTklRVUVfVklPTEFUSU9OIENIRUNLX1ZJT0xBVElPTiBFWENMVVNJT05fVklPTEFUSU9OIElOVkFMSURfQ1VSU09SX1NUQVRFIElOVkFMSURfVFJBTlNBQ1RJT05fU1RBVEUgQUNUSVZFX1NRTF9UUkFOU0FDVElPTiBCUkFOQ0hfVFJBTlNBQ1RJT05fQUxSRUFEWV9BQ1RJVkUgSEVMRF9DVVJTT1JfUkVRVUlSRVNfU0FNRV9JU09MQVRJT05fTEVWRUwgSU5BUFBST1BSSUFURV9BQ0NFU1NfTU9ERV9GT1JfQlJBTkNIX1RSQU5TQUNUSU9OIElOQVBQUk9QUklBVEVfSVNPTEFUSU9OX0xFVkVMX0ZPUl9CUkFOQ0hfVFJBTlNBQ1RJT04gTk9fQUNUSVZFX1NRTF9UUkFOU0FDVElPTl9GT1JfQlJBTkNIX1RSQU5TQUNUSU9OIFJFQURfT05MWV9TUUxfVFJBTlNBQ1RJT04gU0NIRU1BX0FORF9EQVRBX1NUQVRFTUVOVF9NSVhJTkdfTk9UX1NVUFBPUlRFRCBOT19BQ1RJVkVfU1FMX1RSQU5TQUNUSU9OIElOX0ZBSUxFRF9TUUxfVFJBTlNBQ1RJT04gSURMRV9JTl9UUkFOU0FDVElPTl9TRVNTSU9OX1RJTUVPVVQgSU5WQUxJRF9TUUxfU1RBVEVNRU5UX05BTUUgVFJJR0dFUkVEX0RBVEFfQ0hBTkdFX1ZJT0xBVElPTiBJTlZBTElEX0FVVEhPUklaQVRJT05fU1BFQ0lGSUNBVElPTiBJTlZBTElEX1BBU1NXT1JEIERFUEVOREVOVF9QUklWSUxFR0VfREVTQ1JJUFRPUlNfU1RJTExfRVhJU1QgREVQRU5ERU5UX09CSkVDVFNfU1RJTExfRVhJU1QgSU5WQUxJRF9UUkFOU0FDVElPTl9URVJNSU5BVElPTiBTUUxfUk9VVElORV9FWENFUFRJT04gRlVOQ1RJT05fRVhFQ1VURURfTk9fUkVUVVJOX1NUQVRFTUVOVCBNT0RJRllJTkdfU1FMX0RBVEFfTk9UX1BFUk1JVFRFRCBQUk9ISUJJVEVEX1NRTF9TVEFURU1FTlRfQVRURU1QVEVEIFJFQURJTkdfU1FMX0RBVEFfTk9UX1BFUk1JVFRFRCBJTlZBTElEX0NVUlNPUl9OQU1FIEVYVEVSTkFMX1JPVVRJTkVfRVhDRVBUSU9OIENPTlRBSU5JTkdfU1FMX05PVF9QRVJNSVRURUQgTU9ESUZZSU5HX1NRTF9EQVRBX05PVF9QRVJNSVRURUQgUFJPSElCSVRFRF9TUUxfU1RBVEVNRU5UX0FUVEVNUFRFRCBSRUFESU5HX1NRTF9EQVRBX05PVF9QRVJNSVRURUQgRVhURVJOQUxfUk9VVElORV9JTlZPQ0FUSU9OX0VYQ0VQVElPTiBJTlZBTElEX1NRTFNUQVRFX1JFVFVSTkVEIE5VTExfVkFMVUVfTk9UX0FMTE9XRUQgVFJJR0dFUl9QUk9UT0NPTF9WSU9MQVRFRCBTUkZfUFJPVE9DT0xfVklPTEFURUQgRVZFTlRfVFJJR0dFUl9QUk9UT0NPTF9WSU9MQVRFRCBTQVZFUE9JTlRfRVhDRVBUSU9OIElOVkFMSURfU0FWRVBPSU5UX1NQRUNJRklDQVRJT04gSU5WQUxJRF9DQVRBTE9HX05BTUUgSU5WQUxJRF9TQ0hFTUFfTkFNRSBUUkFOU0FDVElPTl9ST0xMQkFDSyBUUkFOU0FDVElPTl9JTlRFR1JJVFlfQ09OU1RSQUlOVF9WSU9MQVRJT04gU0VSSUFMSVpBVElPTl9GQUlMVVJFIFNUQVRFTUVOVF9DT01QTEVUSU9OX1VOS05PV04gREVBRExPQ0tfREVURUNURUQgU1lOVEFYX0VSUk9SX09SX0FDQ0VTU19SVUxFX1ZJT0xBVElPTiBTWU5UQVhfRVJST1IgSU5TVUZGSUNJRU5UX1BSSVZJTEVHRSBDQU5OT1RfQ09FUkNFIEdST1VQSU5HX0VSUk9SIFdJTkRPV0lOR19FUlJPUiBJTlZBTElEX1JFQ1VSU0lPTiBJTlZBTElEX0ZPUkVJR05fS0VZIElOVkFMSURfTkFNRSBOQU1FX1RPT19MT05HIFJFU0VSVkVEX05BTUUgREFUQVRZUEVfTUlTTUFUQ0ggSU5ERVRFUk1JTkFURV9EQVRBVFlQRSBDT0xMQVRJT05fTUlTTUFUQ0ggSU5ERVRFUk1JTkFURV9DT0xMQVRJT04gV1JPTkdfT0JKRUNUX1RZUEUgR0VORVJBVEVEX0FMV0FZUyBVTkRFRklORURfQ09MVU1OIFVOREVGSU5FRF9GVU5DVElPTiBVTkRFRklORURfVEFCTEUgVU5ERUZJTkVEX1BBUkFNRVRFUiBVTkRFRklORURfT0JKRUNUIERVUExJQ0FURV9DT0xVTU4gRFVQTElDQVRFX0NVUlNPUiBEVVBMSUNBVEVfREFUQUJBU0UgRFVQTElDQVRFX0ZVTkNUSU9OIERVUExJQ0FURV9QUkVQQVJFRF9TVEFURU1FTlQgRFVQTElDQVRFX1NDSEVNQSBEVVBMSUNBVEVfVEFCTEUgRFVQTElDQVRFX0FMSUFTIERVUExJQ0FURV9PQkpFQ1QgQU1CSUdVT1VTX0NPTFVNTiBBTUJJR1VPVVNfRlVOQ1RJT04gQU1CSUdVT1VTX1BBUkFNRVRFUiBBTUJJR1VPVVNfQUxJQVMgSU5WQUxJRF9DT0xVTU5fUkVGRVJFTkNFIElOVkFMSURfQ09MVU1OX0RFRklOSVRJT04gSU5WQUxJRF9DVVJTT1JfREVGSU5JVElPTiBJTlZBTElEX0RBVEFCQVNFX0RFRklOSVRJT04gSU5WQUxJRF9GVU5DVElPTl9ERUZJTklUSU9OIElOVkFMSURfUFJFUEFSRURfU1RBVEVNRU5UX0RFRklOSVRJT04gSU5WQUxJRF9TQ0hFTUFfREVGSU5JVElPTiBJTlZBTElEX1RBQkxFX0RFRklOSVRJT04gSU5WQUxJRF9PQkpFQ1RfREVGSU5JVElPTiBXSVRIX0NIRUNLX09QVElPTl9WSU9MQVRJT04gSU5TVUZGSUNJRU5UX1JFU09VUkNFUyBESVNLX0ZVTEwgT1VUX09GX01FTU9SWSBUT09fTUFOWV9DT05ORUNUSU9OUyBDT05GSUdVUkFUSU9OX0xJTUlUX0VYQ0VFREVEIFBST0dSQU1fTElNSVRfRVhDRUVERUQgU1RBVEVNRU5UX1RPT19DT01QTEVYIFRPT19NQU5ZX0NPTFVNTlMgVE9PX01BTllfQVJHVU1FTlRTIE9CSkVDVF9OT1RfSU5fUFJFUkVRVUlTSVRFX1NUQVRFIE9CSkVDVF9JTl9VU0UgQ0FOVF9DSEFOR0VfUlVOVElNRV9QQVJBTSBMT0NLX05PVF9BVkFJTEFCTEUgT1BFUkFUT1JfSU5URVJWRU5USU9OIFFVRVJZX0NBTkNFTEVEIEFETUlOX1NIVVRET1dOIENSQVNIX1NIVVRET1dOIENBTk5PVF9DT05ORUNUX05PVyBEQVRBQkFTRV9EUk9QUEVEIFNZU1RFTV9FUlJPUiBJT19FUlJPUiBVTkRFRklORURfRklMRSBEVVBMSUNBVEVfRklMRSBTTkFQU0hPVF9UT09fT0xEIENPTkZJR19GSUxFX0VSUk9SIExPQ0tfRklMRV9FWElTVFMgRkRXX0VSUk9SIEZEV19DT0xVTU5fTkFNRV9OT1RfRk9VTkQgRkRXX0RZTkFNSUNfUEFSQU1FVEVSX1ZBTFVFX05FRURFRCBGRFdfRlVOQ1RJT05fU0VRVUVOQ0VfRVJST1IgRkRXX0lOQ09OU0lTVEVOVF9ERVNDUklQVE9SX0lORk9STUFUSU9OIEZEV19JTlZBTElEX0FUVFJJQlVURV9WQUxVRSBGRFdfSU5WQUxJRF9DT0xVTU5fTkFNRSBGRFdfSU5WQUxJRF9DT0xVTU5fTlVNQkVSIEZEV19JTlZBTElEX0RBVEFfVFlQRSBGRFdfSU5WQUxJRF9EQVRBX1RZUEVfREVTQ1JJUFRPUlMgRkRXX0lOVkFMSURfREVTQ1JJUFRPUl9GSUVMRF9JREVOVElGSUVSIEZEV19JTlZBTElEX0hBTkRMRSBGRFdfSU5WQUxJRF9PUFRJT05fSU5ERVggRkRXX0lOVkFMSURfT1BUSU9OX05BTUUgRkRXX0lOVkFMSURfU1RSSU5HX0xFTkdUSF9PUl9CVUZGRVJfTEVOR1RIIEZEV19JTlZBTElEX1NUUklOR19GT1JNQVQgRkRXX0lOVkFMSURfVVNFX09GX05VTExfUE9JTlRFUiBGRFdfVE9PX01BTllfSEFORExFUyBGRFdfT1VUX09GX01FTU9SWSBGRFdfTk9fU0NIRU1BUyBGRFdfT1BUSU9OX05BTUVfTk9UX0ZPVU5EIEZEV19SRVBMWV9IQU5ETEUgRkRXX1NDSEVNQV9OT1RfRk9VTkQgRkRXX1RBQkxFX05PVF9GT1VORCBGRFdfVU5BQkxFX1RPX0NSRUFURV9FWEVDVVRJT04gRkRXX1VOQUJMRV9UT19DUkVBVEVfUkVQTFkgRkRXX1VOQUJMRV9UT19FU1RBQkxJU0hfQ09OTkVDVElPTiBQTFBHU1FMX0VSUk9SIFJBSVNFX0VYQ0VQVElPTiBOT19EQVRBX0ZPVU5EIFRPT19NQU5ZX1JPV1MgQVNTRVJUX0ZBSUxVUkUgSU5URVJOQUxfRVJST1IgREFUQV9DT1JSVVBURUQgSU5ERVhfQ09SUlVQVEVEICIKICAgICAgfSwgaWxsZWdhbDogLzo9PXxcV1xzKlwoXCp8KF58XHMpXCRbYS16XXx7e3xbYS16XTpccyokfFwuXC5cLnxUTzp8RE86LywgY29udGFpbnM6IFt7CiAgICAgICAgY2xhc3NOYW1lOiAia2V5d29yZCIsCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46IC9cYlRFWFRccypTRUFSQ0hcYi99LCB7YmVnaW46IC9cYihQUklNQVJZfEZPUkVJR058Rk9SKFxzK05PKT8pXHMrS0VZXGIvfSwge2JlZ2luOiAvXGJQQVJBTExFTFxzKyhVTlNBRkV8UkVTVFJJQ1RFRHxTQUZFKVxiL30sIHtiZWdpbjogL1xiU1RPUkFHRVxzKyhQTEFJTnxFWFRFUk5BTHxFWFRFTkRFRHxNQUlOKVxiL30sIHtiZWdpbjogL1xiTUFUQ0hccysoRlVMTHxQQVJUSUFMfFNJTVBMRSlcYi99LCB7YmVnaW46IC9cYk5VTExTXHMrKEZJUlNUfExBU1QpXGIvfSwge2JlZ2luOiAvXGJFVkVOVFxzK1RSSUdHRVJcYi99LCB7YmVnaW46IC9cYihNQVBQSU5HfE9SKVxzK1JFUExBQ0VcYi99LCB7YmVnaW46IC9cYihGUk9NfFRPKVxzKyhQUk9HUkFNfFNURElOfFNURE9VVClcYi99LCB7YmVnaW46IC9cYihTSEFSRXxFWENMVVNJVkUpXHMrTU9ERVxiL30sIHtiZWdpbjogL1xiKExFRlR8UklHSFQpXHMrKE9VVEVSXHMrKT9KT0lOXGIvfSwge2JlZ2luOiAvXGIoRkVUQ0h8TU9WRSlccysoTkVYVHxQUklPUnxGSVJTVHxMQVNUfEFCU09MVVRFfFJFTEFUSVZFfEZPUldBUkR8QkFDS1dBUkQpXGIvfSwge2JlZ2luOiAvXGJQUkVTRVJWRVxzK1JPV1NcYi99LCB7YmVnaW46IC9cYkRJU0NBUkRccytQTEFOU1xiL30sIHtiZWdpbjogL1xiUkVGRVJFTkNJTkdccysoT0xEfE5FVylcYi99LCB7YmVnaW46IC9cYlNLSVBccytMT0NLRURcYi99LCB7YmVnaW46IC9cYkdST1VQSU5HXHMrU0VUU1xiL30sIHtiZWdpbjogL1xiKEJJTkFSWXxJTlNFTlNJVElWRXxTQ1JPTEx8Tk9ccytTQ1JPTEwpXHMrKENVUlNPUnxGT1IpXGIvfSwge2JlZ2luOiAvXGIoV0lUSHxXSVRIT1VUKVxzK0hPTERcYi99LCB7YmVnaW46IC9cYldJVEhccysoQ0FTQ0FERUR8TE9DQUwpXHMrQ0hFQ0tccytPUFRJT05cYi99LCB7YmVnaW46IC9cYkVYQ0xVREVccysoVElFU3xOT1xzK09USEVSUylcYi99LCB7YmVnaW46IC9cYkZPUk1BVFxzKyhURVhUfFhNTHxKU09OfFlBTUwpXGIvfSwge2JlZ2luOiAvXGJTRVRccysoKFNFU1NJT058TE9DQUwpXHMrKT9OQU1FU1xiL30sIHtiZWdpbjogL1xiSVNccysoTk9UXHMrKT9VTktOT1dOXGIvfSwge2JlZ2luOiAvXGJTRUNVUklUWVxzK0xBQkVMXGIvfSwge2JlZ2luOiAvXGJTVEFOREFMT05FXHMrKFlFU3xOT3xOT1xzK1ZBTFVFKVxiL30sIHtiZWdpbjogL1xiV0lUSFxzKyhOT1xzKyk/REFUQVxiL30sIHtiZWdpbjogL1xiKEZPUkVJR058U0VUKVxzK0RBVEFcYi99LCB7YmVnaW46IC9cYlNFVFxzKyhDQVRBTE9HfENPTlNUUkFJTlRTKVxiL30sIHtiZWdpbjogL1xiKFdJVEh8Rk9SKVxzK09SRElOQUxJVFlcYi99LCB7YmVnaW46IC9cYklTXHMrKE5PVFxzKyk/RE9DVU1FTlRcYi99LCB7YmVnaW46IC9cYlhNTFxzK09QVElPTlxzKyhET0NVTUVOVHxDT05URU5UKVxiL30sIHtiZWdpbjogL1xiKFNUUklQfFBSRVNFUlZFKVxzK1dISVRFU1BBQ0VcYi99LCB7YmVnaW46IC9cYk5PXHMrKEFDVElPTnxNQVhWQUxVRXxNSU5WQUxVRSlcYi99LCB7YmVnaW46IC9cYlBBUlRJVElPTlxzK0JZXHMrKFJBTkdFfExJU1R8SEFTSClcYi99LCB7YmVnaW46IC9cYkFUXHMrVElNRVxzK1pPTkVcYi99LCB7YmVnaW46IC9cYkdSQU5URURccytCWVxiL30sIHtiZWdpbjogL1xiUkVUVVJOXHMrKFFVRVJZfE5FWFQpXGIvfSwge2JlZ2luOiAvXGIoQVRUQUNIfERFVEFDSClccytQQVJUSVRJT05cYi99LCB7YmVnaW46IC9cYkZPUkNFXHMrUk9XXHMrTEVWRUxccytTRUNVUklUWVxiL30sIHtiZWdpbjogL1xiKElOQ0xVRElOR3xFWENMVURJTkcpXHMrKENPTU1FTlRTfENPTlNUUkFJTlRTfERFRkFVTFRTfElERU5USVRZfElOREVYRVN8U1RBVElTVElDU3xTVE9SQUdFfEFMTClcYi99LCB7YmVnaW46IC9cYkFTXHMrKEFTU0lHTk1FTlR8SU1QTElDSVR8UEVSTUlTU0lWRXxSRVNUUklDVElWRXxFTlVNfFJBTkdFKVxiL31dCiAgICAgIH0sIHtiZWdpbjogL1xiKEZPUk1BVHxGQU1JTFl8VkVSU0lPTilccypcKC99LCB7CiAgICAgICAgYmVnaW46IC9cYklOQ0xVREVccypcKC8sCiAgICAgICAga2V5d29yZHM6ICJJTkNMVURFIgogICAgICB9LCB7YmVnaW46IC9cYlJBTkdFKD8hXHMqKEJFVFdFRU58VU5CT1VOREVEfENVUlJFTlR8Wy0wLTldKykpL30sIHtiZWdpbjogL1xiKFZFUlNJT058T1dORVJ8VEVNUExBVEV8VEFCTEVTUEFDRXxDT05ORUNUSU9OXHMrTElNSVR8UFJPQ0VEVVJFfFJFU1RSSUNUfEpPSU58UEFSU0VSfENPUFl8U1RBUlR8RU5EfENPTExBVElPTnxJTlBVVHxBTkFMWVpFfFNUT1JBR0V8TElLRXxERUZBVUxUfERFTElNSVRFUnxFTkNPRElOR3xDT0xVTU58Q09OU1RSQUlOVHxUQUJMRXxTQ0hFTUEpXHMqPS99LCB7CiAgICAgICAgYmVnaW46IC9cYihQR19cdys/fEhBU19bQS1aX10rX1BSSVZJTEVHRSlcYi8sCiAgICAgICAgcmVsZXZhbmNlOiAxMAogICAgICB9LCB7CiAgICAgICAgYmVnaW46IC9cYkVYVFJBQ1RccypcKC8sCiAgICAgICAgZW5kOiAvXGJGUk9NXGIvLAogICAgICAgIHJldHVybkVuZDogITAsCiAgICAgICAga2V5d29yZHM6IHt0eXBlOiAiQ0VOVFVSWSBEQVkgREVDQURFIERPVyBET1kgRVBPQ0ggSE9VUiBJU09ET1cgSVNPWUVBUiBNSUNST1NFQ09ORFMgTUlMTEVOTklVTSBNSUxMSVNFQ09ORFMgTUlOVVRFIE1PTlRIIFFVQVJURVIgU0VDT05EIFRJTUVaT05FIFRJTUVaT05FX0hPVVIgVElNRVpPTkVfTUlOVVRFIFdFRUsgWUVBUiJ9CiAgICAgIH0sIHsKICAgICAgICBiZWdpbjogL1xiKFhNTEVMRU1FTlR8WE1MUEkpXHMqXChccypOQU1FLywKICAgICAgICBrZXl3b3Jkczoge2tleXdvcmQ6ICJOQU1FIn0KICAgICAgfSwgewogICAgICAgIGJlZ2luOiAvXGIoWE1MUEFSU0V8WE1MU0VSSUFMSVpFKVxzKlwoXHMqKERPQ1VNRU5UfENPTlRFTlQpLywKICAgICAgICBrZXl3b3Jkczoge2tleXdvcmQ6ICJET0NVTUVOVCBDT05URU5UIn0KICAgICAgfSwgewogICAgICAgIGJlZ2luS2V5d29yZHM6ICJDQUNIRSBJTkNSRU1FTlQgTUFYVkFMVUUgTUlOVkFMVUUiLAogICAgICAgIGVuZDogRS5DX05VTUJFUl9SRSwKICAgICAgICByZXR1cm5FbmQ6ICEwLAogICAgICAgIGtleXdvcmRzOiAiQlkgQ0FDSEUgSU5DUkVNRU5UIE1BWFZBTFVFIE1JTlZBTFVFIgogICAgICB9LCB7Y2xhc3NOYW1lOiAidHlwZSIsIGJlZ2luOiAvXGIoV0lUSHxXSVRIT1VUKVxzK1RJTUVccytaT05FXGIvfSwgewogICAgICAgIGNsYXNzTmFtZTogInR5cGUiLAogICAgICAgIGJlZ2luOiAvXGJJTlRFUlZBTFxzKyhZRUFSfE1PTlRIfERBWXxIT1VSfE1JTlVURXxTRUNPTkQpKFxzK1RPXHMrKE1PTlRIfEhPVVJ8TUlOVVRFfFNFQ09ORCkpP1xiLwogICAgICB9LCB7CiAgICAgICAgYmVnaW46IC9cYlJFVFVSTlNccysoTEFOR1VBR0VfSEFORExFUnxUUklHR0VSfEVWRU5UX1RSSUdHRVJ8RkRXX0hBTkRMRVJ8SU5ERVhfQU1fSEFORExFUnxUU01fSEFORExFUilcYi8sCiAgICAgICAga2V5d29yZHM6IHsKICAgICAgICAgIGtleXdvcmQ6ICJSRVRVUk5TIiwKICAgICAgICAgIHR5cGU6ICJMQU5HVUFHRV9IQU5ETEVSIFRSSUdHRVIgRVZFTlRfVFJJR0dFUiBGRFdfSEFORExFUiBJTkRFWF9BTV9IQU5ETEVSIFRTTV9IQU5ETEVSIgogICAgICAgIH0KICAgICAgfSwge2JlZ2luOiAiXFxiKCIgKyBJICsgIilcXHMqXFwoIn0sIHtiZWdpbjogIlxcLigiICsgUiArICIpXFxiIn0sIHsKICAgICAgICBiZWdpbjogIlxcYigiICsgUiArICIpXFxzK1BBVEhcXGIiLAogICAgICAgIGtleXdvcmRzOiB7a2V5d29yZDogIlBBVEgiLCB0eXBlOiBBLnJlcGxhY2UoIlBBVEggIiwgIiIpfQogICAgICB9LCB7Y2xhc3NOYW1lOiAidHlwZSIsIGJlZ2luOiAiXFxiKCIgKyBSICsgIilcXGIifSwgewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgYmVnaW46ICInIiwKICAgICAgICBlbmQ6ICInIiwKICAgICAgICBjb250YWluczogW3tiZWdpbjogIicnIn1dCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICAgIGJlZ2luOiAiKGV8RXx1JnxVJiknIiwKICAgICAgICBlbmQ6ICInIiwKICAgICAgICBjb250YWluczogW3tiZWdpbjogIlxcXFwuIn1dLAogICAgICAgIHJlbGV2YW5jZTogMTAKICAgICAgfSwgRS5FTkRfU0FNRV9BU19CRUdJTih7CiAgICAgICAgYmVnaW46IE4sCiAgICAgICAgZW5kOiBOLAogICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgc3ViTGFuZ3VhZ2U6IFsicGdzcWwiLCAicGVybCIsICJweXRob24iLCAidGNsIiwgInIiLCAibHVhIiwgImphdmEiLCAicGhwIiwgInJ1YnkiLCAiYmFzaCIsICJzY2hlbWUiLCAieG1sIiwgImpzb24iXSwKICAgICAgICAgIGVuZHNXaXRoUGFyZW50OiAhMAogICAgICAgIH1dCiAgICAgIH0pLCB7CiAgICAgICAgYmVnaW46ICciJywKICAgICAgICBlbmQ6ICciJywKICAgICAgICBjb250YWluczogW3tiZWdpbjogJyIiJ31dCiAgICAgIH0sIEUuQ19OVU1CRVJfTU9ERSwgRS5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgVCwgewogICAgICAgIGNsYXNzTmFtZTogIm1ldGEiLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAiJShST1cpP1RZUEUiLCByZWxldmFuY2U6IDEwfSwge2JlZ2luOiAiXFwkXFxkKyJ9LCB7YmVnaW46ICJeI1xcdyIsIGVuZDogIiQifV0KICAgICAgfSwge2NsYXNzTmFtZTogInN5bWJvbCIsIGJlZ2luOiAiPDxcXHMqW2EtekEtWl9dW2EtekEtWl8wLTkkXSpcXHMqPj4iLCByZWxldmFuY2U6IDEwfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiZ3JhZGxlIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJHcmFkbGUiLAogICAgICBjYXNlX2luc2Vuc2l0aXZlOiAhMCwKICAgICAga2V5d29yZHM6IHtrZXl3b3JkOiAidGFzayBwcm9qZWN0IGFsbHByb2plY3RzIHN1YnByb2plY3RzIGFydGlmYWN0cyBidWlsZHNjcmlwdCBjb25maWd1cmF0aW9ucyBkZXBlbmRlbmNpZXMgcmVwb3NpdG9yaWVzIHNvdXJjZVNldHMgZGVzY3JpcHRpb24gZGVsZXRlIGZyb20gaW50byBpbmNsdWRlIGV4Y2x1ZGUgc291cmNlIGNsYXNzcGF0aCBkZXN0aW5hdGlvbkRpciBpbmNsdWRlcyBvcHRpb25zIHNvdXJjZUNvbXBhdGliaWxpdHkgdGFyZ2V0Q29tcGF0aWJpbGl0eSBncm91cCBmbGF0RGlyIGRvTGFzdCBkb0ZpcnN0IGZsYXR0ZW4gdG9kaXIgZnJvbWRpciBhbnQgZGVmIGFic3RyYWN0IGJyZWFrIGNhc2UgY2F0Y2ggY29udGludWUgZGVmYXVsdCBkbyBlbHNlIGV4dGVuZHMgZmluYWwgZmluYWxseSBmb3IgaWYgaW1wbGVtZW50cyBpbnN0YW5jZW9mIG5hdGl2ZSBuZXcgcHJpdmF0ZSBwcm90ZWN0ZWQgcHVibGljIHJldHVybiBzdGF0aWMgc3dpdGNoIHN5bmNocm9uaXplZCB0aHJvdyB0aHJvd3MgdHJhbnNpZW50IHRyeSB2b2xhdGlsZSB3aGlsZSBzdHJpY3RmcCBwYWNrYWdlIGltcG9ydCBmYWxzZSBudWxsIHN1cGVyIHRoaXMgdHJ1ZSBhbnRscnRhc2sgY2hlY2tzdHlsZSBjb2RlbmFyYyBjb3B5IGJvb2xlYW4gYnl0ZSBjaGFyIGNsYXNzIGRvdWJsZSBmbG9hdCBpbnQgaW50ZXJmYWNlIGxvbmcgc2hvcnQgdm9pZCBjb21waWxlIHJ1blRpbWUgZmlsZSBmaWxlVHJlZSBhYnMgYW55IGFwcGVuZCBhc0xpc3QgYXNXcml0YWJsZSBjYWxsIGNvbGxlY3QgY29tcGFyZVRvIGNvdW50IGRpdiBkdW1wIGVhY2ggZWFjaEJ5dGUgZWFjaEZpbGUgZWFjaExpbmUgZXZlcnkgZmluZCBmaW5kQWxsIGZsYXR0ZW4gZ2V0QXQgZ2V0RXJyIGdldEluIGdldE91dCBnZXRUZXh0IGdyZXAgaW1tdXRhYmxlIGluamVjdCBpbnNwZWN0IGludGVyc2VjdCBpbnZva2VNZXRob2RzIGlzQ2FzZSBqb2luIGxlZnRTaGlmdCBtaW51cyBtdWx0aXBseSBuZXdJbnB1dFN0cmVhbSBuZXdPdXRwdXRTdHJlYW0gbmV3UHJpbnRXcml0ZXIgbmV3UmVhZGVyIG5ld1dyaXRlciBuZXh0IHBsdXMgcG9wIHBvd2VyIHByZXZpb3VzIHByaW50IHByaW50bG4gcHVzaCBwdXRBdCByZWFkIHJlYWRCeXRlcyByZWFkTGluZXMgcmV2ZXJzZSByZXZlcnNlRWFjaCByb3VuZCBzaXplIHNvcnQgc3BsaXRFYWNoTGluZSBzdGVwIHN1Yk1hcCB0aW1lcyB0b0ludGVnZXIgdG9MaXN0IHRva2VuaXplIHVwdG8gd2FpdEZvck9yS2lsbCB3aXRoUHJpbnRXcml0ZXIgd2l0aFJlYWRlciB3aXRoU3RyZWFtIHdpdGhXcml0ZXIgd2l0aFdyaXRlckFwcGVuZCB3cml0ZSB3cml0ZUxpbmUifSwKICAgICAgY29udGFpbnM6IFtlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREUsIGUuQVBPU19TVFJJTkdfTU9ERSwgZS5RVU9URV9TVFJJTkdfTU9ERSwgZS5OVU1CRVJfTU9ERSwgZS5SRUdFWFBfTU9ERV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgibGVzcyIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgbiA9ICIoW1xcdy1dK3xAe1tcXHctXSt9KSIsIGEgPSBbXSwgcyA9IFtdLCB0ID0gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHtjbGFzc05hbWU6ICJzdHJpbmciLCBiZWdpbjogIn4/IiArIGUgKyAiLio/IiArIGV9CiAgICB9LCByID0gZnVuY3Rpb24gKGUsIG4sIGEpIHsKICAgICAgcmV0dXJuIHtjbGFzc05hbWU6IGUsIGJlZ2luOiBuLCByZWxldmFuY2U6IGF9CiAgICB9LCBpID0ge2JlZ2luOiAiXFwoIiwgZW5kOiAiXFwpIiwgY29udGFpbnM6IHMsIHJlbGV2YW5jZTogMH07CiAgICBzLnB1c2goZS5DX0xJTkVfQ09NTUVOVF9NT0RFLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCB0KCInIiksIHQoJyInKSwgZS5DU1NfTlVNQkVSX01PREUsIHsKICAgICAgYmVnaW46ICIodXJsfGRhdGEtdXJpKVxcKCIsCiAgICAgIHN0YXJ0czoge2NsYXNzTmFtZTogInN0cmluZyIsIGVuZDogIltcXClcXG5dIiwgZXhjbHVkZUVuZDogITB9CiAgICB9LCByKCJudW1iZXIiLCAiI1swLTlBLUZhLWZdK1xcYiIpLCBpLCByKCJ2YXJpYWJsZSIsICJAQD9bXFx3LV0rIiwgMTApLCByKCJ2YXJpYWJsZSIsICJAe1tcXHctXSt9IiksIHIoImJ1aWx0X2luIiwgIn4/YFteYF0qP2AiKSwgewogICAgICBjbGFzc05hbWU6ICJhdHRyaWJ1dGUiLAogICAgICBiZWdpbjogIltcXHctXStcXHMqOiIsCiAgICAgIGVuZDogIjoiLAogICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgIGV4Y2x1ZGVFbmQ6ICEwCiAgICB9LCB7Y2xhc3NOYW1lOiAibWV0YSIsIGJlZ2luOiAiIWltcG9ydGFudCJ9KTsKICAgIHZhciBjID0gcy5jb25jYXQoe2JlZ2luOiAieyIsIGVuZDogIn0iLCBjb250YWluczogYX0pLAogICAgICBsID0ge2JlZ2luS2V5d29yZHM6ICJ3aGVuIiwgZW5kc1dpdGhQYXJlbnQ6ICEwLCBjb250YWluczogW3tiZWdpbktleXdvcmRzOiAiYW5kIG5vdCJ9XS5jb25jYXQocyl9LCBvID0gewogICAgICAgIGJlZ2luOiBuICsgIlxccyo6IiwKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgZW5kOiAiWzt9XSIsCiAgICAgICAgcmVsZXZhbmNlOiAwLAogICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgY2xhc3NOYW1lOiAiYXR0cmlidXRlIiwKICAgICAgICAgIGJlZ2luOiBuLAogICAgICAgICAgZW5kOiAiOiIsCiAgICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICAgIHN0YXJ0czoge2VuZHNXaXRoUGFyZW50OiAhMCwgaWxsZWdhbDogIls8PSRdIiwgcmVsZXZhbmNlOiAwLCBjb250YWluczogc30KICAgICAgICB9XQogICAgICB9LCBnID0gewogICAgICAgIGNsYXNzTmFtZTogImtleXdvcmQiLAogICAgICAgIGJlZ2luOiAiQChpbXBvcnR8bWVkaWF8Y2hhcnNldHxmb250LWZhY2V8KC1bYS16XSstKT9rZXlmcmFtZXN8c3VwcG9ydHN8ZG9jdW1lbnR8bmFtZXNwYWNlfHBhZ2V8dmlld3BvcnR8aG9zdClcXGIiLAogICAgICAgIHN0YXJ0czoge2VuZDogIls7e31dIiwgcmV0dXJuRW5kOiAhMCwgY29udGFpbnM6IHMsIHJlbGV2YW5jZTogMH0KICAgICAgfSwgZCA9IHsKICAgICAgICBjbGFzc05hbWU6ICJ2YXJpYWJsZSIsCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46ICJAW1xcdy1dK1xccyo6IiwgcmVsZXZhbmNlOiAxNX0sIHtiZWdpbjogIkBbXFx3LV0rIn1dLAogICAgICAgIHN0YXJ0czoge2VuZDogIls7fV0iLCByZXR1cm5FbmQ6ICEwLCBjb250YWluczogY30KICAgICAgfSwgYiA9IHsKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogIltcXC4jOiZcXFs+XSIsIGVuZDogIls7e31dIn0sIHtiZWdpbjogbiwgZW5kOiAieyJ9XSwKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgcmV0dXJuRW5kOiAhMCwKICAgICAgICBpbGxlZ2FsOiAiWzw9JyRcIl0iLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICBjb250YWluczogW2UuQ19MSU5FX0NPTU1FTlRfTU9ERSwgZS5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgbCwgcigia2V5d29yZCIsICJhbGxcXGIiKSwgcigidmFyaWFibGUiLCAiQHtbXFx3LV0rfSIpLCByKCJzZWxlY3Rvci10YWciLCBuICsgIiU/IiwgMCksIHIoInNlbGVjdG9yLWlkIiwgIiMiICsgbiksIHIoInNlbGVjdG9yLWNsYXNzIiwgIlxcLiIgKyBuLCAwKSwgcigic2VsZWN0b3ItdGFnIiwgIiYiLCAwKSwgewogICAgICAgICAgY2xhc3NOYW1lOiAic2VsZWN0b3ItYXR0ciIsCiAgICAgICAgICBiZWdpbjogIlxcWyIsCiAgICAgICAgICBlbmQ6ICJcXF0iCiAgICAgICAgfSwge2NsYXNzTmFtZTogInNlbGVjdG9yLXBzZXVkbyIsIGJlZ2luOiAvOig6KT9bYS16QS1aMC05XF9cLVwrXChcKSInLl0rL30sIHsKICAgICAgICAgIGJlZ2luOiAiXFwoIiwKICAgICAgICAgIGVuZDogIlxcKSIsCiAgICAgICAgICBjb250YWluczogYwogICAgICAgIH0sIHtiZWdpbjogIiFpbXBvcnRhbnQifV0KICAgICAgfTsKICAgIHJldHVybiBhLnB1c2goZS5DX0xJTkVfQ09NTUVOVF9NT0RFLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCBnLCBkLCBvLCBiKSwgewogICAgICBuYW1lOiAiTGVzcyIsCiAgICAgIGNhc2VfaW5zZW5zaXRpdmU6ICEwLAogICAgICBpbGxlZ2FsOiAiWz0+Jy88KCRcIl0iLAogICAgICBjb250YWluczogYQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJjIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0gZS5yZXF1aXJlTGFuZ3VhZ2UoImMtbGlrZSIpLnJhd0RlZmluaXRpb24oKTsKICAgIHJldHVybiBuLm5hbWUgPSAiQyIsIG4uYWxpYXNlcyA9IFsiYyIsICJoIl0sIG4KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiZWxpeGlyIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0gIlthLXpBLVpfXVthLXpBLVowLTlfLl0qKFxcIXxcXD8pPyIsIGkgPSB7CiAgICAgICRwYXR0ZXJuOiBuLAogICAgICBrZXl3b3JkOiAiYW5kIGZhbHNlIHRoZW4gZGVmaW5lZCBtb2R1bGUgaW4gcmV0dXJuIHJlZG8gcmV0cnkgZW5kIGZvciB0cnVlIHNlbGYgd2hlbiBuZXh0IHVudGlsIGRvIGJlZ2luIHVubGVzcyBuaWwgYnJlYWsgbm90IGNhc2UgY29uZCBhbGlhcyB3aGlsZSBlbnN1cmUgb3IgaW5jbHVkZSB1c2UgYWxpYXMgZm4gcXVvdGUgcmVxdWlyZSBpbXBvcnQgd2l0aHwwIgogICAgfSwgYSA9IHtjbGFzc05hbWU6ICJzdWJzdCIsIGJlZ2luOiAiI1xceyIsIGVuZDogIn0iLCBrZXl3b3JkczogaX0sIHMgPSB7CiAgICAgIGNsYXNzTmFtZTogIm51bWJlciIsCiAgICAgIGJlZ2luOiAiKFxcYjBvWzAtN19dKyl8KFxcYjBiWzAxX10rKXwoXFxiMHhbMC05YS1mQS1GX10rKXwoLT9cXGJbMS05XVswLTlfXSooLlswLTlfXSsoW2VFXVstK10/WzAtOV0rKT8pPykiLAogICAgICByZWxldmFuY2U6IDAKICAgIH0sIGIgPSB7CiAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgIGJlZ2luOiAiflthLXpdKD89Wy98KFt7PFwiJ10pIiwKICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgZW5kc1BhcmVudDogITAsCiAgICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgYV0sCiAgICAgICAgICB2YXJpYW50czogW3tiZWdpbjogLyIvLCBlbmQ6IC8iL30sIHtiZWdpbjogLycvLCBlbmQ6IC8nL30sIHtiZWdpbjogL1wvLywgZW5kOiAvXC8vfSwgewogICAgICAgICAgICBiZWdpbjogL1x8LywKICAgICAgICAgICAgZW5kOiAvXHwvCiAgICAgICAgICB9LCB7YmVnaW46IC9cKC8sIGVuZDogL1wpL30sIHtiZWdpbjogL1xbLywgZW5kOiAvXF0vfSwge2JlZ2luOiAvXHsvLCBlbmQ6IC9cfS99LCB7CiAgICAgICAgICAgIGJlZ2luOiAvPC8sCiAgICAgICAgICAgIGVuZDogLz4vCiAgICAgICAgICB9XQogICAgICAgIH1dCiAgICAgIH1dCiAgICB9LCBkID0gewogICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgYV0sCiAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvIiIiLywgZW5kOiAvIiIiL30sIHtiZWdpbjogLycnJy8sIGVuZDogLycnJy99LCB7CiAgICAgICAgYmVnaW46IC9+UyIiIi8sCiAgICAgICAgZW5kOiAvIiIiLywKICAgICAgICBjb250YWluczogW10KICAgICAgfSwge2JlZ2luOiAvflMiLywgZW5kOiAvIi8sIGNvbnRhaW5zOiBbXX0sIHtiZWdpbjogL35TJycnLywgZW5kOiAvJycnLywgY29udGFpbnM6IFtdfSwgewogICAgICAgIGJlZ2luOiAvflMnLywKICAgICAgICBlbmQ6IC8nLywKICAgICAgICBjb250YWluczogW10KICAgICAgfSwge2JlZ2luOiAvJy8sIGVuZDogLycvfSwge2JlZ2luOiAvIi8sIGVuZDogLyIvfV0KICAgIH0sIHIgPSB7CiAgICAgIGNsYXNzTmFtZTogImZ1bmN0aW9uIiwKICAgICAgYmVnaW5LZXl3b3JkczogImRlZiBkZWZwIGRlZm1hY3JvIiwKICAgICAgZW5kOiAvXEJcYi8sCiAgICAgIGNvbnRhaW5zOiBbZS5pbmhlcml0KGUuVElUTEVfTU9ERSwge2JlZ2luOiBuLCBlbmRzUGFyZW50OiAhMH0pXQogICAgfSwgZyA9IGUuaW5oZXJpdChyLCB7CiAgICAgIGNsYXNzTmFtZTogImNsYXNzIiwKICAgICAgYmVnaW5LZXl3b3JkczogImRlZmltcGwgZGVmbW9kdWxlIGRlZnByb3RvY29sIGRlZnJlY29yZCIsCiAgICAgIGVuZDogL1xiZG9cYnwkfDsvCiAgICB9KSwgdCA9IFtkLCB7CiAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgIGJlZ2luOiAifltBLVpdKD89Wy98KFt7PFwiJ10pIiwKICAgICAgY29udGFpbnM6IFt7YmVnaW46IC8iLywgZW5kOiAvIi99LCB7YmVnaW46IC8nLywgZW5kOiAvJy99LCB7YmVnaW46IC9cLy8sIGVuZDogL1wvL30sIHsKICAgICAgICBiZWdpbjogL1x8LywKICAgICAgICBlbmQ6IC9cfC8KICAgICAgfSwge2JlZ2luOiAvXCgvLCBlbmQ6IC9cKS99LCB7YmVnaW46IC9cWy8sIGVuZDogL1xdL30sIHtiZWdpbjogL1x7LywgZW5kOiAvXH0vfSwge2JlZ2luOiAvXDwvLCBlbmQ6IC9cPi99XQogICAgfSwgYiwgZS5IQVNIX0NPTU1FTlRfTU9ERSwgZywgciwge2JlZ2luOiAiOjoifSwgewogICAgICBjbGFzc05hbWU6ICJzeW1ib2wiLAogICAgICBiZWdpbjogIjooPyFbXFxzOl0pIiwKICAgICAgY29udGFpbnM6IFtkLCB7YmVnaW46ICJbYS16QS1aX11cXHcqWyE/PV0/fFstK35dXFxAfDw8fD4+fD1+fD09PT98PD0+fFs8Pl09P3xcXCpcXCp8Wy0vKyVeJip+YHxdfFxcW1xcXT0/In1dLAogICAgICByZWxldmFuY2U6IDAKICAgIH0sIHtjbGFzc05hbWU6ICJzeW1ib2wiLCBiZWdpbjogbiArICI6KD8hOikiLCByZWxldmFuY2U6IDB9LCBzLCB7CiAgICAgIGNsYXNzTmFtZTogInZhcmlhYmxlIiwKICAgICAgYmVnaW46ICIoXFwkXFxXKXwoKFxcJHxcXEBcXEA/KShcXHcrKSkiCiAgICB9LCB7YmVnaW46ICItPiJ9LCB7CiAgICAgIGJlZ2luOiAiKCIgKyBlLlJFX1NUQVJURVJTX1JFICsgIilcXHMqIiwKICAgICAgY29udGFpbnM6IFtlLkhBU0hfQ09NTUVOVF9NT0RFLCB7CiAgICAgICAgYmVnaW46IC9cLzogKD89XGQrXHMqWyxcXV0pLywKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgY29udGFpbnM6IFtzXQogICAgICB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAicmVnZXhwIiwKICAgICAgICBpbGxlZ2FsOiAiXFxuIiwKICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgYV0sCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46ICIvIiwgZW5kOiAiL1thLXpdKiJ9LCB7YmVnaW46ICIlclxcWyIsIGVuZDogIlxcXVthLXpdKiJ9XQogICAgICB9XSwKICAgICAgcmVsZXZhbmNlOiAwCiAgICB9XTsKICAgIHJldHVybiBhLmNvbnRhaW5zID0gdCwge25hbWU6ICJFbGl4aXIiLCBrZXl3b3JkczogaSwgY29udGFpbnM6IHR9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoImtvdGxpbiIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgbiA9IHsKICAgICAgICBrZXl3b3JkOiAiYWJzdHJhY3QgYXMgdmFsIHZhciB2YXJhcmcgZ2V0IHNldCBjbGFzcyBvYmplY3Qgb3BlbiBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgbm9pbmxpbmUgY3Jvc3NpbmxpbmUgZHluYW1pYyBmaW5hbCBlbnVtIGlmIGVsc2UgZG8gd2hpbGUgZm9yIHdoZW4gdGhyb3cgdHJ5IGNhdGNoIGZpbmFsbHkgaW1wb3J0IHBhY2thZ2UgaXMgaW4gZnVuIG92ZXJyaWRlIGNvbXBhbmlvbiByZWlmaWVkIGlubGluZSBsYXRlaW5pdCBpbml0IGludGVyZmFjZSBhbm5vdGF0aW9uIGRhdGEgc2VhbGVkIGludGVybmFsIGluZml4IG9wZXJhdG9yIG91dCBieSBjb25zdHJ1Y3RvciBzdXBlciB0YWlscmVjIHdoZXJlIGNvbnN0IGlubmVyIHN1c3BlbmQgdHlwZWFsaWFzIGV4dGVybmFsIGV4cGVjdCBhY3R1YWwiLAogICAgICAgIGJ1aWx0X2luOiAiQnl0ZSBTaG9ydCBDaGFyIEludCBMb25nIEJvb2xlYW4gRmxvYXQgRG91YmxlIFZvaWQgVW5pdCBOb3RoaW5nIiwKICAgICAgICBsaXRlcmFsOiAidHJ1ZSBmYWxzZSBudWxsIgogICAgICB9LCBhID0ge2NsYXNzTmFtZTogInN5bWJvbCIsIGJlZ2luOiBlLlVOREVSU0NPUkVfSURFTlRfUkUgKyAiQCJ9LAogICAgICBpID0ge2NsYXNzTmFtZTogInN1YnN0IiwgYmVnaW46ICJcXCR7IiwgZW5kOiAifSIsIGNvbnRhaW5zOiBbZS5DX05VTUJFUl9NT0RFXX0sCiAgICAgIHMgPSB7Y2xhc3NOYW1lOiAidmFyaWFibGUiLCBiZWdpbjogIlxcJCIgKyBlLlVOREVSU0NPUkVfSURFTlRfUkV9LCB0ID0gewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46ICciIiInLCBlbmQ6ICciIiIoPz1bXiJdKScsIGNvbnRhaW5zOiBbcywgaV19LCB7CiAgICAgICAgICBiZWdpbjogIiciLAogICAgICAgICAgZW5kOiAiJyIsCiAgICAgICAgICBpbGxlZ2FsOiAvXG4vLAogICAgICAgICAgY29udGFpbnM6IFtlLkJBQ0tTTEFTSF9FU0NBUEVdCiAgICAgICAgfSwge2JlZ2luOiAnIicsIGVuZDogJyInLCBpbGxlZ2FsOiAvXG4vLCBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgcywgaV19XQogICAgICB9OwogICAgaS5jb250YWlucy5wdXNoKHQpOwogICAgdmFyIHIgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAibWV0YSIsCiAgICAgICAgYmVnaW46ICJAKD86ZmlsZXxwcm9wZXJ0eXxmaWVsZHxnZXR8c2V0fHJlY2VpdmVyfHBhcmFtfHNldHBhcmFtfGRlbGVnYXRlKVxccyo6KD86XFxzKiIgKyBlLlVOREVSU0NPUkVfSURFTlRfUkUgKyAiKT8iCiAgICAgIH0sIGwgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAibWV0YSIsCiAgICAgICAgYmVnaW46ICJAIiArIGUuVU5ERVJTQ09SRV9JREVOVF9SRSwKICAgICAgICBjb250YWluczogW3tiZWdpbjogL1woLywgZW5kOiAvXCkvLCBjb250YWluczogW2UuaW5oZXJpdCh0LCB7Y2xhc3NOYW1lOiAibWV0YS1zdHJpbmcifSldfV0KICAgICAgfSwgYyA9IGUuQ09NTUVOVCgiL1xcKiIsICJcXCovIiwge2NvbnRhaW5zOiBbZS5DX0JMT0NLX0NPTU1FTlRfTU9ERV19KSwKICAgICAgbyA9IHt2YXJpYW50czogW3tjbGFzc05hbWU6ICJ0eXBlIiwgYmVnaW46IGUuVU5ERVJTQ09SRV9JREVOVF9SRX0sIHtiZWdpbjogL1woLywgZW5kOiAvXCkvLCBjb250YWluczogW119XX0sCiAgICAgIGQgPSBvOwogICAgcmV0dXJuIGQudmFyaWFudHNbMV0uY29udGFpbnMgPSBbb10sIG8udmFyaWFudHNbMV0uY29udGFpbnMgPSBbZF0sIHsKICAgICAgbmFtZTogIktvdGxpbiIsCiAgICAgIGFsaWFzZXM6IFsia3QiXSwKICAgICAga2V5d29yZHM6IG4sCiAgICAgIGNvbnRhaW5zOiBbZS5DT01NRU5UKCIvXFwqXFwqIiwgIlxcKi8iLCB7CiAgICAgICAgcmVsZXZhbmNlOiAwLAogICAgICAgIGNvbnRhaW5zOiBbe2NsYXNzTmFtZTogImRvY3RhZyIsIGJlZ2luOiAiQFtBLVphLXpdKyJ9XQogICAgICB9KSwgZS5DX0xJTkVfQ09NTUVOVF9NT0RFLCBjLCB7CiAgICAgICAgY2xhc3NOYW1lOiAia2V5d29yZCIsCiAgICAgICAgYmVnaW46IC9cYihicmVha3xjb250aW51ZXxyZXR1cm58dGhpcylcYi8sCiAgICAgICAgc3RhcnRzOiB7Y29udGFpbnM6IFt7Y2xhc3NOYW1lOiAic3ltYm9sIiwgYmVnaW46IC9AXHcrL31dfQogICAgICB9LCBhLCByLCBsLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgIGJlZ2luS2V5d29yZHM6ICJmdW4iLAogICAgICAgIGVuZDogIlsoXXwkIiwKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAga2V5d29yZHM6IG4sCiAgICAgICAgaWxsZWdhbDogL2Z1blxzKyg8Lio+KT9bXlxzXChdKyhccytbXlxzXChdKylccyo9LywKICAgICAgICByZWxldmFuY2U6IDUsCiAgICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgICBiZWdpbjogZS5VTkRFUlNDT1JFX0lERU5UX1JFICsgIlxccypcXCgiLAogICAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgICAgcmVsZXZhbmNlOiAwLAogICAgICAgICAgY29udGFpbnM6IFtlLlVOREVSU0NPUkVfVElUTEVfTU9ERV0KICAgICAgICB9LCB7Y2xhc3NOYW1lOiAidHlwZSIsIGJlZ2luOiAvPC8sIGVuZDogLz4vLCBrZXl3b3JkczogInJlaWZpZWQiLCByZWxldmFuY2U6IDB9LCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJwYXJhbXMiLAogICAgICAgICAgYmVnaW46IC9cKC8sCiAgICAgICAgICBlbmQ6IC9cKS8sCiAgICAgICAgICBlbmRzUGFyZW50OiAhMCwKICAgICAgICAgIGtleXdvcmRzOiBuLAogICAgICAgICAgcmVsZXZhbmNlOiAwLAogICAgICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgICAgIGJlZ2luOiAvOi8sCiAgICAgICAgICAgIGVuZDogL1s9LFwvXS8sCiAgICAgICAgICAgIGVuZHNXaXRoUGFyZW50OiAhMCwKICAgICAgICAgICAgY29udGFpbnM6IFtvLCBlLkNfTElORV9DT01NRU5UX01PREUsIGNdLAogICAgICAgICAgICByZWxldmFuY2U6IDAKICAgICAgICAgIH0sIGUuQ19MSU5FX0NPTU1FTlRfTU9ERSwgYywgciwgbCwgdCwgZS5DX05VTUJFUl9NT0RFXQogICAgICAgIH0sIGNdCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJjbGFzcyIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogImNsYXNzIGludGVyZmFjZSB0cmFpdCIsCiAgICAgICAgZW5kOiAvWzpceyhdfCQvLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIGlsbGVnYWw6ICJleHRlbmRzIGltcGxlbWVudHMiLAogICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luS2V5d29yZHM6ICJwdWJsaWMgcHJvdGVjdGVkIGludGVybmFsIHByaXZhdGUgY29uc3RydWN0b3IifSwgZS5VTkRFUlNDT1JFX1RJVExFX01PREUsIHsKICAgICAgICAgIGNsYXNzTmFtZTogInR5cGUiLAogICAgICAgICAgYmVnaW46IC88LywKICAgICAgICAgIGVuZDogLz4vLAogICAgICAgICAgZXhjbHVkZUJlZ2luOiAhMCwKICAgICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgfSwge2NsYXNzTmFtZTogInR5cGUiLCBiZWdpbjogL1ssOl1ccyovLCBlbmQ6IC9bPFwoLF18JC8sIGV4Y2x1ZGVCZWdpbjogITAsIHJldHVybkVuZDogITB9LCByLCBsXQogICAgICB9LCB0LCB7Y2xhc3NOYW1lOiAibWV0YSIsIGJlZ2luOiAiXiMhL3Vzci9iaW4vZW52IiwgZW5kOiAiJCIsIGlsbGVnYWw6ICJcbiJ9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAibnVtYmVyIiwKICAgICAgICBiZWdpbjogIlxcYigwW2JCXShbMDFdK1swMV9dK1swMV0rfFswMV0rKXwwW3hYXShbYS1mQS1GMC05XStbYS1mQS1GMC05X10rW2EtZkEtRjAtOV0rfFthLWZBLUYwLTldKyl8KChbXFxkXStbXFxkX10rW1xcZF0rfFtcXGRdKykoXFwuKFtcXGRdK1tcXGRfXStbXFxkXSt8W1xcZF0rKSk/fFxcLihbXFxkXStbXFxkX10rW1xcZF0rfFtcXGRdKykpKFtlRV1bLStdP1xcZCspPylbbExmRl0/IiwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiaW5pIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKCiAgZnVuY3Rpb24gZShlKSB7CiAgICByZXR1cm4gZSA/ICJzdHJpbmciID09IHR5cGVvZiBlID8gZSA6IGUuc291cmNlIDogbnVsbAogIH0KCiAgZnVuY3Rpb24gbiguLi5uKSB7CiAgICByZXR1cm4gbi5tYXAobiA9PiBlKG4pKS5qb2luKCIiKQogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7CiAgICB2YXIgcyA9IHsKICAgICAgY2xhc3NOYW1lOiAibnVtYmVyIiwKICAgICAgcmVsZXZhbmNlOiAwLAogICAgICB2YXJpYW50czogW3tiZWdpbjogLyhbXCtcLV0rKT9bXGRdK19bXGRfXSsvfSwge2JlZ2luOiBhLk5VTUJFUl9SRX1dCiAgICB9LCBpID0gYS5DT01NRU5UKCk7CiAgICBpLnZhcmlhbnRzID0gW3tiZWdpbjogLzsvLCBlbmQ6IC8kL30sIHtiZWdpbjogLyMvLCBlbmQ6IC8kL31dOwogICAgdmFyIHQgPSB7Y2xhc3NOYW1lOiAidmFyaWFibGUiLCB2YXJpYW50czogW3tiZWdpbjogL1wkW1x3XGQiXVtcd1xkX10qL30sIHtiZWdpbjogL1wkXHsoLio/KX0vfV19LAogICAgICByID0ge2NsYXNzTmFtZTogImxpdGVyYWwiLCBiZWdpbjogL1xib258b2ZmfHRydWV8ZmFsc2V8eWVzfG5vXGIvfSwgbCA9IHsKICAgICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICAgIGNvbnRhaW5zOiBbYS5CQUNLU0xBU0hfRVNDQVBFXSwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogIicnJyIsIGVuZDogIicnJyIsIHJlbGV2YW5jZTogMTB9LCB7CiAgICAgICAgICBiZWdpbjogJyIiIicsCiAgICAgICAgICBlbmQ6ICciIiInLAogICAgICAgICAgcmVsZXZhbmNlOiAxMAogICAgICAgIH0sIHtiZWdpbjogJyInLCBlbmQ6ICciJ30sIHtiZWdpbjogIiciLCBlbmQ6ICInIn1dCiAgICAgIH0sIGMgPSB7YmVnaW46IC9cWy8sIGVuZDogL1xdLywgY29udGFpbnM6IFtpLCByLCB0LCBsLCBzLCAic2VsZiJdLCByZWxldmFuY2U6IDB9LAogICAgICBnID0gIigiICsgWy9bQS1aYS16MC05Xy1dKy8sIC8iKFxcInxbXiJdKSoiLywgLydbXiddKicvXS5tYXAobiA9PiBlKG4pKS5qb2luKCJ8IikgKyAiKSI7CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiVE9NTCwgYWxzbyBJTkkiLAogICAgICBhbGlhc2VzOiBbInRvbWwiXSwKICAgICAgY2FzZV9pbnNlbnNpdGl2ZTogITAsCiAgICAgIGlsbGVnYWw6IC9cUy8sCiAgICAgIGNvbnRhaW5zOiBbaSwgewogICAgICAgIGNsYXNzTmFtZTogInNlY3Rpb24iLAogICAgICAgIGJlZ2luOiAvXFsrLywKICAgICAgICBlbmQ6IC9cXSsvCiAgICAgIH0sIHsKICAgICAgICBiZWdpbjogbihnLCAiKFxccypcXC5cXHMqIiwgZywgIikqIiwgbigiKD89IiwgL1xzKj1ccypbXiNcc10vLCAiKSIpKSwKICAgICAgICBjbGFzc05hbWU6ICJhdHRyIiwKICAgICAgICBzdGFydHM6IHtlbmQ6IC8kLywgY29udGFpbnM6IFtpLCBjLCByLCB0LCBsLCBzXX0KICAgICAgfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgicGxhaW50ZXh0IiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKHQpIHsKICAgIHJldHVybiB7bmFtZTogIlBsYWluIHRleHQiLCBhbGlhc2VzOiBbInRleHQiLCAidHh0Il0sIGRpc2FibGVBdXRvZGV0ZWN0OiAhMH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgieG1sIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0ge2NsYXNzTmFtZTogInN5bWJvbCIsIGJlZ2luOiAiJlthLXpdKzt8JiNbMC05XSs7fCYjeFthLWYwLTldKzsifSwKICAgICAgYSA9IHtiZWdpbjogIlxccyIsIGNvbnRhaW5zOiBbe2NsYXNzTmFtZTogIm1ldGEta2V5d29yZCIsIGJlZ2luOiAiIz9bYS16X11bYS16MS05Xy1dKyIsIGlsbGVnYWw6ICJcXG4ifV19LAogICAgICBzID0gZS5pbmhlcml0KGEsIHtiZWdpbjogIlxcKCIsIGVuZDogIlxcKSJ9KSwgdCA9IGUuaW5oZXJpdChlLkFQT1NfU1RSSU5HX01PREUsIHtjbGFzc05hbWU6ICJtZXRhLXN0cmluZyJ9KSwKICAgICAgaSA9IGUuaW5oZXJpdChlLlFVT1RFX1NUUklOR19NT0RFLCB7Y2xhc3NOYW1lOiAibWV0YS1zdHJpbmcifSksIGMgPSB7CiAgICAgICAgZW5kc1dpdGhQYXJlbnQ6ICEwLAogICAgICAgIGlsbGVnYWw6IC88LywKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgY29udGFpbnM6IFt7Y2xhc3NOYW1lOiAiYXR0ciIsIGJlZ2luOiAiW0EtWmEtejAtOVxcLl86LV0rIiwgcmVsZXZhbmNlOiAwfSwgewogICAgICAgICAgYmVnaW46IC89XHMqLywKICAgICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICAgICAgICBlbmRzUGFyZW50OiAhMCwKICAgICAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46IC8iLywgZW5kOiAvIi8sIGNvbnRhaW5zOiBbbl19LCB7CiAgICAgICAgICAgICAgYmVnaW46IC8nLywKICAgICAgICAgICAgICBlbmQ6IC8nLywKICAgICAgICAgICAgICBjb250YWluczogW25dCiAgICAgICAgICAgIH0sIHtiZWdpbjogL1teXHMiJz08PmBdKy99XQogICAgICAgICAgfV0KICAgICAgICB9XQogICAgICB9OwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIkhUTUwsIFhNTCIsCiAgICAgIGFsaWFzZXM6IFsiaHRtbCIsICJ4aHRtbCIsICJyc3MiLCAiYXRvbSIsICJ4amIiLCAieHNkIiwgInhzbCIsICJwbGlzdCIsICJ3c2YiLCAic3ZnIl0sCiAgICAgIGNhc2VfaW5zZW5zaXRpdmU6ICEwLAogICAgICBjb250YWluczogW3sKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICBiZWdpbjogIjwhW2Etel0iLAogICAgICAgIGVuZDogIj4iLAogICAgICAgIHJlbGV2YW5jZTogMTAsCiAgICAgICAgY29udGFpbnM6IFthLCBpLCB0LCBzLCB7CiAgICAgICAgICBiZWdpbjogIlxcWyIsCiAgICAgICAgICBlbmQ6ICJcXF0iLAogICAgICAgICAgY29udGFpbnM6IFt7Y2xhc3NOYW1lOiAibWV0YSIsIGJlZ2luOiAiPCFbYS16XSIsIGVuZDogIj4iLCBjb250YWluczogW2EsIHMsIGksIHRdfV0KICAgICAgICB9XQogICAgICB9LCBlLkNPTU1FTlQoIlx4M2MhLS0iLCAiLS1ceDNlIiwge3JlbGV2YW5jZTogMTB9KSwgewogICAgICAgIGJlZ2luOiAiPFxcIVxcW0NEQVRBXFxbIiwKICAgICAgICBlbmQ6ICJcXF1cXF0+IiwKICAgICAgICByZWxldmFuY2U6IDEwCiAgICAgIH0sIG4sIHtjbGFzc05hbWU6ICJtZXRhIiwgYmVnaW46IC88XD94bWwvLCBlbmQ6IC9cPz4vLCByZWxldmFuY2U6IDEwfSwgewogICAgICAgIGNsYXNzTmFtZTogInRhZyIsCiAgICAgICAgYmVnaW46ICI8c3R5bGUoPz1cXHN8PikiLAogICAgICAgIGVuZDogIj4iLAogICAgICAgIGtleXdvcmRzOiB7bmFtZTogInN0eWxlIn0sCiAgICAgICAgY29udGFpbnM6IFtjXSwKICAgICAgICBzdGFydHM6IHtlbmQ6ICI8L3N0eWxlPiIsIHJldHVybkVuZDogITAsIHN1Ykxhbmd1YWdlOiBbImNzcyIsICJ4bWwiXX0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogInRhZyIsCiAgICAgICAgYmVnaW46ICI8c2NyaXB0KD89XFxzfD4pIiwKICAgICAgICBlbmQ6ICI+IiwKICAgICAgICBrZXl3b3Jkczoge25hbWU6ICJzY3JpcHQifSwKICAgICAgICBjb250YWluczogW2NdLAogICAgICAgIHN0YXJ0czoge2VuZDogIjxcL3NjcmlwdD4iLCByZXR1cm5FbmQ6ICEwLCBzdWJMYW5ndWFnZTogWyJqYXZhc2NyaXB0IiwgImhhbmRsZWJhcnMiLCAieG1sIl19CiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJ0YWciLAogICAgICAgIGJlZ2luOiAiPC8/IiwKICAgICAgICBlbmQ6ICIvPz4iLAogICAgICAgIGNvbnRhaW5zOiBbe2NsYXNzTmFtZTogIm5hbWUiLCBiZWdpbjogL1teXC8+PFxzXSsvLCByZWxldmFuY2U6IDB9LCBjXQogICAgICB9XQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJwaHAiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIHIgPSB7YmVnaW46ICJcXCQrW2EtekEtWl9/LcO/XVthLXpBLVowLTlffy3Dv10qIn0sCiAgICAgIHQgPSB7Y2xhc3NOYW1lOiAibWV0YSIsIHZhcmlhbnRzOiBbe2JlZ2luOiAvPFw/cGhwLywgcmVsZXZhbmNlOiAxMH0sIHtiZWdpbjogLzxcP1s9XT8vfSwge2JlZ2luOiAvXD8+L31dfSwKICAgICAgYSA9IHtjbGFzc05hbWU6ICJzdWJzdCIsIHZhcmlhbnRzOiBbe2JlZ2luOiAvXCRcdysvfSwge2JlZ2luOiAvXHtcJC8sIGVuZDogL1x9L31dfSwKICAgICAgbiA9IGUuaW5oZXJpdChlLkFQT1NfU1RSSU5HX01PREUsIHtpbGxlZ2FsOiBudWxsfSksCiAgICAgIGkgPSBlLmluaGVyaXQoZS5RVU9URV9TVFJJTkdfTU9ERSwge2lsbGVnYWw6IG51bGwsIGNvbnRhaW5zOiBlLlFVT1RFX1NUUklOR19NT0RFLmNvbnRhaW5zLmNvbmNhdChhKX0pLAogICAgICBvID0gZS5FTkRfU0FNRV9BU19CRUdJTih7CiAgICAgICAgYmVnaW46IC88PDxbIFx0XSooXHcrKVxuLywKICAgICAgICBlbmQ6IC9bIFx0XSooXHcrKVxiLywKICAgICAgICBjb250YWluczogZS5RVU9URV9TVFJJTkdfTU9ERS5jb250YWlucy5jb25jYXQoYSkKICAgICAgfSksIGwgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgdF0sCiAgICAgICAgdmFyaWFudHM6IFtlLmluaGVyaXQobiwge2JlZ2luOiAiYiciLCBlbmQ6ICInIn0pLCBlLmluaGVyaXQoaSwge2JlZ2luOiAnYiInLCBlbmQ6ICciJ30pLCBpLCBuLCBvXQogICAgICB9LCBzID0ge3ZhcmlhbnRzOiBbZS5CSU5BUllfTlVNQkVSX01PREUsIGUuQ19OVU1CRVJfTU9ERV19LCBjID0gewogICAgICAgIGtleXdvcmQ6ICJfX0NMQVNTX18gX19ESVJfXyBfX0ZJTEVfXyBfX0ZVTkNUSU9OX18gX19MSU5FX18gX19NRVRIT0RfXyBfX05BTUVTUEFDRV9fIF9fVFJBSVRfXyBkaWUgZWNobyBleGl0IGluY2x1ZGUgaW5jbHVkZV9vbmNlIHByaW50IHJlcXVpcmUgcmVxdWlyZV9vbmNlIGFycmF5IGFic3RyYWN0IGFuZCBhcyBiaW5hcnkgYm9vbCBib29sZWFuIGJyZWFrIGNhbGxhYmxlIGNhc2UgY2F0Y2ggY2xhc3MgY2xvbmUgY29uc3QgY29udGludWUgZGVjbGFyZSBkZWZhdWx0IGRvIGRvdWJsZSBlbHNlIGVsc2VpZiBlbXB0eSBlbmRkZWNsYXJlIGVuZGZvciBlbmRmb3JlYWNoIGVuZGlmIGVuZHN3aXRjaCBlbmR3aGlsZSBldmFsIGV4dGVuZHMgZmluYWwgZmluYWxseSBmbG9hdCBmb3IgZm9yZWFjaCBmcm9tIGdsb2JhbCBnb3RvIGlmIGltcGxlbWVudHMgaW5zdGFuY2VvZiBpbnN0ZWFkb2YgaW50IGludGVnZXIgaW50ZXJmYWNlIGlzc2V0IGl0ZXJhYmxlIGxpc3QgbmV3IG9iamVjdCBvciBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgcmVhbCByZXR1cm4gc3RyaW5nIHN3aXRjaCB0aHJvdyB0cmFpdCB0cnkgdW5zZXQgdXNlIHZhciB2b2lkIHdoaWxlIHhvciB5aWVsZCIsCiAgICAgICAgbGl0ZXJhbDogImZhbHNlIG51bGwgdHJ1ZSIsCiAgICAgICAgYnVpbHRfaW46ICJFcnJvcnwwIEFwcGVuZEl0ZXJhdG9yIEFyZ3VtZW50Q291bnRFcnJvciBBcml0aG1ldGljRXJyb3IgQXJyYXlJdGVyYXRvciBBcnJheU9iamVjdCBBc3NlcnRpb25FcnJvciBCYWRGdW5jdGlvbkNhbGxFeGNlcHRpb24gQmFkTWV0aG9kQ2FsbEV4Y2VwdGlvbiBDYWNoaW5nSXRlcmF0b3IgQ2FsbGJhY2tGaWx0ZXJJdGVyYXRvciBDb21waWxlRXJyb3IgQ291bnRhYmxlIERpcmVjdG9yeUl0ZXJhdG9yIERpdmlzaW9uQnlaZXJvRXJyb3IgRG9tYWluRXhjZXB0aW9uIEVtcHR5SXRlcmF0b3IgRXJyb3JFeGNlcHRpb24gRXhjZXB0aW9uIEZpbGVzeXN0ZW1JdGVyYXRvciBGaWx0ZXJJdGVyYXRvciBHbG9iSXRlcmF0b3IgSW5maW5pdGVJdGVyYXRvciBJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24gSXRlcmF0b3JJdGVyYXRvciBMZW5ndGhFeGNlcHRpb24gTGltaXRJdGVyYXRvciBMb2dpY0V4Y2VwdGlvbiBNdWx0aXBsZUl0ZXJhdG9yIE5vUmV3aW5kSXRlcmF0b3IgT3V0T2ZCb3VuZHNFeGNlcHRpb24gT3V0T2ZSYW5nZUV4Y2VwdGlvbiBPdXRlckl0ZXJhdG9yIE92ZXJmbG93RXhjZXB0aW9uIFBhcmVudEl0ZXJhdG9yIFBhcnNlRXJyb3IgUmFuZ2VFeGNlcHRpb24gUmVjdXJzaXZlQXJyYXlJdGVyYXRvciBSZWN1cnNpdmVDYWNoaW5nSXRlcmF0b3IgUmVjdXJzaXZlQ2FsbGJhY2tGaWx0ZXJJdGVyYXRvciBSZWN1cnNpdmVEaXJlY3RvcnlJdGVyYXRvciBSZWN1cnNpdmVGaWx0ZXJJdGVyYXRvciBSZWN1cnNpdmVJdGVyYXRvciBSZWN1cnNpdmVJdGVyYXRvckl0ZXJhdG9yIFJlY3Vyc2l2ZVJlZ2V4SXRlcmF0b3IgUmVjdXJzaXZlVHJlZUl0ZXJhdG9yIFJlZ2V4SXRlcmF0b3IgUnVudGltZUV4Y2VwdGlvbiBTZWVrYWJsZUl0ZXJhdG9yIFNwbERvdWJseUxpbmtlZExpc3QgU3BsRmlsZUluZm8gU3BsRmlsZU9iamVjdCBTcGxGaXhlZEFycmF5IFNwbEhlYXAgU3BsTWF4SGVhcCBTcGxNaW5IZWFwIFNwbE9iamVjdFN0b3JhZ2UgU3BsT2JzZXJ2ZXIgU3BsT2JzZXJ2ZXIgU3BsUHJpb3JpdHlRdWV1ZSBTcGxRdWV1ZSBTcGxTdGFjayBTcGxTdWJqZWN0IFNwbFN1YmplY3QgU3BsVGVtcEZpbGVPYmplY3QgVHlwZUVycm9yIFVuZGVyZmxvd0V4Y2VwdGlvbiBVbmV4cGVjdGVkVmFsdWVFeGNlcHRpb24gQXJyYXlBY2Nlc3MgQ2xvc3VyZSBHZW5lcmF0b3IgSXRlcmF0b3IgSXRlcmF0b3JBZ2dyZWdhdGUgU2VyaWFsaXphYmxlIFRocm93YWJsZSBUcmF2ZXJzYWJsZSBXZWFrUmVmZXJlbmNlIERpcmVjdG9yeSBfX1BIUF9JbmNvbXBsZXRlX0NsYXNzIHBhcmVudCBwaHBfdXNlcl9maWx0ZXIgc2VsZiBzdGF0aWMgc3RkQ2xhc3MiCiAgICAgIH07CiAgICByZXR1cm4gewogICAgICBhbGlhc2VzOiBbInBocCIsICJwaHAzIiwgInBocDQiLCAicGhwNSIsICJwaHA2IiwgInBocDciXSwKICAgICAgY2FzZV9pbnNlbnNpdGl2ZTogITAsCiAgICAgIGtleXdvcmRzOiBjLAogICAgICBjb250YWluczogW2UuSEFTSF9DT01NRU5UX01PREUsIGUuQ09NTUVOVCgiLy8iLCAiJCIsIHtjb250YWluczogW3RdfSksIGUuQ09NTUVOVCgiL1xcKiIsICJcXCovIiwgewogICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgY2xhc3NOYW1lOiAiZG9jdGFnIiwKICAgICAgICAgIGJlZ2luOiAiQFtBLVphLXpdKyIKICAgICAgICB9XQogICAgICB9KSwgZS5DT01NRU5UKCJfX2hhbHRfY29tcGlsZXIuKz87IiwgITEsIHsKICAgICAgICBlbmRzV2l0aFBhcmVudDogITAsCiAgICAgICAga2V5d29yZHM6ICJfX2hhbHRfY29tcGlsZXIiCiAgICAgIH0pLCB0LCB7CiAgICAgICAgY2xhc3NOYW1lOiAia2V5d29yZCIsCiAgICAgICAgYmVnaW46IC9cJHRoaXNcYi8KICAgICAgfSwgciwge2JlZ2luOiAvKDo6fC0+KStbYS16QS1aX1x4N2YtXHhmZl1bYS16QS1aMC05X1x4N2YtXHhmZl0qL30sIHsKICAgICAgICBjbGFzc05hbWU6ICJmdW5jdGlvbiIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogImZuIGZ1bmN0aW9uIiwKICAgICAgICBlbmQ6IC9bO3tdLywKICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICBpbGxlZ2FsOiAiWyQlXFxbXSIsCiAgICAgICAgY29udGFpbnM6IFtlLlVOREVSU0NPUkVfVElUTEVfTU9ERSwgewogICAgICAgICAgY2xhc3NOYW1lOiAicGFyYW1zIiwKICAgICAgICAgIGJlZ2luOiAiXFwoIiwKICAgICAgICAgIGVuZDogIlxcKSIsCiAgICAgICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgICBrZXl3b3JkczogYywKICAgICAgICAgIGNvbnRhaW5zOiBbInNlbGYiLCByLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCBsLCBzXQogICAgICAgIH1dCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJjbGFzcyIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogImNsYXNzIGludGVyZmFjZSIsCiAgICAgICAgZW5kOiAieyIsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgaWxsZWdhbDogL1s6XChcJCJdLywKICAgICAgICBjb250YWluczogW3tiZWdpbktleXdvcmRzOiAiZXh0ZW5kcyBpbXBsZW1lbnRzIn0sIGUuVU5ERVJTQ09SRV9USVRMRV9NT0RFXQogICAgICB9LCB7CiAgICAgICAgYmVnaW5LZXl3b3JkczogIm5hbWVzcGFjZSIsCiAgICAgICAgZW5kOiAiOyIsCiAgICAgICAgaWxsZWdhbDogL1tcLiddLywKICAgICAgICBjb250YWluczogW2UuVU5ERVJTQ09SRV9USVRMRV9NT0RFXQogICAgICB9LCB7YmVnaW5LZXl3b3JkczogInVzZSIsIGVuZDogIjsiLCBjb250YWluczogW2UuVU5ERVJTQ09SRV9USVRMRV9NT0RFXX0sIHtiZWdpbjogIj0+In0sIGwsIHNdCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInBocC10ZW1wbGF0ZSIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChuKSB7CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiUEhQIHRlbXBsYXRlIiwKICAgICAgc3ViTGFuZ3VhZ2U6ICJ4bWwiLAogICAgICBjb250YWluczogW3sKICAgICAgICBiZWdpbjogLzxcPyhwaHB8PSk/LywKICAgICAgICBlbmQ6IC9cPz4vLAogICAgICAgIHN1Ykxhbmd1YWdlOiAicGhwIiwKICAgICAgICBjb250YWluczogW3tiZWdpbjogIi9cXCoiLCBlbmQ6ICJcXCovIiwgc2tpcDogITB9LCB7YmVnaW46ICdiIicsIGVuZDogJyInLCBza2lwOiAhMH0sIHsKICAgICAgICAgIGJlZ2luOiAiYiciLAogICAgICAgICAgZW5kOiAiJyIsCiAgICAgICAgICBza2lwOiAhMAogICAgICAgIH0sIG4uaW5oZXJpdChuLkFQT1NfU1RSSU5HX01PREUsIHsKICAgICAgICAgIGlsbGVnYWw6IG51bGwsCiAgICAgICAgICBjbGFzc05hbWU6IG51bGwsCiAgICAgICAgICBjb250YWluczogbnVsbCwKICAgICAgICAgIHNraXA6ICEwCiAgICAgICAgfSksIG4uaW5oZXJpdChuLlFVT1RFX1NUUklOR19NT0RFLCB7aWxsZWdhbDogbnVsbCwgY2xhc3NOYW1lOiBudWxsLCBjb250YWluczogbnVsbCwgc2tpcDogITB9KV0KICAgICAgfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiYmFzaCIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICBjb25zdCBzID0ge307CiAgICBPYmplY3QuYXNzaWduKHMsIHsKICAgICAgY2xhc3NOYW1lOiAidmFyaWFibGUiLAogICAgICB2YXJpYW50czogW3tiZWdpbjogL1wkW1x3XGQjQF1bXHdcZF9dKi99LCB7CiAgICAgICAgYmVnaW46IC9cJFx7LywKICAgICAgICBlbmQ6IC9cfS8sCiAgICAgICAgY29udGFpbnM6IFt7YmVnaW46IC86LS8sIGNvbnRhaW5zOiBbc119XQogICAgICB9XQogICAgfSk7CiAgICBjb25zdCB0ID0ge2NsYXNzTmFtZTogInN1YnN0IiwgYmVnaW46IC9cJFwoLywgZW5kOiAvXCkvLCBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRV19LAogICAgICBuID0ge2NsYXNzTmFtZTogInN0cmluZyIsIGJlZ2luOiAvIi8sIGVuZDogLyIvLCBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgcywgdF19OwogICAgdC5jb250YWlucy5wdXNoKG4pOwogICAgY29uc3QgYSA9IHsKICAgICAgYmVnaW46IC9cJFwoXCgvLAogICAgICBlbmQ6IC9cKVwpLywKICAgICAgY29udGFpbnM6IFt7YmVnaW46IC9cZCsjWzAtOWEtZl0rLywgY2xhc3NOYW1lOiAibnVtYmVyIn0sIGUuTlVNQkVSX01PREUsIHNdCiAgICB9LCBpID0gZS5TSEVCQU5HKHtiaW5hcnk6ICIoZmlzaHxiYXNofHpzaHxzaHxjc2h8a3NofHRjc2h8ZGFzaHxzY3NoKSIsIHJlbGV2YW5jZTogMTB9KSwgYyA9IHsKICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICBiZWdpbjogL1x3W1x3XGRfXSpccypcKFxzKlwpXHMqXHsvLAogICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgIGNvbnRhaW5zOiBbZS5pbmhlcml0KGUuVElUTEVfTU9ERSwge2JlZ2luOiAvXHdbXHdcZF9dKi99KV0sCiAgICAgIHJlbGV2YW5jZTogMAogICAgfTsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJCYXNoIiwKICAgICAgYWxpYXNlczogWyJzaCIsICJ6c2giXSwKICAgICAga2V5d29yZHM6IHsKICAgICAgICAkcGF0dGVybjogL1xiLT9bYS16XC5fLV0rXGIvLAogICAgICAgIGtleXdvcmQ6ICJpZiB0aGVuIGVsc2UgZWxpZiBmaSBmb3Igd2hpbGUgaW4gZG8gZG9uZSBjYXNlIGVzYWMgZnVuY3Rpb24iLAogICAgICAgIGxpdGVyYWw6ICJ0cnVlIGZhbHNlIiwKICAgICAgICBidWlsdF9pbjogImJyZWFrIGNkIGNvbnRpbnVlIGV2YWwgZXhlYyBleGl0IGV4cG9ydCBnZXRvcHRzIGhhc2ggcHdkIHJlYWRvbmx5IHJldHVybiBzaGlmdCB0ZXN0IHRpbWVzIHRyYXAgdW1hc2sgdW5zZXQgYWxpYXMgYmluZCBidWlsdGluIGNhbGxlciBjb21tYW5kIGRlY2xhcmUgZWNobyBlbmFibGUgaGVscCBsZXQgbG9jYWwgbG9nb3V0IG1hcGZpbGUgcHJpbnRmIHJlYWQgcmVhZGFycmF5IHNvdXJjZSB0eXBlIHR5cGVzZXQgdWxpbWl0IHVuYWxpYXMgc2V0IHNob3B0IGF1dG9sb2FkIGJnIGJpbmRrZXkgYnllIGNhcCBjaGRpciBjbG9uZSBjb21wYXJndW1lbnRzIGNvbXBjYWxsIGNvbXBjdGwgY29tcGRlc2NyaWJlIGNvbXBmaWxlcyBjb21wZ3JvdXBzIGNvbXBxdW90ZSBjb21wdGFncyBjb21wdHJ5IGNvbXB2YWx1ZXMgZGlycyBkaXNhYmxlIGRpc293biBlY2hvdGMgZWNob3RpIGVtdWxhdGUgZmMgZmcgZmxvYXQgZnVuY3Rpb25zIGdldGNhcCBnZXRsbiBoaXN0b3J5IGludGVnZXIgam9icyBraWxsIGxpbWl0IGxvZyBub2dsb2IgcG9wZCBwcmludCBwdXNoZCBwdXNobG4gcmVoYXNoIHNjaGVkIHNldGNhcCBzZXRvcHQgc3RhdCBzdXNwZW5kIHR0eWN0bCB1bmZ1bmN0aW9uIHVuaGFzaCB1bmxpbWl0IHVuc2V0b3B0IHZhcmVkIHdhaXQgd2hlbmNlIHdoZXJlIHdoaWNoIHpjb21waWxlIHpmb3JtYXQgemZ0cCB6bGUgem1vZGxvYWQgenBhcnNlb3B0cyB6cHJvZiB6cHR5IHpyZWdleHBhcnNlIHpzb2NrZXQgenN0eWxlIHp0Y3AiLAogICAgICAgIF86ICItbmUgLWVxIC1sdCAtZ3QgLWYgLWQgLWUgLXMgLWwgLWEiCiAgICAgIH0sCiAgICAgIGNvbnRhaW5zOiBbaSwgZS5TSEVCQU5HKCksIGMsIGEsIGUuSEFTSF9DT01NRU5UX01PREUsIG4sIHsKICAgICAgICBjbGFzc05hbWU6ICIiLAogICAgICAgIGJlZ2luOiAvXFwiLwogICAgICB9LCB7Y2xhc3NOYW1lOiAic3RyaW5nIiwgYmVnaW46IC8nLywgZW5kOiAvJy99LCBzXQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJnbyIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgbiA9IHsKICAgICAga2V5d29yZDogImJyZWFrIGRlZmF1bHQgZnVuYyBpbnRlcmZhY2Ugc2VsZWN0IGNhc2UgbWFwIHN0cnVjdCBjaGFuIGVsc2UgZ290byBwYWNrYWdlIHN3aXRjaCBjb25zdCBmYWxsdGhyb3VnaCBpZiByYW5nZSB0eXBlIGNvbnRpbnVlIGZvciBpbXBvcnQgcmV0dXJuIHZhciBnbyBkZWZlciBib29sIGJ5dGUgY29tcGxleDY0IGNvbXBsZXgxMjggZmxvYXQzMiBmbG9hdDY0IGludDggaW50MTYgaW50MzIgaW50NjQgc3RyaW5nIHVpbnQ4IHVpbnQxNiB1aW50MzIgdWludDY0IGludCB1aW50IHVpbnRwdHIgcnVuZSIsCiAgICAgIGxpdGVyYWw6ICJ0cnVlIGZhbHNlIGlvdGEgbmlsIiwKICAgICAgYnVpbHRfaW46ICJhcHBlbmQgY2FwIGNsb3NlIGNvbXBsZXggY29weSBpbWFnIGxlbiBtYWtlIG5ldyBwYW5pYyBwcmludCBwcmludGxuIHJlYWwgcmVjb3ZlciBkZWxldGUiCiAgICB9OwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIkdvIiwKICAgICAgYWxpYXNlczogWyJnb2xhbmciXSwKICAgICAga2V5d29yZHM6IG4sCiAgICAgIGlsbGVnYWw6ICI8LyIsCiAgICAgIGNvbnRhaW5zOiBbZS5DX0xJTkVfQ09NTUVOVF9NT0RFLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCB7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICB2YXJpYW50czogW2UuUVVPVEVfU1RSSU5HX01PREUsIGUuQVBPU19TVFJJTkdfTU9ERSwge2JlZ2luOiAiYCIsIGVuZDogImAifV0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogIm51bWJlciIsCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46IGUuQ19OVU1CRVJfUkUgKyAiW2ldIiwgcmVsZXZhbmNlOiAxfSwgZS5DX05VTUJFUl9NT0RFXQogICAgICB9LCB7YmVnaW46IC86PS99LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgIGJlZ2luS2V5d29yZHM6ICJmdW5jIiwKICAgICAgICBlbmQ6ICJcXHMqKFxce3wkKSIsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgY29udGFpbnM6IFtlLlRJVExFX01PREUsIHtjbGFzc05hbWU6ICJwYXJhbXMiLCBiZWdpbjogL1woLywgZW5kOiAvXCkvLCBrZXl3b3JkczogbiwgaWxsZWdhbDogL1siJ10vfV0KICAgICAgfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiY3BwIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBpID0gZS5yZXF1aXJlTGFuZ3VhZ2UoImMtbGlrZSIpLnJhd0RlZmluaXRpb24oKTsKICAgIHJldHVybiBpLmRpc2FibGVBdXRvZGV0ZWN0ID0gITEsIGkubmFtZSA9ICJDKysiLCBpLmFsaWFzZXMgPSBbImNjIiwgImMrKyIsICJoKysiLCAiaHBwIiwgImhoIiwgImh4eCIsICJjeHgiXSwgaQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJwZXJsIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0gewogICAgICAgICRwYXR0ZXJuOiAvW1x3Ll0rLywKICAgICAgICBrZXl3b3JkOiAiZ2V0cHdlbnQgZ2V0c2VydmVudCBxdW90ZW1ldGEgbXNncmN2IHNjYWxhciBraWxsIGRibWNsb3NlIHVuZGVmIGxjIG1hIHN5c3dyaXRlIHRyIHNlbmQgdW1hc2sgc3lzb3BlbiBzaG13cml0ZSB2ZWMgcXggdXRpbWUgbG9jYWwgb2N0IHNlbWN0bCBsb2NhbHRpbWUgcmVhZHBpcGUgZG8gcmV0dXJuIGZvcm1hdCByZWFkIHNwcmludGYgZGJtb3BlbiBwb3AgZ2V0cGdycCBub3QgZ2V0cHduYW0gcmV3aW5kZGlyIHFxIGZpbGVubyBxdyBlbmRwcm90b2VudCB3YWl0IHNldGhvc3RlbnQgYmxlc3Mgc3wwIG9wZW5kaXIgY29udGludWUgZWFjaCBzbGVlcCBlbmRncmVudCBzaHV0ZG93biBkdW1wIGNob21wIGNvbm5lY3QgZ2V0c29ja25hbWUgZGllIHNvY2tldHBhaXIgY2xvc2UgZmxvY2sgZXhpc3RzIGluZGV4IHNobWdldCBzdWIgZm9yIGVuZHB3ZW50IHJlZG8gbHN0YXQgbXNnY3RsIHNldHBncnAgYWJzIGV4aXQgc2VsZWN0IHByaW50IHJlZiBnZXRob3N0YnlhZGRyIHVuc2hpZnQgZmNudGwgc3lzY2FsbCBnb3RvIGdldG5ldGJ5YWRkciBqb2luIGdtdGltZSBzeW1saW5rIHNlbWdldCBzcGxpY2UgeHwwIGdldHBlZXJuYW1lIHJlY3YgbG9nIHNldHNvY2tvcHQgY29zIGxhc3QgcmV2ZXJzZSBnZXRob3N0YnluYW1lIGdldGdybmFtIHN0dWR5IGZvcm1saW5lIGVuZGhvc3RlbnQgdGltZXMgY2hvcCBsZW5ndGggZ2V0aG9zdGVudCBnZXRuZXRlbnQgcGFjayBnZXRwcm90b2VudCBnZXRzZXJ2YnluYW1lIHJhbmQgbWtkaXIgcG9zIGNobW9kIHl8MCBzdWJzdHIgZW5kbmV0ZW50IHByaW50ZiBuZXh0IG9wZW4gbXNnc25kIHJlYWRkaXIgdXNlIHVubGluayBnZXRzb2Nrb3B0IGdldHByaW9yaXR5IHJpbmRleCB3YW50YXJyYXkgaGV4IHN5c3RlbSBnZXRzZXJ2Ynlwb3J0IGVuZHNlcnZlbnQgaW50IGNociB1bnRpZSBybWRpciBwcm90b3R5cGUgdGVsbCBsaXN0ZW4gZm9yayBzaG1yZWFkIHVjZmlyc3Qgc2V0cHJvdG9lbnQgZWxzZSBzeXNzZWVrIGxpbmsgZ2V0Z3JnaWQgc2htY3RsIHdhaXRwaWQgdW5wYWNrIGdldG5ldGJ5bmFtZSByZXNldCBjaGRpciBncmVwIHNwbGl0IHJlcXVpcmUgY2FsbGVyIGxjZmlyc3QgdW50aWwgd2FybiB3aGlsZSB2YWx1ZXMgc2hpZnQgdGVsbGRpciBnZXRwd3VpZCBteSBnZXRwcm90b2J5bnVtYmVyIGRlbGV0ZSBhbmQgc29ydCB1YyBkZWZpbmVkIHNyYW5kIGFjY2VwdCBwYWNrYWdlIHNlZWtkaXIgZ2V0cHJvdG9ieW5hbWUgc2Vtb3Agb3VyIHJlbmFtZSBzZWVrIGlmIHF8MCBjaHJvb3Qgc3lzcmVhZCBzZXRwd2VudCBubyBjcnlwdCBnZXRjIGNob3duIHNxcnQgd3JpdGUgc2V0bmV0ZW50IHNldHByaW9yaXR5IGZvcmVhY2ggdGllIHNpbiBtc2dnZXQgbWFwIHN0YXQgZ2V0bG9naW4gdW5sZXNzIGVsc2lmIHRydW5jYXRlIGV4ZWMga2V5cyBnbG9iIHRpZWQgY2xvc2VkaXIgaW9jdGwgc29ja2V0IHJlYWRsaW5rIGV2YWwgeG9yIHJlYWRsaW5lIGJpbm1vZGUgc2V0c2VydmVudCBlb2Ygb3JkIGJpbmQgYWxhcm0gcGlwZSBhdGFuMiBnZXRncmVudCBleHAgdGltZSBwdXNoIHNldGdyZW50IGd0IGx0IG9yIG5lIG18MCBicmVhayBnaXZlbiBzYXkgc3RhdGUgd2hlbiIKICAgICAgfSwgdCA9IHtjbGFzc05hbWU6ICJzdWJzdCIsIGJlZ2luOiAiWyRAXVxceyIsIGVuZDogIlxcfSIsIGtleXdvcmRzOiBufSwgcyA9IHtiZWdpbjogIi0+eyIsIGVuZDogIn0ifSwgciA9IHsKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogL1wkXGQvfSwge2JlZ2luOiAvW1wkJUBdKFxeXHdcYnwjXHcrKDo6XHcrKSp8e1x3K318XHcrKDo6XHcqKSopL30sIHsKICAgICAgICAgIGJlZ2luOiAvW1wkJUBdW15cc1x3e10vLAogICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgfV0KICAgICAgfSwgaSA9IFtlLkJBQ0tTTEFTSF9FU0NBUEUsIHQsIHJdLAogICAgICBhID0gW3IsIGUuSEFTSF9DT01NRU5UX01PREUsIGUuQ09NTUVOVCgiXlxcPVxcdyIsICJcXD1jdXQiLCB7ZW5kc1dpdGhQYXJlbnQ6ICEwfSksIHMsIHsKICAgICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICAgIGNvbnRhaW5zOiBpLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAicVtxd3hyXT9cXHMqXFwoIiwgZW5kOiAiXFwpIiwgcmVsZXZhbmNlOiA1fSwgewogICAgICAgICAgYmVnaW46ICJxW3F3eHJdP1xccypcXFsiLAogICAgICAgICAgZW5kOiAiXFxdIiwKICAgICAgICAgIHJlbGV2YW5jZTogNQogICAgICAgIH0sIHtiZWdpbjogInFbcXd4cl0/XFxzKlxceyIsIGVuZDogIlxcfSIsIHJlbGV2YW5jZTogNX0sIHsKICAgICAgICAgIGJlZ2luOiAicVtxd3hyXT9cXHMqXFx8IiwKICAgICAgICAgIGVuZDogIlxcfCIsCiAgICAgICAgICByZWxldmFuY2U6IDUKICAgICAgICB9LCB7YmVnaW46ICJxW3F3eHJdP1xccypcXDwiLCBlbmQ6ICJcXD4iLCByZWxldmFuY2U6IDV9LCB7CiAgICAgICAgICBiZWdpbjogInF3XFxzK3EiLAogICAgICAgICAgZW5kOiAicSIsCiAgICAgICAgICByZWxldmFuY2U6IDUKICAgICAgICB9LCB7YmVnaW46ICInIiwgZW5kOiAiJyIsIGNvbnRhaW5zOiBbZS5CQUNLU0xBU0hfRVNDQVBFXX0sIHtiZWdpbjogJyInLCBlbmQ6ICciJ30sIHsKICAgICAgICAgIGJlZ2luOiAiYCIsCiAgICAgICAgICBlbmQ6ICJgIiwKICAgICAgICAgIGNvbnRhaW5zOiBbZS5CQUNLU0xBU0hfRVNDQVBFXQogICAgICAgIH0sIHtiZWdpbjogIntcXHcrfSIsIGNvbnRhaW5zOiBbXSwgcmVsZXZhbmNlOiAwfSwgewogICAgICAgICAgYmVnaW46ICItP1xcdytcXHMqXFw9XFw+IiwKICAgICAgICAgIGNvbnRhaW5zOiBbXSwKICAgICAgICAgIHJlbGV2YW5jZTogMAogICAgICAgIH1dCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJudW1iZXIiLAogICAgICAgIGJlZ2luOiAiKFxcYjBbMC03X10rKXwoXFxiMHhbMC05YS1mQS1GX10rKXwoXFxiWzEtOV1bMC05X10qKFxcLlswLTlfXSspPyl8WzBfXVxcYiIsCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIHsKICAgICAgICBiZWdpbjogIihcXC9cXC98IiArIGUuUkVfU1RBUlRFUlNfUkUgKyAifFxcYihzcGxpdHxyZXR1cm58cHJpbnR8cmV2ZXJzZXxncmVwKVxcYilcXHMqIiwKICAgICAgICBrZXl3b3JkczogInNwbGl0IHJldHVybiBwcmludCByZXZlcnNlIGdyZXAiLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICBjb250YWluczogW2UuSEFTSF9DT01NRU5UX01PREUsIHsKICAgICAgICAgIGNsYXNzTmFtZTogInJlZ2V4cCIsCiAgICAgICAgICBiZWdpbjogIihzfHRyfHkpLyhcXFxcLnxbXi9dKSovKFxcXFwufFteL10pKi9bYS16XSoiLAogICAgICAgICAgcmVsZXZhbmNlOiAxMAogICAgICAgIH0sIHsKICAgICAgICAgIGNsYXNzTmFtZTogInJlZ2V4cCIsCiAgICAgICAgICBiZWdpbjogIihtfHFyKT8vIiwKICAgICAgICAgIGVuZDogIi9bYS16XSoiLAogICAgICAgICAgY29udGFpbnM6IFtlLkJBQ0tTTEFTSF9FU0NBUEVdLAogICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgfV0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogImZ1bmN0aW9uIiwKICAgICAgICBiZWdpbktleXdvcmRzOiAic3ViIiwKICAgICAgICBlbmQ6ICIoXFxzKlxcKC4qP1xcKSk/Wzt7XSIsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgcmVsZXZhbmNlOiA1LAogICAgICAgIGNvbnRhaW5zOiBbZS5USVRMRV9NT0RFXQogICAgICB9LCB7YmVnaW46ICItXFx3XFxiIiwgcmVsZXZhbmNlOiAwfSwgewogICAgICAgIGJlZ2luOiAiXl9fREFUQV9fJCIsCiAgICAgICAgZW5kOiAiXl9fRU5EX18kIiwKICAgICAgICBzdWJMYW5ndWFnZTogIm1vam9saWNpb3VzIiwKICAgICAgICBjb250YWluczogW3tiZWdpbjogIl5AQC4qIiwgZW5kOiAiJCIsIGNsYXNzTmFtZTogImNvbW1lbnQifV0KICAgICAgfV07CiAgICByZXR1cm4gdC5jb250YWlucyA9IGEsIHMuY29udGFpbnMgPSBhLCB7bmFtZTogIlBlcmwiLCBhbGlhc2VzOiBbInBsIiwgInBtIl0sIGtleXdvcmRzOiBuLCBjb250YWluczogYX0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgibHVhIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0ID0ge2JlZ2luOiAiXFxbPSpcXFsiLCBlbmQ6ICJcXF09KlxcXSIsIGNvbnRhaW5zOiBbInNlbGYiXX0sCiAgICAgIGEgPSBbZS5DT01NRU5UKCItLSg/IVxcWz0qXFxbKSIsICIkIiksIGUuQ09NTUVOVCgiLS1cXFs9KlxcWyIsICJcXF09KlxcXSIsIHtjb250YWluczogW3RdLCByZWxldmFuY2U6IDEwfSldOwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIkx1YSIsCiAgICAgIGtleXdvcmRzOiB7CiAgICAgICAgJHBhdHRlcm46IGUuVU5ERVJTQ09SRV9JREVOVF9SRSwKICAgICAgICBsaXRlcmFsOiAidHJ1ZSBmYWxzZSBuaWwiLAogICAgICAgIGtleXdvcmQ6ICJhbmQgYnJlYWsgZG8gZWxzZSBlbHNlaWYgZW5kIGZvciBnb3RvIGlmIGluIGxvY2FsIG5vdCBvciByZXBlYXQgcmV0dXJuIHRoZW4gdW50aWwgd2hpbGUiLAogICAgICAgIGJ1aWx0X2luOiAiX0cgX0VOViBfVkVSU0lPTiBfX2luZGV4IF9fbmV3aW5kZXggX19tb2RlIF9fY2FsbCBfX21ldGF0YWJsZSBfX3Rvc3RyaW5nIF9fbGVuIF9fZ2MgX19hZGQgX19zdWIgX19tdWwgX19kaXYgX19tb2QgX19wb3cgX19jb25jYXQgX191bm0gX19lcSBfX2x0IF9fbGUgYXNzZXJ0IGNvbGxlY3RnYXJiYWdlIGRvZmlsZSBlcnJvciBnZXRmZW52IGdldG1ldGF0YWJsZSBpcGFpcnMgbG9hZCBsb2FkZmlsZSBsb2Fkc3RyaW5nIG1vZHVsZSBuZXh0IHBhaXJzIHBjYWxsIHByaW50IHJhd2VxdWFsIHJhd2dldCByYXdzZXQgcmVxdWlyZSBzZWxlY3Qgc2V0ZmVudiBzZXRtZXRhdGFibGUgdG9udW1iZXIgdG9zdHJpbmcgdHlwZSB1bnBhY2sgeHBjYWxsIGFyZyBzZWxmIGNvcm91dGluZSByZXN1bWUgeWllbGQgc3RhdHVzIHdyYXAgY3JlYXRlIHJ1bm5pbmcgZGVidWcgZ2V0dXB2YWx1ZSBkZWJ1ZyBzZXRob29rIGdldG1ldGF0YWJsZSBnZXRob29rIHNldG1ldGF0YWJsZSBzZXRsb2NhbCB0cmFjZWJhY2sgc2V0ZmVudiBnZXRpbmZvIHNldHVwdmFsdWUgZ2V0bG9jYWwgZ2V0cmVnaXN0cnkgZ2V0ZmVudiBpbyBsaW5lcyB3cml0ZSBjbG9zZSBmbHVzaCBvcGVuIG91dHB1dCB0eXBlIHJlYWQgc3RkZXJyIHN0ZGluIGlucHV0IHN0ZG91dCBwb3BlbiB0bXBmaWxlIG1hdGggbG9nIG1heCBhY29zIGh1Z2UgbGRleHAgcGkgY29zIHRhbmggcG93IGRlZyB0YW4gY29zaCBzaW5oIHJhbmRvbSByYW5kb21zZWVkIGZyZXhwIGNlaWwgZmxvb3IgcmFkIGFicyBzcXJ0IG1vZGYgYXNpbiBtaW4gbW9kIGZtb2QgbG9nMTAgYXRhbjIgZXhwIHNpbiBhdGFuIG9zIGV4aXQgc2V0bG9jYWxlIGRhdGUgZ2V0ZW52IGRpZmZ0aW1lIHJlbW92ZSB0aW1lIGNsb2NrIHRtcG5hbWUgcmVuYW1lIGV4ZWN1dGUgcGFja2FnZSBwcmVsb2FkIGxvYWRsaWIgbG9hZGVkIGxvYWRlcnMgY3BhdGggY29uZmlnIHBhdGggc2VlYWxsIHN0cmluZyBzdWIgdXBwZXIgbGVuIGdmaW5kIHJlcCBmaW5kIG1hdGNoIGNoYXIgZHVtcCBnbWF0Y2ggcmV2ZXJzZSBieXRlIGZvcm1hdCBnc3ViIGxvd2VyIHRhYmxlIHNldG4gaW5zZXJ0IGdldG4gZm9yZWFjaGkgbWF4biBmb3JlYWNoIGNvbmNhdCBzb3J0IHJlbW92ZSIKICAgICAgfSwKICAgICAgY29udGFpbnM6IGEuY29uY2F0KFt7CiAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgIGJlZ2luS2V5d29yZHM6ICJmdW5jdGlvbiIsCiAgICAgICAgZW5kOiAiXFwpIiwKICAgICAgICBjb250YWluczogW2UuaW5oZXJpdChlLlRJVExFX01PREUsIHtiZWdpbjogIihbX2EtekEtWl1cXHcqXFwuKSooW19hLXpBLVpdXFx3KjopP1tfYS16QS1aXVxcdyoifSksIHsKICAgICAgICAgIGNsYXNzTmFtZTogInBhcmFtcyIsCiAgICAgICAgICBiZWdpbjogIlxcKCIsCiAgICAgICAgICBlbmRzV2l0aFBhcmVudDogITAsCiAgICAgICAgICBjb250YWluczogYQogICAgICAgIH1dLmNvbmNhdChhKQogICAgICB9LCBlLkNfTlVNQkVSX01PREUsIGUuQVBPU19TVFJJTkdfTU9ERSwgZS5RVU9URV9TVFJJTkdfTU9ERSwgewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgYmVnaW46ICJcXFs9KlxcWyIsCiAgICAgICAgZW5kOiAiXFxdPSpcXF0iLAogICAgICAgIGNvbnRhaW5zOiBbdF0sCiAgICAgICAgcmVsZXZhbmNlOiA1CiAgICAgIH1dKQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJtYXJrZG93biIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChuKSB7CiAgICBjb25zdCBlID0ge2JlZ2luOiAiPCIsIGVuZDogIj4iLCBzdWJMYW5ndWFnZTogInhtbCIsIHJlbGV2YW5jZTogMH0sIGEgPSB7CiAgICAgIGJlZ2luOiAiXFxbLis/XFxdW1xcKFxcW10uKj9bXFwpXFxdXSIsCiAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICBiZWdpbjogIlxcWyIsCiAgICAgICAgZW5kOiAiXFxdIiwKICAgICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICAgIHJldHVybkVuZDogITAsCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIHtjbGFzc05hbWU6ICJsaW5rIiwgYmVnaW46ICJcXF1cXCgiLCBlbmQ6ICJcXCkiLCBleGNsdWRlQmVnaW46ICEwLCBleGNsdWRlRW5kOiAhMH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJzeW1ib2wiLAogICAgICAgIGJlZ2luOiAiXFxdXFxbIiwKICAgICAgICBlbmQ6ICJcXF0iLAogICAgICAgIGV4Y2x1ZGVCZWdpbjogITAsCiAgICAgICAgZXhjbHVkZUVuZDogITAKICAgICAgfV0sCiAgICAgIHJlbGV2YW5jZTogMTAKICAgIH0sIGkgPSB7CiAgICAgIGNsYXNzTmFtZTogInN0cm9uZyIsCiAgICAgIGNvbnRhaW5zOiBbXSwKICAgICAgdmFyaWFudHM6IFt7YmVnaW46IC9fezJ9LywgZW5kOiAvX3syfS99LCB7YmVnaW46IC9cKnsyfS8sIGVuZDogL1wqezJ9L31dCiAgICB9LCBzID0gewogICAgICBjbGFzc05hbWU6ICJlbXBoYXNpcyIsCiAgICAgIGNvbnRhaW5zOiBbXSwKICAgICAgdmFyaWFudHM6IFt7YmVnaW46IC9cKig/IVwqKS8sIGVuZDogL1wqL30sIHtiZWdpbjogL18oPyFfKS8sIGVuZDogL18vLCByZWxldmFuY2U6IDB9XQogICAgfTsKICAgIGkuY29udGFpbnMucHVzaChzKSwgcy5jb250YWlucy5wdXNoKGkpOwogICAgdmFyIGMgPSBbZSwgYV07CiAgICByZXR1cm4gaS5jb250YWlucyA9IGkuY29udGFpbnMuY29uY2F0KGMpLCBzLmNvbnRhaW5zID0gcy5jb250YWlucy5jb25jYXQoYyksIHsKICAgICAgbmFtZTogIk1hcmtkb3duIiwKICAgICAgYWxpYXNlczogWyJtZCIsICJta2Rvd24iLCAibWtkIl0sCiAgICAgIGNvbnRhaW5zOiBbewogICAgICAgIGNsYXNzTmFtZTogInNlY3Rpb24iLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAiXiN7MSw2fSIsIGVuZDogIiQiLCBjb250YWluczogYyA9IGMuY29uY2F0KGksIHMpfSwgewogICAgICAgICAgYmVnaW46ICIoPz1eLis/XFxuWz0tXXsyLH0kKSIsCiAgICAgICAgICBjb250YWluczogW3tiZWdpbjogIl5bPS1dKiQifSwge2JlZ2luOiAiXiIsIGVuZDogIlxcbiIsIGNvbnRhaW5zOiBjfV0KICAgICAgICB9XQogICAgICB9LCBlLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiYnVsbGV0IiwKICAgICAgICBiZWdpbjogIl5bIFx0XSooWyorLV18KFxcZCtcXC4pKSg/PVxccyspIiwKICAgICAgICBlbmQ6ICJcXHMrIiwKICAgICAgICBleGNsdWRlRW5kOiAhMAogICAgICB9LCBpLCBzLCB7Y2xhc3NOYW1lOiAicXVvdGUiLCBiZWdpbjogIl4+XFxzKyIsIGNvbnRhaW5zOiBjLCBlbmQ6ICIkIn0sIHsKICAgICAgICBjbGFzc05hbWU6ICJjb2RlIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogIihgezMsfSkoLnxcXG4pKj9cXDFgKlsgXSoifSwge2JlZ2luOiAiKH57Myx9KSgufFxcbikqP1xcMX4qWyBdKiJ9LCB7CiAgICAgICAgICBiZWdpbjogImBgYCIsCiAgICAgICAgICBlbmQ6ICJgYGArWyBdKiQiCiAgICAgICAgfSwge2JlZ2luOiAifn5+IiwgZW5kOiAifn5+K1sgXSokIn0sIHtiZWdpbjogImAuKz9gIn0sIHsKICAgICAgICAgIGJlZ2luOiAiKD89XiggezR9fFxcdCkpIiwKICAgICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luOiAiXiggezR9fFxcdCkiLCBlbmQ6ICIoXFxuKSQifV0sCiAgICAgICAgICByZWxldmFuY2U6IDAKICAgICAgICB9XQogICAgICB9LCB7YmVnaW46ICJeWy1cXCpdezMsfSIsIGVuZDogIiQifSwgYSwgewogICAgICAgIGJlZ2luOiAvXlxbW15cbl0rXF06LywKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgICBjbGFzc05hbWU6ICJzeW1ib2wiLAogICAgICAgICAgYmVnaW46IC9cWy8sCiAgICAgICAgICBlbmQ6IC9cXS8sCiAgICAgICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICAgICAgZXhjbHVkZUVuZDogITAKICAgICAgICB9LCB7Y2xhc3NOYW1lOiAibGluayIsIGJlZ2luOiAvOlxzKi8sIGVuZDogLyQvLCBleGNsdWRlQmVnaW46ICEwfV0KICAgICAgfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgibWFrZWZpbGUiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIGkgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAidmFyaWFibGUiLAogICAgICAgIHZhcmlhbnRzOiBbewogICAgICAgICAgYmVnaW46ICJcXCRcXCgiICsgZS5VTkRFUlNDT1JFX0lERU5UX1JFICsgIlxcKSIsCiAgICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRV0KICAgICAgICB9LCB7YmVnaW46IC9cJFtAJTw/XF5cK1wqXS99XQogICAgICB9LCBuID0ge2NsYXNzTmFtZTogInN0cmluZyIsIGJlZ2luOiAvIi8sIGVuZDogLyIvLCBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgaV19LCBhID0gewogICAgICAgIGNsYXNzTmFtZTogInZhcmlhYmxlIiwKICAgICAgICBiZWdpbjogL1wkXChbXHctXStccy8sCiAgICAgICAgZW5kOiAvXCkvLAogICAgICAgIGtleXdvcmRzOiB7YnVpbHRfaW46ICJzdWJzdCBwYXRzdWJzdCBzdHJpcCBmaW5kc3RyaW5nIGZpbHRlciBmaWx0ZXItb3V0IHNvcnQgd29yZCB3b3JkbGlzdCBmaXJzdHdvcmQgbGFzdHdvcmQgZGlyIG5vdGRpciBzdWZmaXggYmFzZW5hbWUgYWRkc3VmZml4IGFkZHByZWZpeCBqb2luIHdpbGRjYXJkIHJlYWxwYXRoIGFic3BhdGggZXJyb3Igd2FybmluZyBzaGVsbCBvcmlnaW4gZmxhdm9yIGZvcmVhY2ggaWYgb3IgYW5kIGNhbGwgZXZhbCBmaWxlIHZhbHVlIn0sCiAgICAgICAgY29udGFpbnM6IFtpXQogICAgICB9LCByID0ge2JlZ2luOiAiXiIgKyBlLlVOREVSU0NPUkVfSURFTlRfUkUgKyAiXFxzKig/PVs6Kz9dPz0pIn0sCiAgICAgIHMgPSB7Y2xhc3NOYW1lOiAic2VjdGlvbiIsIGJlZ2luOiAvXlteXHNdKzovLCBlbmQ6IC8kLywgY29udGFpbnM6IFtpXX07CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiTWFrZWZpbGUiLAogICAgICBhbGlhc2VzOiBbIm1rIiwgIm1hayJdLAogICAgICBrZXl3b3JkczogewogICAgICAgICRwYXR0ZXJuOiAvW1x3LV0rLywKICAgICAgICBrZXl3b3JkOiAiZGVmaW5lIGVuZGVmIHVuZGVmaW5lIGlmZGVmIGlmbmRlZiBpZmVxIGlmbmVxIGVsc2UgZW5kaWYgaW5jbHVkZSAtaW5jbHVkZSBzaW5jbHVkZSBvdmVycmlkZSBleHBvcnQgdW5leHBvcnQgcHJpdmF0ZSB2cGF0aCIKICAgICAgfSwKICAgICAgY29udGFpbnM6IFtlLkhBU0hfQ09NTUVOVF9NT0RFLCBpLCBuLCBhLCByLCB7CiAgICAgICAgY2xhc3NOYW1lOiAibWV0YSIsCiAgICAgICAgYmVnaW46IC9eXC5QSE9OWTovLAogICAgICAgIGVuZDogLyQvLAogICAgICAgIGtleXdvcmRzOiB7JHBhdHRlcm46IC9bXC5cd10rLywgIm1ldGEta2V5d29yZCI6ICIuUEhPTlkifQogICAgICB9LCBzXQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJjbWFrZSIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiQ01ha2UiLAogICAgICBhbGlhc2VzOiBbImNtYWtlLmluIl0sCiAgICAgIGNhc2VfaW5zZW5zaXRpdmU6ICEwLAogICAgICBrZXl3b3Jkczoge2tleXdvcmQ6ICJicmVhayBjbWFrZV9ob3N0X3N5c3RlbV9pbmZvcm1hdGlvbiBjbWFrZV9taW5pbXVtX3JlcXVpcmVkIGNtYWtlX3BhcnNlX2FyZ3VtZW50cyBjbWFrZV9wb2xpY3kgY29uZmlndXJlX2ZpbGUgY29udGludWUgZWxzZWlmIGVsc2UgZW5kZm9yZWFjaCBlbmRmdW5jdGlvbiBlbmRpZiBlbmRtYWNybyBlbmR3aGlsZSBleGVjdXRlX3Byb2Nlc3MgZmlsZSBmaW5kX2ZpbGUgZmluZF9saWJyYXJ5IGZpbmRfcGFja2FnZSBmaW5kX3BhdGggZmluZF9wcm9ncmFtIGZvcmVhY2ggZnVuY3Rpb24gZ2V0X2NtYWtlX3Byb3BlcnR5IGdldF9kaXJlY3RvcnlfcHJvcGVydHkgZ2V0X2ZpbGVuYW1lX2NvbXBvbmVudCBnZXRfcHJvcGVydHkgaWYgaW5jbHVkZSBpbmNsdWRlX2d1YXJkIGxpc3QgbWFjcm8gbWFya19hc19hZHZhbmNlZCBtYXRoIG1lc3NhZ2Ugb3B0aW9uIHJldHVybiBzZXBhcmF0ZV9hcmd1bWVudHMgc2V0X2RpcmVjdG9yeV9wcm9wZXJ0aWVzIHNldF9wcm9wZXJ0eSBzZXQgc2l0ZV9uYW1lIHN0cmluZyB1bnNldCB2YXJpYWJsZV93YXRjaCB3aGlsZSBhZGRfY29tcGlsZV9kZWZpbml0aW9ucyBhZGRfY29tcGlsZV9vcHRpb25zIGFkZF9jdXN0b21fY29tbWFuZCBhZGRfY3VzdG9tX3RhcmdldCBhZGRfZGVmaW5pdGlvbnMgYWRkX2RlcGVuZGVuY2llcyBhZGRfZXhlY3V0YWJsZSBhZGRfbGlicmFyeSBhZGRfbGlua19vcHRpb25zIGFkZF9zdWJkaXJlY3RvcnkgYWRkX3Rlc3QgYXV4X3NvdXJjZV9kaXJlY3RvcnkgYnVpbGRfY29tbWFuZCBjcmVhdGVfdGVzdF9zb3VyY2VsaXN0IGRlZmluZV9wcm9wZXJ0eSBlbmFibGVfbGFuZ3VhZ2UgZW5hYmxlX3Rlc3RpbmcgZXhwb3J0IGZsdGtfd3JhcF91aSBnZXRfc291cmNlX2ZpbGVfcHJvcGVydHkgZ2V0X3RhcmdldF9wcm9wZXJ0eSBnZXRfdGVzdF9wcm9wZXJ0eSBpbmNsdWRlX2RpcmVjdG9yaWVzIGluY2x1ZGVfZXh0ZXJuYWxfbXNwcm9qZWN0IGluY2x1ZGVfcmVndWxhcl9leHByZXNzaW9uIGluc3RhbGwgbGlua19kaXJlY3RvcmllcyBsaW5rX2xpYnJhcmllcyBsb2FkX2NhY2hlIHByb2plY3QgcXRfd3JhcF9jcHAgcXRfd3JhcF91aSByZW1vdmVfZGVmaW5pdGlvbnMgc2V0X3NvdXJjZV9maWxlc19wcm9wZXJ0aWVzIHNldF90YXJnZXRfcHJvcGVydGllcyBzZXRfdGVzdHNfcHJvcGVydGllcyBzb3VyY2VfZ3JvdXAgdGFyZ2V0X2NvbXBpbGVfZGVmaW5pdGlvbnMgdGFyZ2V0X2NvbXBpbGVfZmVhdHVyZXMgdGFyZ2V0X2NvbXBpbGVfb3B0aW9ucyB0YXJnZXRfaW5jbHVkZV9kaXJlY3RvcmllcyB0YXJnZXRfbGlua19kaXJlY3RvcmllcyB0YXJnZXRfbGlua19saWJyYXJpZXMgdGFyZ2V0X2xpbmtfb3B0aW9ucyB0YXJnZXRfc291cmNlcyB0cnlfY29tcGlsZSB0cnlfcnVuIGN0ZXN0X2J1aWxkIGN0ZXN0X2NvbmZpZ3VyZSBjdGVzdF9jb3ZlcmFnZSBjdGVzdF9lbXB0eV9iaW5hcnlfZGlyZWN0b3J5IGN0ZXN0X21lbWNoZWNrIGN0ZXN0X3JlYWRfY3VzdG9tX2ZpbGVzIGN0ZXN0X3J1bl9zY3JpcHQgY3Rlc3Rfc2xlZXAgY3Rlc3Rfc3RhcnQgY3Rlc3Rfc3VibWl0IGN0ZXN0X3Rlc3QgY3Rlc3RfdXBkYXRlIGN0ZXN0X3VwbG9hZCBidWlsZF9uYW1lIGV4ZWNfcHJvZ3JhbSBleHBvcnRfbGlicmFyeV9kZXBlbmRlbmNpZXMgaW5zdGFsbF9maWxlcyBpbnN0YWxsX3Byb2dyYW1zIGluc3RhbGxfdGFyZ2V0cyBsb2FkX2NvbW1hbmQgbWFrZV9kaXJlY3Rvcnkgb3V0cHV0X3JlcXVpcmVkX2ZpbGVzIHJlbW92ZSBzdWJkaXJfZGVwZW5kcyBzdWJkaXJzIHVzZV9tYW5nbGVkX21lc2EgdXRpbGl0eV9zb3VyY2UgdmFyaWFibGVfcmVxdWlyZXMgd3JpdGVfZmlsZSBxdDVfdXNlX21vZHVsZXMgcXQ1X3VzZV9wYWNrYWdlIHF0NV93cmFwX2NwcCBvbiBvZmYgdHJ1ZSBmYWxzZSBhbmQgb3Igbm90IGNvbW1hbmQgcG9saWN5IHRhcmdldCB0ZXN0IGV4aXN0cyBpc19uZXdlcl90aGFuIGlzX2RpcmVjdG9yeSBpc19zeW1saW5rIGlzX2Fic29sdXRlIG1hdGNoZXMgbGVzcyBncmVhdGVyIGVxdWFsIGxlc3NfZXF1YWwgZ3JlYXRlcl9lcXVhbCBzdHJsZXNzIHN0cmdyZWF0ZXIgc3RyZXF1YWwgc3RybGVzc19lcXVhbCBzdHJncmVhdGVyX2VxdWFsIHZlcnNpb25fbGVzcyB2ZXJzaW9uX2dyZWF0ZXIgdmVyc2lvbl9lcXVhbCB2ZXJzaW9uX2xlc3NfZXF1YWwgdmVyc2lvbl9ncmVhdGVyX2VxdWFsIGluX2xpc3QgZGVmaW5lZCJ9LAogICAgICBjb250YWluczogW3sKICAgICAgICBjbGFzc05hbWU6ICJ2YXJpYWJsZSIsCiAgICAgICAgYmVnaW46ICJcXCR7IiwKICAgICAgICBlbmQ6ICJ9IgogICAgICB9LCBlLkhBU0hfQ09NTUVOVF9NT0RFLCBlLlFVT1RFX1NUUklOR19NT0RFLCBlLk5VTUJFUl9NT0RFXQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJqc29uIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKG4pIHsKICAgIHZhciBlID0ge2xpdGVyYWw6ICJ0cnVlIGZhbHNlIG51bGwifSwgaSA9IFtuLkNfTElORV9DT01NRU5UX01PREUsIG4uQ19CTE9DS19DT01NRU5UX01PREVdLAogICAgICB0ID0gW24uUVVPVEVfU1RSSU5HX01PREUsIG4uQ19OVU1CRVJfTU9ERV0sCiAgICAgIGEgPSB7ZW5kOiAiLCIsIGVuZHNXaXRoUGFyZW50OiAhMCwgZXhjbHVkZUVuZDogITAsIGNvbnRhaW5zOiB0LCBrZXl3b3JkczogZX0sIGwgPSB7CiAgICAgICAgYmVnaW46ICJ7IiwKICAgICAgICBlbmQ6ICJ9IiwKICAgICAgICBjb250YWluczogW3sKICAgICAgICAgIGNsYXNzTmFtZTogImF0dHIiLAogICAgICAgICAgYmVnaW46IC8iLywKICAgICAgICAgIGVuZDogLyIvLAogICAgICAgICAgY29udGFpbnM6IFtuLkJBQ0tTTEFTSF9FU0NBUEVdLAogICAgICAgICAgaWxsZWdhbDogIlxcbiIKICAgICAgICB9LCBuLmluaGVyaXQoYSwge2JlZ2luOiAvOi99KV0uY29uY2F0KGkpLAogICAgICAgIGlsbGVnYWw6ICJcXFMiCiAgICAgIH0sIHMgPSB7YmVnaW46ICJcXFsiLCBlbmQ6ICJcXF0iLCBjb250YWluczogW24uaW5oZXJpdChhKV0sIGlsbGVnYWw6ICJcXFMifTsKICAgIHJldHVybiB0LnB1c2gobCwgcyksIGkuZm9yRWFjaCgoZnVuY3Rpb24gKG4pIHsKICAgICAgdC5wdXNoKG4pCiAgICB9KSksIHtuYW1lOiAiSlNPTiIsIGNvbnRhaW5zOiB0LCBrZXl3b3JkczogZSwgaWxsZWdhbDogIlxcUyJ9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInNoZWxsIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJTaGVsbCBTZXNzaW9uIiwKICAgICAgYWxpYXNlczogWyJjb25zb2xlIl0sCiAgICAgIGNvbnRhaW5zOiBbewogICAgICAgIGNsYXNzTmFtZTogIm1ldGEiLAogICAgICAgIGJlZ2luOiAiXlxcc3swLDN9Wy9cXHdcXGRcXFtcXF0oKUAtXSpbPiUkI10iLAogICAgICAgIHN0YXJ0czoge2VuZDogIiQiLCBzdWJMYW5ndWFnZTogImJhc2gifQogICAgICB9XQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJjc3MiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSB7CiAgICAgIGJlZ2luOiAvKD86W0EtWlxfXC5cLV0rfC0tW2EtekEtWjAtOV8tXSspXHMqOi8sCiAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgZW5kOiAiOyIsCiAgICAgIGVuZHNXaXRoUGFyZW50OiAhMCwKICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgY2xhc3NOYW1lOiAiYXR0cmlidXRlIiwKICAgICAgICBiZWdpbjogL1xTLywKICAgICAgICBlbmQ6ICI6IiwKICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICBzdGFydHM6IHsKICAgICAgICAgIGVuZHNXaXRoUGFyZW50OiAhMCwKICAgICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgICAgIGJlZ2luOiAvW1x3LV0rXCgvLAogICAgICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgICAgIGNvbnRhaW5zOiBbe2NsYXNzTmFtZTogImJ1aWx0X2luIiwgYmVnaW46IC9bXHctXSsvfSwgewogICAgICAgICAgICAgIGJlZ2luOiAvXCgvLAogICAgICAgICAgICAgIGVuZDogL1wpLywKICAgICAgICAgICAgICBjb250YWluczogW2UuQVBPU19TVFJJTkdfTU9ERSwgZS5RVU9URV9TVFJJTkdfTU9ERSwgZS5DU1NfTlVNQkVSX01PREVdCiAgICAgICAgICAgIH1dCiAgICAgICAgICB9LCBlLkNTU19OVU1CRVJfTU9ERSwgZS5RVU9URV9TVFJJTkdfTU9ERSwgZS5BUE9TX1NUUklOR19NT0RFLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogIm51bWJlciIsCiAgICAgICAgICAgIGJlZ2luOiAiI1swLTlBLUZhLWZdKyIKICAgICAgICAgIH0sIHtjbGFzc05hbWU6ICJtZXRhIiwgYmVnaW46ICIhaW1wb3J0YW50In1dCiAgICAgICAgfQogICAgICB9XQogICAgfTsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJDU1MiLAogICAgICBjYXNlX2luc2Vuc2l0aXZlOiAhMCwKICAgICAgaWxsZWdhbDogL1s9XC98J1wkXS8sCiAgICAgIGNvbnRhaW5zOiBbZS5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgewogICAgICAgIGNsYXNzTmFtZTogInNlbGVjdG9yLWlkIiwKICAgICAgICBiZWdpbjogLyNbQS1aYS16MC05Xy1dKy8KICAgICAgfSwge2NsYXNzTmFtZTogInNlbGVjdG9yLWNsYXNzIiwgYmVnaW46IC9cLltBLVphLXowLTlfLV0rL30sIHsKICAgICAgICBjbGFzc05hbWU6ICJzZWxlY3Rvci1hdHRyIiwKICAgICAgICBiZWdpbjogL1xbLywKICAgICAgICBlbmQ6IC9cXS8sCiAgICAgICAgaWxsZWdhbDogIiQiLAogICAgICAgIGNvbnRhaW5zOiBbZS5BUE9TX1NUUklOR19NT0RFLCBlLlFVT1RFX1NUUklOR19NT0RFXQogICAgICB9LCB7Y2xhc3NOYW1lOiAic2VsZWN0b3ItcHNldWRvIiwgYmVnaW46IC86KDopP1thLXpBLVowLTlcX1wtXCtcKFwpIicuXSsvfSwgewogICAgICAgIGJlZ2luOiAiQChwYWdlfGZvbnQtZmFjZSkiLAogICAgICAgIGxleGVtZXM6ICJAW2Etei1dKyIsCiAgICAgICAga2V5d29yZHM6ICJAcGFnZSBAZm9udC1mYWNlIgogICAgICB9LCB7CiAgICAgICAgYmVnaW46ICJAIiwKICAgICAgICBlbmQ6ICJbeztdIiwKICAgICAgICBpbGxlZ2FsOiAvOi8sCiAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgIGNvbnRhaW5zOiBbe2NsYXNzTmFtZTogImtleXdvcmQiLCBiZWdpbjogL0BcLT9cd1tcd10qKFwtXHcrKSovfSwgewogICAgICAgICAgYmVnaW46IC9ccy8sCiAgICAgICAgICBlbmRzV2l0aFBhcmVudDogITAsCiAgICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICAgIGtleXdvcmRzOiAiYW5kIG9yIG5vdCBvbmx5IiwKICAgICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgICBiZWdpbjogL1thLXotXSs6LywKICAgICAgICAgICAgY2xhc3NOYW1lOiAiYXR0cmlidXRlIgogICAgICAgICAgfSwgZS5BUE9TX1NUUklOR19NT0RFLCBlLlFVT1RFX1NUUklOR19NT0RFLCBlLkNTU19OVU1CRVJfTU9ERV0KICAgICAgICB9XQogICAgICB9LCB7Y2xhc3NOYW1lOiAic2VsZWN0b3ItdGFnIiwgYmVnaW46ICJbYS16QS1aLV1bYS16QS1aMC05Xy1dKiIsIHJlbGV2YW5jZTogMH0sIHsKICAgICAgICBiZWdpbjogInsiLAogICAgICAgIGVuZDogIn0iLAogICAgICAgIGlsbGVnYWw6IC9cUy8sCiAgICAgICAgY29udGFpbnM6IFtlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCBuXQogICAgICB9XQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJkaWZmIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJEaWZmIiwKICAgICAgYWxpYXNlczogWyJwYXRjaCJdLAogICAgICBjb250YWluczogW3sKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICByZWxldmFuY2U6IDEwLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvXkBAICtcLVxkKyxcZCsgK1wrXGQrLFxkKyArQEAkL30sIHtiZWdpbjogL15cKlwqXCogK1xkKyxcZCsgK1wqXCpcKlwqJC99LCB7YmVnaW46IC9eXC1cLVwtICtcZCssXGQrICtcLVwtXC1cLSQvfV0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogImNvbW1lbnQiLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvSW5kZXg6IC8sIGVuZDogLyQvfSwge2JlZ2luOiAvPXszLH0vLCBlbmQ6IC8kL30sIHsKICAgICAgICAgIGJlZ2luOiAvXlwtezN9LywKICAgICAgICAgIGVuZDogLyQvCiAgICAgICAgfSwge2JlZ2luOiAvXlwqezN9IC8sIGVuZDogLyQvfSwge2JlZ2luOiAvXlwrezN9LywgZW5kOiAvJC99LCB7YmVnaW46IC9eXCp7MTV9JC99XQogICAgICB9LCB7Y2xhc3NOYW1lOiAiYWRkaXRpb24iLCBiZWdpbjogIl5cXCsiLCBlbmQ6ICIkIn0sIHsKICAgICAgICBjbGFzc05hbWU6ICJkZWxldGlvbiIsCiAgICAgICAgYmVnaW46ICJeXFwtIiwKICAgICAgICBlbmQ6ICIkIgogICAgICB9LCB7Y2xhc3NOYW1lOiAiYWRkaXRpb24iLCBiZWdpbjogIl5cXCEiLCBlbmQ6ICIkIn1dCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoImh0dHAiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSAiSFRUUC9bMC05XFwuXSsiOwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIkhUVFAiLAogICAgICBhbGlhc2VzOiBbImh0dHBzIl0sCiAgICAgIGlsbGVnYWw6ICJcXFMiLAogICAgICBjb250YWluczogW3sKICAgICAgICBiZWdpbjogIl4iICsgbiwKICAgICAgICBlbmQ6ICIkIiwKICAgICAgICBjb250YWluczogW3tjbGFzc05hbWU6ICJudW1iZXIiLCBiZWdpbjogIlxcYlxcZHszfVxcYiJ9XQogICAgICB9LCB7CiAgICAgICAgYmVnaW46ICJeW0EtWl0rICguKj8pICIgKyBuICsgIiQiLAogICAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgICBlbmQ6ICIkIiwKICAgICAgICBjb250YWluczogW3sKICAgICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgICBiZWdpbjogIiAiLAogICAgICAgICAgZW5kOiAiICIsCiAgICAgICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICAgICAgZXhjbHVkZUVuZDogITAKICAgICAgICB9LCB7YmVnaW46IG59LCB7Y2xhc3NOYW1lOiAia2V5d29yZCIsIGJlZ2luOiAiW0EtWl0rIn1dCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJhdHRyaWJ1dGUiLAogICAgICAgIGJlZ2luOiAiXlxcdyIsCiAgICAgICAgZW5kOiAiOiAiLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIGlsbGVnYWw6ICJcXG58XFxzfD0iLAogICAgICAgIHN0YXJ0czoge2VuZDogIiQiLCByZWxldmFuY2U6IDB9CiAgICAgIH0sIHtiZWdpbjogIlxcblxcbiIsIHN0YXJ0czoge3N1Ykxhbmd1YWdlOiBbXSwgZW5kc1dpdGhQYXJlbnQ6ICEwfX1dCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInBvd2Vyc2hlbGwiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSB7CiAgICAgICAgJHBhdHRlcm46IC8tP1tBLXpcLlwtXStcYi8sCiAgICAgICAga2V5d29yZDogImlmIGVsc2UgZm9yZWFjaCByZXR1cm4gZG8gd2hpbGUgdW50aWwgZWxzZWlmIGJlZ2luIGZvciB0cmFwIGRhdGEgZHluYW1pY3BhcmFtIGVuZCBicmVhayB0aHJvdyBwYXJhbSBjb250aW51ZSBmaW5hbGx5IGluIHN3aXRjaCBleGl0IGZpbHRlciB0cnkgcHJvY2VzcyBjYXRjaCBoaWRkZW4gc3RhdGljIHBhcmFtZXRlciIsCiAgICAgICAgYnVpbHRfaW46ICJhYyBhc25wIGNhdCBjZCBDRlMgY2hkaXIgY2xjIGNsZWFyIGNsaHkgY2xpIGNscCBjbHMgY2x2IGNuc24gY29tcGFyZSBjb3B5IGNwIGNwaSBjcHAgY3VybCBjdnBhIGRicCBkZWwgZGlmZiBkaXIgZG5zbiBlYnAgZWNob3wwIGVwYWwgZXBjc3YgZXBzbiBlcmFzZSBldHNuIGV4c24gZmMgZmh4IGZsIGZ0IGZ3IGdhbCBnYnAgZ2MgZ2NiIGdjaSBnY20gZ2NzIGdkciBnZXJyIGdoeSBnaSBnaW4gZ2piIGdsIGdtIGdtbyBncCBncHMgZ3B2IGdyb3VwIGdzbiBnc25wIGdzdiBndHogZ3UgZ3YgZ3dtaSBoIGhpc3RvcnkgaWNtIGlleCBpaHkgaWkgaXBhbCBpcGNzdiBpcG1vIGlwc24gaXJtIGlzZSBpd21pIGl3ciBraWxsIGxwIGxzIG1hbiBtZCBtZWFzdXJlIG1pIG1vdW50IG1vdmUgbXAgbXYgbmFsIG5kciBuaSBubW8gbnBzc2MgbnNuIG52IG9ndiBvaCBwb3BkIHBzIHB1c2hkIHB3ZCByIHJicCByY2piIHJjc24gcmQgcmRyIHJlbiByaSByamIgcm0gcm1kaXIgcm1vIHJuaSBybnAgcnAgcnNuIHJzbnAgcnVqYiBydiBydnBhIHJ3bWkgc2FqYiBzYWwgc2FwcyBzYXN2IHNicCBzYyBzY2Igc2VsZWN0IHNldCBzaGNtIHNpIHNsIHNsZWVwIHNscyBzb3J0IHNwIHNwamIgc3BwcyBzcHN2IHN0YXJ0IHN0eiBzdWpiIHN2IHN3bWkgdGVlIHRyY20gdHlwZSB3Z2V0IHdoZXJlIHdqYiB3cml0ZSIKICAgICAgfSwgcyA9IHtiZWdpbjogImBbXFxzXFxTXSIsIHJlbGV2YW5jZTogMH0sIGkgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAidmFyaWFibGUiLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvXCRcQi99LCB7Y2xhc3NOYW1lOiAia2V5d29yZCIsIGJlZ2luOiAvXCR0aGlzL30sIHtiZWdpbjogL1wkW1x3XGRdW1x3XGRfOl0qL31dCiAgICAgIH0sIGEgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogLyIvLCBlbmQ6IC8iL30sIHtiZWdpbjogL0AiLywgZW5kOiAvXiJAL31dLAogICAgICAgIGNvbnRhaW5zOiBbcywgaSwge2NsYXNzTmFtZTogInZhcmlhYmxlIiwgYmVnaW46IC9cJFtBLXpdLywgZW5kOiAvW15BLXpdL31dCiAgICAgIH0sIHQgPSB7Y2xhc3NOYW1lOiAic3RyaW5nIiwgdmFyaWFudHM6IFt7YmVnaW46IC8nLywgZW5kOiAvJy99LCB7YmVnaW46IC9AJy8sIGVuZDogL14nQC99XX0sCiAgICAgIHIgPSBlLmluaGVyaXQoZS5DT01NRU5UKG51bGwsIG51bGwpLCB7CiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46IC8jLywgZW5kOiAvJC99LCB7YmVnaW46IC88Iy8sIGVuZDogLyM+L31dLAogICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgY2xhc3NOYW1lOiAiZG9jdGFnIiwKICAgICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvXC4oc3lub3BzaXN8ZGVzY3JpcHRpb258ZXhhbXBsZXxpbnB1dHN8b3V0cHV0c3xub3Rlc3xsaW5rfGNvbXBvbmVudHxyb2xlfGZ1bmN0aW9uYWxpdHkpL30sIHtiZWdpbjogL1wuKHBhcmFtZXRlcnxmb3J3YXJkaGVscHRhcmdldG5hbWV8Zm9yd2FyZGhlbHBjYXRlZ29yeXxyZW1vdGVoZWxwcnVuc3BhY2V8ZXh0ZXJuYWxoZWxwKVxzK1xTKy99XQogICAgICAgIH1dCiAgICAgIH0pLCBjID0gewogICAgICAgIGNsYXNzTmFtZTogImNsYXNzIiwKICAgICAgICBiZWdpbktleXdvcmRzOiAiY2xhc3MgZW51bSIsCiAgICAgICAgZW5kOiAvXHMqW3tdLywKICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgY29udGFpbnM6IFtlLlRJVExFX01PREVdCiAgICAgIH0sIGwgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgIGJlZ2luOiAvZnVuY3Rpb25ccysvLAogICAgICAgIGVuZDogL1xzKlx7fCQvLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgY29udGFpbnM6IFt7YmVnaW46ICJmdW5jdGlvbiIsIHJlbGV2YW5jZTogMCwgY2xhc3NOYW1lOiAia2V5d29yZCJ9LCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJ0aXRsZSIsCiAgICAgICAgICBiZWdpbjogL1x3W1x3XGRdKigoLSlbXHdcZF0rKSovLAogICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgfSwge2JlZ2luOiAvXCgvLCBlbmQ6IC9cKS8sIGNsYXNzTmFtZTogInBhcmFtcyIsIHJlbGV2YW5jZTogMCwgY29udGFpbnM6IFtpXX1dCiAgICAgIH0sIG8gPSB7CiAgICAgICAgYmVnaW46IC91c2luZ1xzLywKICAgICAgICBlbmQ6IC8kLywKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgY29udGFpbnM6IFthLCB0LCB7Y2xhc3NOYW1lOiAia2V5d29yZCIsIGJlZ2luOiAvKHVzaW5nfGFzc2VtYmx5fGNvbW1hbmR8bW9kdWxlfG5hbWVzcGFjZXx0eXBlKS99XQogICAgICB9LCBwID0gewogICAgICAgIGNsYXNzTmFtZTogImZ1bmN0aW9uIiwKICAgICAgICBiZWdpbjogL1xbLipcXVxzKltcd10rWyBdPz9cKC8sCiAgICAgICAgZW5kOiAvJC8sCiAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICBjb250YWluczogW3sKICAgICAgICAgIGNsYXNzTmFtZTogImtleXdvcmQiLAogICAgICAgICAgYmVnaW46ICIoIi5jb25jYXQobi5rZXl3b3JkLnRvU3RyaW5nKCkucmVwbGFjZSgvXHMvZywgInwiKSwgIilcXGIiKSwKICAgICAgICAgIGVuZHNQYXJlbnQ6ICEwLAogICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgfSwgZS5pbmhlcml0KGUuVElUTEVfTU9ERSwge2VuZHNQYXJlbnQ6ICEwfSldCiAgICAgIH0sIGcgPSBbcCwgciwgcywgZS5OVU1CRVJfTU9ERSwgYSwgdCwgewogICAgICAgIGNsYXNzTmFtZTogImJ1aWx0X2luIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogIihBZGR8Q2xlYXJ8Q2xvc2V8Q29weXxFbnRlcnxFeGl0fEZpbmR8Rm9ybWF0fEdldHxIaWRlfEpvaW58TG9ja3xNb3ZlfE5ld3xPcGVufE9wdGltaXplfFBvcHxQdXNofFJlZG98UmVtb3ZlfFJlbmFtZXxSZXNldHxSZXNpemV8U2VhcmNofFNlbGVjdHxTZXR8U2hvd3xTa2lwfFNwbGl0fFN0ZXB8U3dpdGNofFVuZG98VW5sb2NrfFdhdGNofEJhY2t1cHxDaGVja3BvaW50fENvbXBhcmV8Q29tcHJlc3N8Q29udmVydHxDb252ZXJ0RnJvbXxDb252ZXJ0VG98RGlzbW91bnR8RWRpdHxFeHBhbmR8RXhwb3J0fEdyb3VwfEltcG9ydHxJbml0aWFsaXplfExpbWl0fE1lcmdlfE5ld3xPdXR8UHVibGlzaHxSZXN0b3JlfFNhdmV8U3luY3xVbnB1Ymxpc2h8VXBkYXRlfEFwcHJvdmV8QXNzZXJ0fENvbXBsZXRlfENvbmZpcm18RGVueXxEaXNhYmxlfEVuYWJsZXxJbnN0YWxsfEludm9rZXxSZWdpc3RlcnxSZXF1ZXN0fFJlc3RhcnR8UmVzdW1lfFN0YXJ0fFN0b3B8U3VibWl0fFN1c3BlbmR8VW5pbnN0YWxsfFVucmVnaXN0ZXJ8V2FpdHxEZWJ1Z3xNZWFzdXJlfFBpbmd8UmVwYWlyfFJlc29sdmV8VGVzdHxUcmFjZXxDb25uZWN0fERpc2Nvbm5lY3R8UmVhZHxSZWNlaXZlfFNlbmR8V3JpdGV8QmxvY2t8R3JhbnR8UHJvdGVjdHxSZXZva2V8VW5ibG9ja3xVbnByb3RlY3R8VXNlfEZvckVhY2h8U29ydHxUZWV8V2hlcmUpKygtKVtcXHdcXGRdKyJ9XQogICAgICB9LCBpLCB7Y2xhc3NOYW1lOiAibGl0ZXJhbCIsIGJlZ2luOiAvXCQobnVsbHx0cnVlfGZhbHNlKVxiL30sIHsKICAgICAgICBjbGFzc05hbWU6ICJzZWxlY3Rvci10YWciLAogICAgICAgIGJlZ2luOiAvXEBcQi8sCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH1dLCBtID0gewogICAgICAgIGJlZ2luOiAvXFsvLAogICAgICAgIGVuZDogL1xdLywKICAgICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICBjb250YWluczogW10uY29uY2F0KCJzZWxmIiwgZywgewogICAgICAgICAgYmVnaW46ICIoc3RyaW5nfGNoYXJ8Ynl0ZXxpbnR8bG9uZ3xib29sfGRlY2ltYWx8c2luZ2xlfGRvdWJsZXxEYXRlVGltZXx4bWx8YXJyYXl8aGFzaHRhYmxlfHZvaWQpIiwKICAgICAgICAgIGNsYXNzTmFtZTogImJ1aWx0X2luIiwKICAgICAgICAgIHJlbGV2YW5jZTogMAogICAgICAgIH0sIHtjbGFzc05hbWU6ICJ0eXBlIiwgYmVnaW46IC9bXC5cd1xkXSsvLCByZWxldmFuY2U6IDB9KQogICAgICB9OwogICAgcmV0dXJuIHAuY29udGFpbnMudW5zaGlmdChtKSwgewogICAgICBuYW1lOiAiUG93ZXJTaGVsbCIsCiAgICAgIGFsaWFzZXM6IFsicHMiLCAicHMxIl0sCiAgICAgIGNhc2VfaW5zZW5zaXRpdmU6ICEwLAogICAgICBrZXl3b3JkczogbiwKICAgICAgY29udGFpbnM6IGcuY29uY2F0KGMsIGwsIG8sIHsKICAgICAgICB2YXJpYW50czogW3sKICAgICAgICAgIGNsYXNzTmFtZTogIm9wZXJhdG9yIiwKICAgICAgICAgIGJlZ2luOiAiKC1hbmR8LWFzfC1iYW5kfC1ibm90fC1ib3J8LWJ4b3J8LWNhc2VzZW5zaXRpdmV8LWNjb250YWluc3wtY2VxfC1jZ2V8LWNndHwtY2xlfC1jbGlrZXwtY2x0fC1jbWF0Y2h8LWNuZXwtY25vdGNvbnRhaW5zfC1jbm90bGlrZXwtY25vdG1hdGNofC1jb250YWluc3wtY3JlcGxhY2V8LWNzcGxpdHwtZXF8LWV4YWN0fC1mfC1maWxlfC1nZXwtZ3R8LWljb250YWluc3wtaWVxfC1pZ2V8LWlndHwtaWxlfC1pbGlrZXwtaWx0fC1pbWF0Y2h8LWlufC1pbmV8LWlub3Rjb250YWluc3wtaW5vdGxpa2V8LWlub3RtYXRjaHwtaXJlcGxhY2V8LWlzfC1pc25vdHwtaXNwbGl0fC1qb2lufC1sZXwtbGlrZXwtbHR8LW1hdGNofC1uZXwtbm90fC1ub3Rjb250YWluc3wtbm90aW58LW5vdGxpa2V8LW5vdG1hdGNofC1vcnwtcmVnZXh8LXJlcGxhY2V8LXNobHwtc2hyfC1zcGxpdHwtd2lsZGNhcmR8LXhvcilcXGIiCiAgICAgICAgfSwge2NsYXNzTmFtZTogImxpdGVyYWwiLCBiZWdpbjogLygtKVtcd1xkXSsvLCByZWxldmFuY2U6IDB9XQogICAgICB9LCBtKQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJ2aW0iLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIlZpbSBTY3JpcHQiLAogICAgICBrZXl3b3JkczogewogICAgICAgICRwYXR0ZXJuOiAvWyEjQFx3XSsvLAogICAgICAgIGtleXdvcmQ6ICJOfDAgUHwwIFh8MCBhfDAgYWIgYWJjIGFibyBhbCBhbSBhbnwwIGFyIGFyZ2EgYXJnZCBhcmdlIGFyZ2RvIGFyZ2cgYXJnbCBhcmd1IGFzIGF1IGF1ZyBhdW4gYnwwIGJOIGJhIGJhZCBiZCBiZSBiZWwgYmYgYmwgYm0gYm4gYm8gYnAgYnIgYnJlYSBicmVha2EgYnJlYWtkIGJyZWFrbCBicm8gYnVmZG8gYnVmZmVycyBidW4gYncgY3wwIGNOIGNOZiBjYSBjYWJjIGNhZGRiIGNhZCBjYWRkZiBjYWwgY2F0IGNiIGNjIGNjbCBjZCBjZSBjZXggY2YgY2ZpciBjZ2V0YiBjZ2V0ZSBjZyBjaGFuZ2VzIGNoZCBjaGUgY2hlY2t0IGNsIGNsYSBjbG8gY20gY21hcGMgY21lIGNuIGNuZXcgY25mIGNubyBjbm9yZWEgY25vcmVtZSBjbyBjb2wgY29sbyBjb20gY29tYyBjb21wIGNvbiBjb25mIGNvcGUgY3AgY3BmIGNxIGNyIGNzIGNzdCBjdSBjdW5hIGN1bm1lIGN3IGRlbG0gZGViIGRlYnVnZyBkZWxjIGRlbGYgZGlmIGRpZmZnIGRpZmZvIGRpZmZwIGRpZmZwdSBkaWZmcyBkaWZmdGhpcyBkaWcgZGkgZGwgZGVsbCBkaiBkbGkgZG8gZG9hdXRvYSBkcCBkciBkcyBkc3AgZXwwIGVhIGVjIGVjaG9lIGVjaG9oIGVjaG9tIGVjaG9uIGVsIGVsc2VpIGVtIGVuIGVuZGZvIGVuZGYgZW5kdCBlbmR3IGVuZSBleCBleGUgZXhpIGV4dSBmfDAgZmlsZXMgZmlsZXQgZmluIGZpbmEgZmluaSBmaXIgZml4IGZvIGZvbGRjIGZvbGRkIGZvbGRkb2MgZm9sZG8gZm9yIGZ1IGdvIGdyIGdyZXBhIGd1IGd2IGhhIGhlbHBmIGhlbHBnIGhlbHB0IGhpIGhpZCBoaXMgaWEgaWFiYyBpZiBpaiBpbCBpbSBpbWFwYyBpbWUgaW5vIGlub3JlYSBpbm9yZW1lIGludCBpcyBpc3AgaXUgaXVuYSBpdW5tZSBqfDAganUga3wwIGtlZXBhIGtlZSBrZWVwaiBsTiBsTmYgbHwwIGxhZCBsYWRkYiBsYWRkZiBsYSBsYW4gbGF0IGxiIGxjIGxjaCBsY2wgbGNzIGxlIGxlZnRhIGxldCBsZXggbGYgbGZpciBsZ2V0YiBsZ2V0ZSBsZyBsZ3IgbGdyZXBhIGxoIGxsIGxsYSBsbGkgbG1hayBsbSBsbWFwYyBsbmUgbG5ldyBsbmYgbG4gbG9hZGsgbG8gbG9jIGxvY2t2IGxvbCBsb3BlIGxwIGxwZiBsciBscyBsdCBsdSBsdWEgbHVhZCBsdWFmIGx2IGx2aW1ncmVwYSBsdyBtfDAgbWEgbWFrIG1hcCBtYXBjIG1hcmtzIG1hdCBtZSBtZW51dCBtZXMgbWsgbWtzIG1rc3AgbWt2IG1rdmllIG1vZCBteiBtemYgbmJjIG5iIG5icyBuZXcgbm0gbm1hcGMgbm1lIG5uIG5ub3JlbWUgbm9hIG5vIG5vaCBub3JlYSBub3JlbWUgbm9ybSBudSBudW4gbnVubWUgb2wgb3wwIG9tIG9tYXBjIG9tZSBvbiBvbm8gb25vcmVtZSBvcHQgb3Ugb3VubWUgb3cgcHwwIHByb2ZkIHByb2YgcHJvIHByb21wdHIgcGMgcGVkIHBlIHBlcmxkIHBvIHBvcHUgcHAgcHJlIHByZXYgcHMgcHQgcHROIHB0ZiBwdGogcHRsIHB0biBwdHAgcHRyIHB0cyBwdSBwdyBweTMgcHl0aG9uMyBweTNkIHB5M2YgcHkgcHlkIHB5ZiBxdWl0YSBxYSByZWMgcmVkIHJlZGkgcmVkciByZWRyYXdzIHJlZyByZXMgcmV0IHJldHUgcmV3IHJpIHJpZ2h0YiBydWIgcnVieWQgcnVieWYgcnVuZCBydSBydiBzTiBzYW4gc2Egc2FsIHNhdiBzYiBzYk4gc2JhIHNiZiBzYmwgc2JtIHNibiBzYnAgc2JyIHNjcmlwIHNjcmlwdGUgc2NzIHNlIHNldGYgc2V0ZyBzZXRsIHNmIHNmaXIgc2ggc2ltIHNpZyBzaWwgc2wgc2xhIHNtIHNtYXAgc21hcGMgc21lIHNuIHNuaSBzbm8gc25vciBzbm9yZW1lIHNvciBzbyBzcGVsbGQgc3BlIHNwZWxsaSBzcGVsbHIgc3BlbGx1IHNwZWxsdyBzcCBzcHIgc3JlIHN0IHN0YSBzdGFydGcgc3RhcnRyIHN0YXIgc3RvcGkgc3RqIHN0cyBzdW4gc3VubSBzdW5tZSBzdXMgc3Ygc3cgc3kgc3ludGkgc3luYyB0TiB0YWJOIHRhYmMgdGFiZG8gdGFiZSB0YWJmIHRhYmZpciB0YWJsIHRhYm0gdGFibmV3IHRhYm4gdGFibyB0YWJwIHRhYnIgdGFicyB0YWIgdGEgdGFncyB0YyB0Y2xkIHRjbGYgdGUgdGYgdGggdGogdGwgdG0gdG4gdG8gdHAgdHIgdHJ5IHRzIHR1IHV8MCB1bmRvaiB1bmRvbCB1bmEgdW5oIHVubCB1bmxvIHVubSB1bm1lIHVucyB1cCB2ZSB2ZXJiIHZlcnQgdmltIHZpbWdyZXBhIHZpIHZpdSB2aWUgdm0gdm1hcGMgdm1lIHZuZSB2biB2bm9yZW1lIHZzIHZ1IHZ1bm1lIHdpbmRvIHd8MCB3TiB3YSB3aCB3aSB3aW5jIHdpbnAgd24gd3Agd3Egd3FhIHdzIHd1IHd2IHh8MCB4YSB4bWFwYyB4bSB4bWUgeG4geG5vcmVtZSB4dSB4dW5tZSB5fDAgenwwIH4gTmV4dCBQcmludCBhcHBlbmQgYWJicmV2aWF0ZSBhYmNsZWFyIGFib3ZlbGVmdCBhbGwgYW1lbnUgYW5vcmVtZW51IGFyZ3MgYXJnYWRkIGFyZ2RlbGV0ZSBhcmdlZGl0IGFyZ2dsb2JhbCBhcmdsb2NhbCBhcmd1bWVudCBhc2NpaSBhdXRvY21kIGF1Z3JvdXAgYXVubWVudSBidWZmZXIgYk5leHQgYmFsbCBiYWRkIGJkZWxldGUgYmVoYXZlIGJlbG93cmlnaHQgYmZpcnN0IGJsYXN0IGJtb2RpZmllZCBibmV4dCBib3RyaWdodCBicHJldmlvdXMgYnJld2luZCBicmVhayBicmVha2FkZCBicmVha2RlbCBicmVha2xpc3QgYnJvd3NlIGJ1bmxvYWQgYndpcGVvdXQgY2hhbmdlIGNOZXh0IGNOZmlsZSBjYWJicmV2IGNhYmNsZWFyIGNhZGRidWZmZXIgY2FkZGV4cHIgY2FkZGZpbGUgY2FsbCBjYXRjaCBjYnVmZmVyIGNjbG9zZSBjZW50ZXIgY2V4cHIgY2ZpbGUgY2ZpcnN0IGNnZXRidWZmZXIgY2dldGV4cHIgY2dldGZpbGUgY2hkaXIgY2hlY2twYXRoIGNoZWNrdGltZSBjbGlzdCBjbGFzdCBjbG9zZSBjbWFwIGNtYXBjbGVhciBjbWVudSBjbmV4dCBjbmV3ZXIgY25maWxlIGNub3JlbWFwIGNub3JlYWJicmV2IGNub3JlbWVudSBjb3B5IGNvbGRlciBjb2xvcnNjaGVtZSBjb21tYW5kIGNvbWNsZWFyIGNvbXBpbGVyIGNvbnRpbnVlIGNvbmZpcm0gY29wZW4gY3ByZXZpb3VzIGNwZmlsZSBjcXVpdCBjcmV3aW5kIGNzY29wZSBjc3RhZyBjdW5tYXAgY3VuYWJicmV2IGN1bm1lbnUgY3dpbmRvdyBkZWxldGUgZGVsbWFya3MgZGVidWcgZGVidWdncmVlZHkgZGVsY29tbWFuZCBkZWxmdW5jdGlvbiBkaWZmdXBkYXRlIGRpZmZnZXQgZGlmZm9mZiBkaWZmcGF0Y2ggZGlmZnB1dCBkaWZmc3BsaXQgZGlncmFwaHMgZGlzcGxheSBkZWxldGVsIGRqdW1wIGRsaXN0IGRvYXV0b2NtZCBkb2F1dG9hbGwgZGVsZXRlcCBkcm9wIGRzZWFyY2ggZHNwbGl0IGVkaXQgZWFybGllciBlY2hvIGVjaG9lcnIgZWNob2hsIGVjaG9tc2cgZWxzZSBlbHNlaWYgZW1lbnUgZW5kaWYgZW5kZm9yIGVuZGZ1bmN0aW9uIGVuZHRyeSBlbmR3aGlsZSBlbmV3IGV4ZWN1dGUgZXhpdCBleHVzYWdlIGZpbGUgZmlsZXR5cGUgZmluZCBmaW5hbGx5IGZpbmlzaCBmaXJzdCBmaXhkZWwgZm9sZCBmb2xkY2xvc2UgZm9sZGRvb3BlbiBmb2xkZG9jbG9zZWQgZm9sZG9wZW4gZnVuY3Rpb24gZ2xvYmFsIGdvdG8gZ3JlcCBncmVwYWRkIGd1aSBndmltIGhhcmRjb3B5IGhlbHAgaGVscGZpbmQgaGVscGdyZXAgaGVscHRhZ3MgaGlnaGxpZ2h0IGhpZGUgaGlzdG9yeSBpbnNlcnQgaWFiYnJldiBpYWJjbGVhciBpanVtcCBpbGlzdCBpbWFwIGltYXBjbGVhciBpbWVudSBpbm9yZW1hcCBpbm9yZWFiYnJldiBpbm9yZW1lbnUgaW50cm8gaXNlYXJjaCBpc3BsaXQgaXVubWFwIGl1bmFiYnJldiBpdW5tZW51IGpvaW4ganVtcHMga2VlcGFsdCBrZWVwbWFya3Mga2VlcGp1bXBzIGxOZXh0IGxOZmlsZSBsaXN0IGxhZGRleHByIGxhZGRidWZmZXIgbGFkZGZpbGUgbGFzdCBsYW5ndWFnZSBsYXRlciBsYnVmZmVyIGxjZCBsY2hkaXIgbGNsb3NlIGxjc2NvcGUgbGVmdCBsZWZ0YWJvdmUgbGV4cHIgbGZpbGUgbGZpcnN0IGxnZXRidWZmZXIgbGdldGV4cHIgbGdldGZpbGUgbGdyZXAgbGdyZXBhZGQgbGhlbHBncmVwIGxsYXN0IGxsaXN0IGxtYWtlIGxtYXAgbG1hcGNsZWFyIGxuZXh0IGxuZXdlciBsbmZpbGUgbG5vcmVtYXAgbG9hZGtleW1hcCBsb2FkdmlldyBsb2NrbWFya3MgbG9ja3ZhciBsb2xkZXIgbG9wZW4gbHByZXZpb3VzIGxwZmlsZSBscmV3aW5kIGx0YWcgbHVubWFwIGx1YWRvIGx1YWZpbGUgbHZpbWdyZXAgbHZpbWdyZXBhZGQgbHdpbmRvdyBtb3ZlIG1hcmsgbWFrZSBtYXBjbGVhciBtYXRjaCBtZW51IG1lbnV0cmFuc2xhdGUgbWVzc2FnZXMgbWtleHJjIG1rc2Vzc2lvbiBta3NwZWxsIG1rdmltcmMgbWt2aWV3IG1vZGUgbXpzY2hlbWUgbXpmaWxlIG5iY2xvc2UgbmJrZXkgbmJzYXJ0IG5leHQgbm1hcCBubWFwY2xlYXIgbm1lbnUgbm5vcmVtYXAgbm5vcmVtZW51IG5vYXV0b2NtZCBub3JlbWFwIG5vaGxzZWFyY2ggbm9yZWFiYnJldiBub3JlbWVudSBub3JtYWwgbnVtYmVyIG51bm1hcCBudW5tZW51IG9sZGZpbGVzIG9wZW4gb21hcCBvbWFwY2xlYXIgb21lbnUgb25seSBvbm9yZW1hcCBvbm9yZW1lbnUgb3B0aW9ucyBvdW5tYXAgb3VubWVudSBvd25zeW50YXggcHJpbnQgcHJvZmRlbCBwcm9maWxlIHByb21wdGZpbmQgcHJvbXB0cmVwbCBwY2xvc2UgcGVkaXQgcGVybCBwZXJsZG8gcG9wIHBvcHVwIHBwb3AgcHJlc2VydmUgcHJldmlvdXMgcHNlYXJjaCBwdGFnIHB0TmV4dCBwdGZpcnN0IHB0anVtcCBwdGxhc3QgcHRuZXh0IHB0cHJldmlvdXMgcHRyZXdpbmQgcHRzZWxlY3QgcHV0IHB3ZCBweTNkbyBweTNmaWxlIHB5dGhvbiBweWRvIHB5ZmlsZSBxdWl0IHF1aXRhbGwgcWFsbCByZWFkIHJlY292ZXIgcmVkbyByZWRpciByZWRyYXcgcmVkcmF3c3RhdHVzIHJlZ2lzdGVycyByZXNpemUgcmV0YWIgcmV0dXJuIHJld2luZCByaWdodCByaWdodGJlbG93IHJ1YnkgcnVieWRvIHJ1YnlmaWxlIHJ1bmRvIHJ1bnRpbWUgcnZpbWluZm8gc3Vic3RpdHV0ZSBzTmV4dCBzYW5kYm94IHNhcmd1bWVudCBzYWxsIHNhdmVhcyBzYnVmZmVyIHNiTmV4dCBzYmFsbCBzYmZpcnN0IHNibGFzdCBzYm1vZGlmaWVkIHNibmV4dCBzYnByZXZpb3VzIHNicmV3aW5kIHNjcmlwdG5hbWVzIHNjcmlwdGVuY29kaW5nIHNjc2NvcGUgc2V0IHNldGZpbGV0eXBlIHNldGdsb2JhbCBzZXRsb2NhbCBzZmluZCBzZmlyc3Qgc2hlbGwgc2ltYWx0IHNpZ24gc2lsZW50IHNsZWVwIHNsYXN0IHNtYWdpYyBzbWFwY2xlYXIgc21lbnUgc25leHQgc25pZmYgc25vbWFnaWMgc25vcmVtYXAgc25vcmVtZW51IHNvcnQgc291cmNlIHNwZWxsZHVtcCBzcGVsbGdvb2Qgc3BlbGxpbmZvIHNwZWxscmVwYWxsIHNwZWxsdW5kbyBzcGVsbHdyb25nIHNwbGl0IHNwcmV2aW91cyBzcmV3aW5kIHN0b3Agc3RhZyBzdGFydGdyZXBsYWNlIHN0YXJ0cmVwbGFjZSBzdGFydGluc2VydCBzdG9waW5zZXJ0IHN0anVtcCBzdHNlbGVjdCBzdW5oaWRlIHN1bm1hcCBzdW5tZW51IHN1c3BlbmQgc3ZpZXcgc3dhcG5hbWUgc3ludGF4IHN5bnRpbWUgc3luY2JpbmQgdE5leHQgdGFiTmV4dCB0YWJjbG9zZSB0YWJlZGl0IHRhYmZpbmQgdGFiZmlyc3QgdGFibGFzdCB0YWJtb3ZlIHRhYm5leHQgdGFib25seSB0YWJwcmV2aW91cyB0YWJyZXdpbmQgdGFnIHRjbCB0Y2xkbyB0Y2xmaWxlIHRlYXJvZmYgdGZpcnN0IHRocm93IHRqdW1wIHRsYXN0IHRtZW51IHRuZXh0IHRvcGxlZnQgdHByZXZpb3VzIHRyZXdpbmQgdHNlbGVjdCB0dW5tZW51IHVuZG8gdW5kb2pvaW4gdW5kb2xpc3QgdW5hYmJyZXZpYXRlIHVuaGlkZSB1bmxldCB1bmxvY2t2YXIgdW5tYXAgdW5tZW51IHVuc2lsZW50IHVwZGF0ZSB2Z2xvYmFsIHZlcnNpb24gdmVyYm9zZSB2ZXJ0aWNhbCB2aW1ncmVwIHZpbWdyZXBhZGQgdmlzdWFsIHZpdXNhZ2UgdmlldyB2bWFwIHZtYXBjbGVhciB2bWVudSB2bmV3IHZub3JlbWFwIHZub3JlbWVudSB2c3BsaXQgdnVubWFwIHZ1bm1lbnUgd3JpdGUgd05leHQgd2FsbCB3aGlsZSB3aW5zaXplIHdpbmNtZCB3aW5wb3Mgd25leHQgd3ByZXZpb3VzIHdxYWxsIHdzdmVyYiB3dW5kbyB3dmltaW5mbyB4aXQgeGFsbCB4bWFwY2xlYXIgeG1hcCB4bWVudSB4bm9yZW1hcCB4bm9yZW1lbnUgeHVubWFwIHh1bm1lbnUgeWFuayIsCiAgICAgICAgYnVpbHRfaW46ICJzeW5JRHRyYW5zIGF0YW4yIHJhbmdlIG1hdGNoYXJnIGRpZF9maWxldHlwZSBhc2luIGZlZWRrZXlzIHhvciBhcmd2IGNvbXBsZXRlX2NoZWNrIGFkZCBnZXR3aW5wb3N4IGdldHFmbGlzdCBnZXR3aW5wb3N5IHNjcmVlbmNvbCBjbGVhcm1hdGNoZXMgZW1wdHkgZXh0ZW5kIGdldGNtZHBvcyBtemV2YWwgZ2FyYmFnZWNvbGxlY3Qgc2V0cmVnIGNlaWwgc3FydCBkaWZmX2hsSUQgaW5wdXRzZWNyZXQgZ2V0IGdldGZwZXJtIGdldHBpZCBmaWxld3JpdGFibGUgc2hpZnR3aWR0aCBtYXggc2luaCBpc2RpcmVjdG9yeSBzeW5JRCBzeXN0ZW0gaW5wdXRyZXN0b3JlIHdpbmxpbmUgYXRhbiB2aXN1YWxtb2RlIGlucHV0bGlzdCB0YWJwYWdld2lubnIgcm91bmQgZ2V0cmVndHlwZSBtYXBjaGVjayBoYXNtYXB0byBoaXN0ZGVsIGFyZ2lkeCBmaW5kZmlsZSBzaGEyNTYgZXhpc3RzIHRvdXBwZXIgZ2V0Y21kbGluZSB0YWdsaXN0IHN0cmluZyBnZXRtYXRjaGVzIGJ1Zm5yIHN0cmZ0aW1lIHdpbndpZHRoIGJ1ZmV4aXN0cyBzdHJ0cmFucyB0YWJwYWdlYnVmbGlzdCBzZXRjbWRwb3MgcmVtb3RlX3JlYWQgcHJpbnRmIHNldGxvY2xpc3QgZ2V0cG9zIGdldGxpbmUgYnVmd2lubnIgZmxvYXQybnIgbGVuIGdldGNtZHR5cGUgZGlmZl9maWxsZXIgbHVhZXZhbCByZXNvbHZlIGxpYmNhbGxuciBmb2xkY2xvc2VkZW5kIHJldmVyc2UgZmlsdGVyIGhhc19rZXkgYnVmbmFtZSBzdHIyZmxvYXQgc3RybGVuIHNldGxpbmUgZ2V0Y2hhcm1vZCBzZXRidWZ2YXIgaW5kZXggc2VhcmNocG9zIHNoZWxsZXNjYXBlIHVuZG9maWxlIGZvbGRjbG9zZWQgc2V0cWZsaXN0IGJ1Zmxpc3RlZCBzdHJjaGFycyBzdHIybnIgdmlydGNvbCBmbG9vciByZW1vdmUgdW5kb3RyZWUgcmVtb3RlX2V4cHIgd2luaGVpZ2h0IGdldHRhYndpbnZhciByZWx0aW1lIGN1cnNvciB0YWJwYWdlbnIgZmluZGRpciBsb2NhbHRpbWUgYWNvcyBnZXRsb2NsaXN0IHNlYXJjaCB0YW5oIG1hdGNoZW5kIHJlbmFtZSBnZXR0YWJ2YXIgc3RyZGlzcGxheXdpZHRoIHR5cGUgYWJzIHB5M2V2YWwgc2V0d2ludmFyIHRvbG93ZXIgd2lsZG1lbnVtb2RlIGxvZzEwIHNwZWxsc3VnZ2VzdCBidWZsb2FkZWQgc3luY29uY2VhbGVkIG5leHRub25ibGFuayBzZXJ2ZXIyY2xpZW50IGNvbXBsZXRlIHNldHRhYndpbnZhciBleGVjdXRhYmxlIGlucHV0IHdpbmNvbCBzZXRtYXRjaGVzIGdldGZ0eXBlIGhsSUQgaW5wdXRzYXZlIHNlYXJjaHBhaXIgb3Igc2NyZWVucm93IGxpbmUgc2V0dGFidmFyIGhpc3RhZGQgZGVlcGNvcHkgc3RycGFydCByZW1vdGVfcGVlayBhbmQgZXZhbCBnZXRmdGltZSBzdWJtYXRjaCBzY3JlZW5jaGFyIHdpbnNhdmV2aWV3IG1hdGNoYWRkIG1rZGlyIHNjcmVlbmF0dHIgZ2V0Zm9udG5hbWUgbGliY2FsbCByZWx0aW1lc3RyIGdldGZzaXplIHdpbm5yIGludmVydCBwb3cgZ2V0YnVmbGluZSBieXRlMmxpbmUgc291bmRmb2xkIHJlcGVhdCBmbmFtZWVzY2FwZSB0YWdmaWxlcyBzaW4gc3Ryd2lkdGggc3BlbGxiYWR3b3JkIHRydW5jIG1hcGFyZyBsb2cgbGlzcGluZGVudCBob3N0bmFtZSBzZXRwb3MgZ2xvYnBhdGggcmVtb3RlX2ZvcmVncm91bmQgZ2V0Y2hhciBzeW5JRGF0dHIgZm5hbWVtb2RpZnkgY3Njb3BlX2Nvbm5lY3Rpb24gc3RyaWR4IHdpbmJ1Zm5yIGluZGVudCBtaW4gY29tcGxldGVfYWRkIG5yMmNoYXIgc2VhcmNocGFpcnBvcyBpbnB1dGRpYWxvZyB2YWx1ZXMgbWF0Y2hsaXN0IGl0ZW1zIGhsZXhpc3RzIHN0cnJpZHggYnJvd3NlZGlyIGV4cGFuZCBmbW9kIHBhdGhzaG9ydGVuIGxpbmUyYnl0ZSBhcmdjIGNvdW50IGdldHdpbnZhciBnbG9iIGZvbGR0ZXh0cmVzdWx0IGdldHJlZyBmb3JlZ3JvdW5kIGNvc2ggbWF0Y2hkZWxldGUgaGFzIGNoYXIybnIgc2ltcGxpZnkgaGlzdGdldCBzZWFyY2hkZWNsIGljb252IHdpbnJlc3RjbWQgcHVtdmlzaWJsZSB3cml0ZWZpbGUgZm9sZGxldmVsIGhhc2xvY2FsZGlyIGtleXMgY29zIG1hdGNoc3RyIGZvbGR0ZXh0IGhpc3RuciB0YW4gdGVtcG5hbWUgZ2V0Y3dkIGJ5dGVpZHggZ2V0YnVmdmFyIGlzbG9ja2VkIGVzY2FwZSBldmVudGhhbmRsZXIgcmVtb3RlX3NlbmQgc2VydmVybGlzdCB3aW5yZXN0dmlldyBzeW5zdGFjayBweWV2YWwgcHJldm5vbmJsYW5rIHJlYWRmaWxlIGNpbmRlbnQgZmlsZXJlYWRhYmxlIGNoYW5nZW5yIGV4cCIKICAgICAgfSwKICAgICAgaWxsZWdhbDogLzsvLAogICAgICBjb250YWluczogW2UuTlVNQkVSX01PREUsIHtjbGFzc05hbWU6ICJzdHJpbmciLCBiZWdpbjogIiciLCBlbmQ6ICInIiwgaWxsZWdhbDogIlxcbiJ9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICBiZWdpbjogLyIoXFwifFxuXFx8W14iXG5dKSoiLwogICAgICB9LCBlLkNPTU1FTlQoJyInLCAiJCIpLCB7Y2xhc3NOYW1lOiAidmFyaWFibGUiLCBiZWdpbjogL1tid3RnbHNhdl06W1x3XGRfXSovfSwgewogICAgICAgIGNsYXNzTmFtZTogImZ1bmN0aW9uIiwKICAgICAgICBiZWdpbktleXdvcmRzOiAiZnVuY3Rpb24gZnVuY3Rpb24hIiwKICAgICAgICBlbmQ6ICIkIiwKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgY29udGFpbnM6IFtlLlRJVExFX01PREUsIHtjbGFzc05hbWU6ICJwYXJhbXMiLCBiZWdpbjogIlxcKCIsIGVuZDogIlxcKSJ9XQogICAgICB9LCB7Y2xhc3NOYW1lOiAic3ltYm9sIiwgYmVnaW46IC88W1x3LV0rPi99XQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJvYmplY3RpdmVjIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0gL1thLXpBLVpAXVthLXpBLVowLTlfXSovLCBfID0geyRwYXR0ZXJuOiBuLCBrZXl3b3JkOiAiQGludGVyZmFjZSBAY2xhc3MgQHByb3RvY29sIEBpbXBsZW1lbnRhdGlvbiJ9OwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIk9iamVjdGl2ZS1DIiwKICAgICAgYWxpYXNlczogWyJtbSIsICJvYmpjIiwgIm9iai1jIl0sCiAgICAgIGtleXdvcmRzOiB7CiAgICAgICAgJHBhdHRlcm46IG4sCiAgICAgICAga2V5d29yZDogImludCBmbG9hdCB3aGlsZSBjaGFyIGV4cG9ydCBzaXplb2YgdHlwZWRlZiBjb25zdCBzdHJ1Y3QgZm9yIHVuaW9uIHVuc2lnbmVkIGxvbmcgdm9sYXRpbGUgc3RhdGljIGJvb2wgbXV0YWJsZSBpZiBkbyByZXR1cm4gZ290byB2b2lkIGVudW0gZWxzZSBicmVhayBleHRlcm4gYXNtIGNhc2Ugc2hvcnQgZGVmYXVsdCBkb3VibGUgcmVnaXN0ZXIgZXhwbGljaXQgc2lnbmVkIHR5cGVuYW1lIHRoaXMgc3dpdGNoIGNvbnRpbnVlIHdjaGFyX3QgaW5saW5lIHJlYWRvbmx5IGFzc2lnbiByZWFkd3JpdGUgc2VsZiBAc3luY2hyb25pemVkIGlkIHR5cGVvZiBub25hdG9taWMgc3VwZXIgdW5pY2hhciBJQk91dGxldCBJQkFjdGlvbiBzdHJvbmcgd2VhayBjb3B5IGluIG91dCBpbm91dCBieWNvcHkgYnlyZWYgb25ld2F5IF9fc3Ryb25nIF9fd2VhayBfX2Jsb2NrIF9fYXV0b3JlbGVhc2luZyBAcHJpdmF0ZSBAcHJvdGVjdGVkIEBwdWJsaWMgQHRyeSBAcHJvcGVydHkgQGVuZCBAdGhyb3cgQGNhdGNoIEBmaW5hbGx5IEBhdXRvcmVsZWFzZXBvb2wgQHN5bnRoZXNpemUgQGR5bmFtaWMgQHNlbGVjdG9yIEBvcHRpb25hbCBAcmVxdWlyZWQgQGVuY29kZSBAcGFja2FnZSBAaW1wb3J0IEBkZWZzIEBjb21wYXRpYmlsaXR5X2FsaWFzIF9fYnJpZGdlIF9fYnJpZGdlX3RyYW5zZmVyIF9fYnJpZGdlX3JldGFpbmVkIF9fYnJpZGdlX3JldGFpbiBfX2NvdmFyaWFudCBfX2NvbnRyYXZhcmlhbnQgX19raW5kb2YgX05vbm51bGwgX051bGxhYmxlIF9OdWxsX3Vuc3BlY2lmaWVkIF9fRlVOQ1RJT05fXyBfX1BSRVRUWV9GVU5DVElPTl9fIF9fYXR0cmlidXRlX18gZ2V0dGVyIHNldHRlciByZXRhaW4gdW5zYWZlX3VucmV0YWluZWQgbm9ubnVsbCBudWxsYWJsZSBudWxsX3Vuc3BlY2lmaWVkIG51bGxfcmVzZXR0YWJsZSBjbGFzcyBpbnN0YW5jZXR5cGUgTlNfREVTSUdOQVRFRF9JTklUSUFMSVpFUiBOU19VTkFWQUlMQUJMRSBOU19SRVFVSVJFU19TVVBFUiBOU19SRVRVUk5TX0lOTkVSX1BPSU5URVIgTlNfSU5MSU5FIE5TX0FWQUlMQUJMRSBOU19ERVBSRUNBVEVEIE5TX0VOVU0gTlNfT1BUSU9OUyBOU19TV0lGVF9VTkFWQUlMQUJMRSBOU19BU1NVTUVfTk9OTlVMTF9CRUdJTiBOU19BU1NVTUVfTk9OTlVMTF9FTkQgTlNfUkVGSU5FRF9GT1JfU1dJRlQgTlNfU1dJRlRfTkFNRSBOU19TV0lGVF9OT1RIUk9XIE5TX0RVUklORyBOU19IQU5ETEVSIE5TX0VOREhBTkRMRVIgTlNfVkFMVUVSRVRVUk4gTlNfVk9JRFJFVFVSTiIsCiAgICAgICAgbGl0ZXJhbDogImZhbHNlIHRydWUgRkFMU0UgVFJVRSBuaWwgWUVTIE5PIE5VTEwiLAogICAgICAgIGJ1aWx0X2luOiAiQk9PTCBkaXNwYXRjaF9vbmNlX3QgZGlzcGF0Y2hfcXVldWVfdCBkaXNwYXRjaF9zeW5jIGRpc3BhdGNoX2FzeW5jIGRpc3BhdGNoX29uY2UiCiAgICAgIH0sCiAgICAgIGlsbGVnYWw6ICI8LyIsCiAgICAgIGNvbnRhaW5zOiBbewogICAgICAgIGNsYXNzTmFtZTogImJ1aWx0X2luIiwKICAgICAgICBiZWdpbjogIlxcYihBVnxDQXxDRnxDR3xDSXxDTHxDTXxDTnxDVHxNS3xNUHxNVEt8TVRMfE5TfFNDTnxTS3xVSXxXS3xYQylcXHcrIgogICAgICB9LCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREUsIGUuQ19OVU1CRVJfTU9ERSwgZS5RVU9URV9TVFJJTkdfTU9ERSwgZS5BUE9TX1NUUklOR19NT0RFLCB7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogJ0AiJywgZW5kOiAnIicsIGlsbGVnYWw6ICJcXG4iLCBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRV19XQogICAgICB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAibWV0YSIsCiAgICAgICAgYmVnaW46IC8jXHMqW2Etel0rXGIvLAogICAgICAgIGVuZDogLyQvLAogICAgICAgIGtleXdvcmRzOiB7Im1ldGEta2V5d29yZCI6ICJpZiBlbHNlIGVsaWYgZW5kaWYgZGVmaW5lIHVuZGVmIHdhcm5pbmcgZXJyb3IgbGluZSBwcmFnbWEgaWZkZWYgaWZuZGVmIGluY2x1ZGUifSwKICAgICAgICBjb250YWluczogW3sKICAgICAgICAgIGJlZ2luOiAvXFxcbi8sCiAgICAgICAgICByZWxldmFuY2U6IDAKICAgICAgICB9LCBlLmluaGVyaXQoZS5RVU9URV9TVFJJTkdfTU9ERSwge2NsYXNzTmFtZTogIm1ldGEtc3RyaW5nIn0pLCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJtZXRhLXN0cmluZyIsCiAgICAgICAgICBiZWdpbjogLzwuKj8+LywKICAgICAgICAgIGVuZDogLyQvLAogICAgICAgICAgaWxsZWdhbDogIlxcbiIKICAgICAgICB9LCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREVdCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJjbGFzcyIsCiAgICAgICAgYmVnaW46ICIoIiArIF8ua2V5d29yZC5zcGxpdCgiICIpLmpvaW4oInwiKSArICIpXFxiIiwKICAgICAgICBlbmQ6ICIoe3wkKSIsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAga2V5d29yZHM6IF8sCiAgICAgICAgY29udGFpbnM6IFtlLlVOREVSU0NPUkVfVElUTEVfTU9ERV0KICAgICAgfSwge2JlZ2luOiAiXFwuIiArIGUuVU5ERVJTQ09SRV9JREVOVF9SRSwgcmVsZXZhbmNlOiAwfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiYXBhY2hlIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0ge2NsYXNzTmFtZTogIm51bWJlciIsIGJlZ2luOiAiXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM30oOlxcZHsxLDV9KT8ifTsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJBcGFjaGUgY29uZmlnIiwKICAgICAgYWxpYXNlczogWyJhcGFjaGVjb25mIl0sCiAgICAgIGNhc2VfaW5zZW5zaXRpdmU6ICEwLAogICAgICBjb250YWluczogW2UuSEFTSF9DT01NRU5UX01PREUsIHsKICAgICAgICBjbGFzc05hbWU6ICJzZWN0aW9uIiwKICAgICAgICBiZWdpbjogIjwvPyIsCiAgICAgICAgZW5kOiAiPiIsCiAgICAgICAgY29udGFpbnM6IFtuLCB7Y2xhc3NOYW1lOiAibnVtYmVyIiwgYmVnaW46ICI6XFxkezEsNX0ifSwgZS5pbmhlcml0KGUuUVVPVEVfU1RSSU5HX01PREUsIHtyZWxldmFuY2U6IDB9KV0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogImF0dHJpYnV0ZSIsCiAgICAgICAgYmVnaW46IC9cdysvLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICBrZXl3b3Jkczoge25vbWFya3VwOiAib3JkZXIgZGVueSBhbGxvdyBzZXRlbnYgcmV3cml0ZXJ1bGUgcmV3cml0ZWVuZ2luZSByZXdyaXRlY29uZCBkb2N1bWVudHJvb3Qgc2V0aGFuZGxlciBlcnJvcmRvY3VtZW50IGxvYWRtb2R1bGUgb3B0aW9ucyBoZWFkZXIgbGlzdGVuIHNlcnZlcnJvb3Qgc2VydmVybmFtZSJ9LAogICAgICAgIHN0YXJ0czogewogICAgICAgICAgZW5kOiAvJC8sCiAgICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgICBrZXl3b3Jkczoge2xpdGVyYWw6ICJvbiBvZmYgYWxsIGRlbnkgYWxsb3cifSwKICAgICAgICAgIGNvbnRhaW5zOiBbe2NsYXNzTmFtZTogIm1ldGEiLCBiZWdpbjogIlxcc1xcWyIsIGVuZDogIlxcXSQifSwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJ2YXJpYWJsZSIsCiAgICAgICAgICAgIGJlZ2luOiAiW1xcJCVdXFx7IiwKICAgICAgICAgICAgZW5kOiAiXFx9IiwKICAgICAgICAgICAgY29udGFpbnM6IFsic2VsZiIsIHtjbGFzc05hbWU6ICJudW1iZXIiLCBiZWdpbjogIltcXCQlXVxcZCsifV0KICAgICAgICAgIH0sIG4sIHtjbGFzc05hbWU6ICJudW1iZXIiLCBiZWdpbjogIlxcZCsifSwgZS5RVU9URV9TVFJJTkdfTU9ERV0KICAgICAgICB9CiAgICAgIH1dLAogICAgICBpbGxlZ2FsOiAvXFMvCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoImNvZmZlZXNjcmlwdCIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgY29uc3QgZSA9IFsiYXMiLCAiaW4iLCAib2YiLCAiaWYiLCAiZm9yIiwgIndoaWxlIiwgImZpbmFsbHkiLCAidmFyIiwgIm5ldyIsICJmdW5jdGlvbiIsICJkbyIsICJyZXR1cm4iLCAidm9pZCIsICJlbHNlIiwgImJyZWFrIiwgImNhdGNoIiwgImluc3RhbmNlb2YiLCAid2l0aCIsICJ0aHJvdyIsICJjYXNlIiwgImRlZmF1bHQiLCAidHJ5IiwgInN3aXRjaCIsICJjb250aW51ZSIsICJ0eXBlb2YiLCAiZGVsZXRlIiwgImxldCIsICJ5aWVsZCIsICJjb25zdCIsICJjbGFzcyIsICJkZWJ1Z2dlciIsICJhc3luYyIsICJhd2FpdCIsICJzdGF0aWMiLCAiaW1wb3J0IiwgImZyb20iLCAiZXhwb3J0IiwgImV4dGVuZHMiXSwKICAgIG4gPSBbInRydWUiLCAiZmFsc2UiLCAibnVsbCIsICJ1bmRlZmluZWQiLCAiTmFOIiwgIkluZmluaXR5Il0sCiAgICBhID0gW10uY29uY2F0KFsic2V0SW50ZXJ2YWwiLCAic2V0VGltZW91dCIsICJjbGVhckludGVydmFsIiwgImNsZWFyVGltZW91dCIsICJyZXF1aXJlIiwgImV4cG9ydHMiLCAiZXZhbCIsICJpc0Zpbml0ZSIsICJpc05hTiIsICJwYXJzZUZsb2F0IiwgInBhcnNlSW50IiwgImRlY29kZVVSSSIsICJkZWNvZGVVUklDb21wb25lbnQiLCAiZW5jb2RlVVJJIiwgImVuY29kZVVSSUNvbXBvbmVudCIsICJlc2NhcGUiLCAidW5lc2NhcGUiXSwgWyJhcmd1bWVudHMiLCAidGhpcyIsICJzdXBlciIsICJjb25zb2xlIiwgIndpbmRvdyIsICJkb2N1bWVudCIsICJsb2NhbFN0b3JhZ2UiLCAibW9kdWxlIiwgImdsb2JhbCJdLCBbIkludGwiLCAiRGF0YVZpZXciLCAiTnVtYmVyIiwgIk1hdGgiLCAiRGF0ZSIsICJTdHJpbmciLCAiUmVnRXhwIiwgIk9iamVjdCIsICJGdW5jdGlvbiIsICJCb29sZWFuIiwgIkVycm9yIiwgIlN5bWJvbCIsICJTZXQiLCAiTWFwIiwgIldlYWtTZXQiLCAiV2Vha01hcCIsICJQcm94eSIsICJSZWZsZWN0IiwgIkpTT04iLCAiUHJvbWlzZSIsICJGbG9hdDY0QXJyYXkiLCAiSW50MTZBcnJheSIsICJJbnQzMkFycmF5IiwgIkludDhBcnJheSIsICJVaW50MTZBcnJheSIsICJVaW50MzJBcnJheSIsICJGbG9hdDMyQXJyYXkiLCAiQXJyYXkiLCAiVWludDhBcnJheSIsICJVaW50OENsYW1wZWRBcnJheSIsICJBcnJheUJ1ZmZlciJdLCBbIkV2YWxFcnJvciIsICJJbnRlcm5hbEVycm9yIiwgIlJhbmdlRXJyb3IiLCAiUmVmZXJlbmNlRXJyb3IiLCAiU3ludGF4RXJyb3IiLCAiVHlwZUVycm9yIiwgIlVSSUVycm9yIl0pOwogIHJldHVybiBmdW5jdGlvbiAocikgewogICAgdmFyIHQgPSB7CiAgICAgICAga2V5d29yZDogZS5jb25jYXQoWyJ0aGVuIiwgInVubGVzcyIsICJ1bnRpbCIsICJsb29wIiwgImJ5IiwgIndoZW4iLCAiYW5kIiwgIm9yIiwgImlzIiwgImlzbnQiLCAibm90Il0pLmZpbHRlcigoZSA9PiBuID0+ICFlLmluY2x1ZGVzKG4pKShbInZhciIsICJjb25zdCIsICJsZXQiLCAiZnVuY3Rpb24iLCAic3RhdGljIl0pKS5qb2luKCIgIiksCiAgICAgICAgbGl0ZXJhbDogbi5jb25jYXQoWyJ5ZXMiLCAibm8iLCAib24iLCAib2ZmIl0pLmpvaW4oIiAiKSwKICAgICAgICBidWlsdF9pbjogYS5jb25jYXQoWyJucG0iLCAicHJpbnQiXSkuam9pbigiICIpCiAgICAgIH0sIGkgPSAiW0EtWmEteiRfXVswLTlBLVphLXokX10qIiwgcyA9IHtjbGFzc05hbWU6ICJzdWJzdCIsIGJlZ2luOiAvI1x7LywgZW5kOiAvfS8sIGtleXdvcmRzOiB0fSwKICAgICAgbyA9IFtyLkJJTkFSWV9OVU1CRVJfTU9ERSwgci5pbmhlcml0KHIuQ19OVU1CRVJfTU9ERSwgewogICAgICAgIHN0YXJ0czogewogICAgICAgICAgZW5kOiAiKFxccyovKT8iLAogICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgfQogICAgICB9KSwgewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46IC8nJycvLCBlbmQ6IC8nJycvLCBjb250YWluczogW3IuQkFDS1NMQVNIX0VTQ0FQRV19LCB7CiAgICAgICAgICBiZWdpbjogLycvLAogICAgICAgICAgZW5kOiAvJy8sCiAgICAgICAgICBjb250YWluczogW3IuQkFDS1NMQVNIX0VTQ0FQRV0KICAgICAgICB9LCB7YmVnaW46IC8iIiIvLCBlbmQ6IC8iIiIvLCBjb250YWluczogW3IuQkFDS1NMQVNIX0VTQ0FQRSwgc119LCB7CiAgICAgICAgICBiZWdpbjogLyIvLAogICAgICAgICAgZW5kOiAvIi8sCiAgICAgICAgICBjb250YWluczogW3IuQkFDS1NMQVNIX0VTQ0FQRSwgc10KICAgICAgICB9XQogICAgICB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAicmVnZXhwIiwKICAgICAgICB2YXJpYW50czogW3sKICAgICAgICAgIGJlZ2luOiAiLy8vIiwKICAgICAgICAgIGVuZDogIi8vLyIsCiAgICAgICAgICBjb250YWluczogW3MsIHIuSEFTSF9DT01NRU5UX01PREVdCiAgICAgICAgfSwge2JlZ2luOiAiLy9bZ2ltXXswLDN9KD89XFxXKSIsIHJlbGV2YW5jZTogMH0sIHtiZWdpbjogL1wvKD8hWyAqXSkuKj8oPyFbXFxdKS5cL1tnaW1dezAsM30oPz1cVykvfV0KICAgICAgfSwge2JlZ2luOiAiQCIgKyBpfSwgewogICAgICAgIHN1Ykxhbmd1YWdlOiAiamF2YXNjcmlwdCIsCiAgICAgICAgZXhjbHVkZUJlZ2luOiAhMCwKICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogImBgYCIsIGVuZDogImBgYCJ9LCB7YmVnaW46ICJgIiwgZW5kOiAiYCJ9XQogICAgICB9XTsKICAgIHMuY29udGFpbnMgPSBvOwogICAgdmFyIGMgPSByLmluaGVyaXQoci5USVRMRV9NT0RFLCB7YmVnaW46IGl9KSwgbCA9IHsKICAgICAgY2xhc3NOYW1lOiAicGFyYW1zIiwKICAgICAgYmVnaW46ICJcXChbXlxcKF0iLAogICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgIGNvbnRhaW5zOiBbe2JlZ2luOiAvXCgvLCBlbmQ6IC9cKS8sIGtleXdvcmRzOiB0LCBjb250YWluczogWyJzZWxmIl0uY29uY2F0KG8pfV0KICAgIH07CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiQ29mZmVlU2NyaXB0IiwKICAgICAgYWxpYXNlczogWyJjb2ZmZWUiLCAiY3NvbiIsICJpY2VkIl0sCiAgICAgIGtleXdvcmRzOiB0LAogICAgICBpbGxlZ2FsOiAvXC9cKi8sCiAgICAgIGNvbnRhaW5zOiBvLmNvbmNhdChbci5DT01NRU5UKCIjIyMiLCAiIyMjIiksIHIuSEFTSF9DT01NRU5UX01PREUsIHsKICAgICAgICBjbGFzc05hbWU6ICJmdW5jdGlvbiIsCiAgICAgICAgYmVnaW46ICJeXFxzKiIgKyBpICsgIlxccyo9XFxzKihcXCguKlxcKSk/XFxzKlxcQlstPV0+IiwKICAgICAgICBlbmQ6ICJbLT1dPiIsCiAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgIGNvbnRhaW5zOiBbYywgbF0KICAgICAgfSwgewogICAgICAgIGJlZ2luOiAvWzpcKCw9XVxzKi8sCiAgICAgICAgcmVsZXZhbmNlOiAwLAogICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgICAgYmVnaW46ICIoXFwoLipcXCkpP1xccypcXEJbLT1dPiIsCiAgICAgICAgICBlbmQ6ICJbLT1dPiIsCiAgICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgICBjb250YWluczogW2xdCiAgICAgICAgfV0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogImNsYXNzIiwKICAgICAgICBiZWdpbktleXdvcmRzOiAiY2xhc3MiLAogICAgICAgIGVuZDogIiQiLAogICAgICAgIGlsbGVnYWw6IC9bOj0iXFtcXV0vLAogICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luS2V5d29yZHM6ICJleHRlbmRzIiwgZW5kc1dpdGhQYXJlbnQ6ICEwLCBpbGxlZ2FsOiAvWzo9IlxbXF1dLywgY29udGFpbnM6IFtjXX0sIGNdCiAgICAgIH0sIHtiZWdpbjogaSArICI6IiwgZW5kOiAiOiIsIHJldHVybkJlZ2luOiAhMCwgcmV0dXJuRW5kOiAhMCwgcmVsZXZhbmNlOiAwfV0pCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInJ1YnkiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSAiW2EtekEtWl9dXFx3KlshPz1dP3xbLSt+XVxcQHw8PHw+Pnw9fnw9PT0/fDw9PnxbPD5dPT98XFwqXFwqfFstLyslXiYqfmB8XXxcXFtcXF09PyIsIGEgPSB7CiAgICAgICAga2V5d29yZDogImFuZCB0aGVuIGRlZmluZWQgbW9kdWxlIGluIHJldHVybiByZWRvIGlmIEJFR0lOIHJldHJ5IGVuZCBmb3Igc2VsZiB3aGVuIG5leHQgdW50aWwgZG8gYmVnaW4gdW5sZXNzIEVORCByZXNjdWUgZWxzZSBicmVhayB1bmRlZiBub3Qgc3VwZXIgY2xhc3MgY2FzZSByZXF1aXJlIHlpZWxkIGFsaWFzIHdoaWxlIGVuc3VyZSBlbHNpZiBvciBpbmNsdWRlIGF0dHJfcmVhZGVyIGF0dHJfd3JpdGVyIGF0dHJfYWNjZXNzb3IiLAogICAgICAgIGxpdGVyYWw6ICJ0cnVlIGZhbHNlIG5pbCIKICAgICAgfSwgcyA9IHtjbGFzc05hbWU6ICJkb2N0YWciLCBiZWdpbjogIkBbQS1aYS16XSsifSwgaSA9IHtiZWdpbjogIiM8IiwgZW5kOiAiPiJ9LAogICAgICByID0gW2UuQ09NTUVOVCgiIyIsICIkIiwge2NvbnRhaW5zOiBbc119KSwgZS5DT01NRU5UKCJeXFw9YmVnaW4iLCAiXlxcPWVuZCIsIHsKICAgICAgICBjb250YWluczogW3NdLAogICAgICAgIHJlbGV2YW5jZTogMTAKICAgICAgfSksIGUuQ09NTUVOVCgiXl9fRU5EX18iLCAiXFxuJCIpXSwgYyA9IHtjbGFzc05hbWU6ICJzdWJzdCIsIGJlZ2luOiAiI1xceyIsIGVuZDogIn0iLCBrZXl3b3JkczogYX0sIHQgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgY10sCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46IC8nLywgZW5kOiAvJy99LCB7YmVnaW46IC8iLywgZW5kOiAvIi99LCB7YmVnaW46IC9gLywgZW5kOiAvYC99LCB7CiAgICAgICAgICBiZWdpbjogIiVbcVF3V3hdP1xcKCIsCiAgICAgICAgICBlbmQ6ICJcXCkiCiAgICAgICAgfSwge2JlZ2luOiAiJVtxUXdXeF0/XFxbIiwgZW5kOiAiXFxdIn0sIHtiZWdpbjogIiVbcVF3V3hdP3siLCBlbmQ6ICJ9In0sIHsKICAgICAgICAgIGJlZ2luOiAiJVtxUXdXeF0/PCIsCiAgICAgICAgICBlbmQ6ICI+IgogICAgICAgIH0sIHtiZWdpbjogIiVbcVF3V3hdPy8iLCBlbmQ6ICIvIn0sIHtiZWdpbjogIiVbcVF3V3hdPyUiLCBlbmQ6ICIlIn0sIHsKICAgICAgICAgIGJlZ2luOiAiJVtxUXdXeF0/LSIsCiAgICAgICAgICBlbmQ6ICItIgogICAgICAgIH0sIHsKICAgICAgICAgIGJlZ2luOiAiJVtxUXdXeF0/XFx8IiwKICAgICAgICAgIGVuZDogIlxcfCIKICAgICAgICB9LCB7YmVnaW46IC9cQlw/KFxcXGR7MSwzfXxcXHhbQS1GYS1mMC05XXsxLDJ9fFxcdVtBLUZhLWYwLTldezR9fFxcP1xTKVxiL30sIHsKICAgICAgICAgIGJlZ2luOiAvPDxbLX5dPyc/KFx3KykoPzoufFxuKSo/XG5ccypcMVxiLywKICAgICAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luOiAvPDxbLX5dPyc/L30sIGUuRU5EX1NBTUVfQVNfQkVHSU4oewogICAgICAgICAgICBiZWdpbjogLyhcdyspLywKICAgICAgICAgICAgZW5kOiAvKFx3KykvLAogICAgICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgY10KICAgICAgICAgIH0pXQogICAgICAgIH1dCiAgICAgIH0sIGIgPSB7Y2xhc3NOYW1lOiAicGFyYW1zIiwgYmVnaW46ICJcXCgiLCBlbmQ6ICJcXCkiLCBlbmRzUGFyZW50OiAhMCwga2V5d29yZHM6IGF9LCBkID0gW3QsIGksIHsKICAgICAgICBjbGFzc05hbWU6ICJjbGFzcyIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogImNsYXNzIG1vZHVsZSIsCiAgICAgICAgZW5kOiAiJHw7IiwKICAgICAgICBpbGxlZ2FsOiAvPS8sCiAgICAgICAgY29udGFpbnM6IFtlLmluaGVyaXQoZS5USVRMRV9NT0RFLCB7YmVnaW46ICJbQS1aYS16X11cXHcqKDo6XFx3KykqKFxcP3xcXCEpPyJ9KSwgewogICAgICAgICAgYmVnaW46ICI8XFxzKiIsCiAgICAgICAgICBjb250YWluczogW3tiZWdpbjogIigiICsgZS5JREVOVF9SRSArICI6Oik/IiArIGUuSURFTlRfUkV9XQogICAgICAgIH1dLmNvbmNhdChyKQogICAgICB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgIGJlZ2luS2V5d29yZHM6ICJkZWYiLAogICAgICAgIGVuZDogIiR8OyIsCiAgICAgICAgY29udGFpbnM6IFtlLmluaGVyaXQoZS5USVRMRV9NT0RFLCB7YmVnaW46IG59KSwgYl0uY29uY2F0KHIpCiAgICAgIH0sIHtiZWdpbjogZS5JREVOVF9SRSArICI6OiJ9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAic3ltYm9sIiwKICAgICAgICBiZWdpbjogZS5VTkRFUlNDT1JFX0lERU5UX1JFICsgIihcXCF8XFw/KT86IiwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfSwge2NsYXNzTmFtZTogInN5bWJvbCIsIGJlZ2luOiAiOig/IVxccykiLCBjb250YWluczogW3QsIHtiZWdpbjogbn1dLCByZWxldmFuY2U6IDB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAibnVtYmVyIiwKICAgICAgICBiZWdpbjogIihcXGIwWzAtN19dKyl8KFxcYjB4WzAtOWEtZkEtRl9dKyl8KFxcYlsxLTldWzAtOV9dKihcXC5bMC05X10rKT8pfFswX11cXGIiLAogICAgICAgIHJlbGV2YW5jZTogMAogICAgICB9LCB7YmVnaW46ICIoXFwkXFxXKXwoKFxcJHxcXEBcXEA/KShcXHcrKSkifSwgewogICAgICAgIGNsYXNzTmFtZTogInBhcmFtcyIsCiAgICAgICAgYmVnaW46IC9cfC8sCiAgICAgICAgZW5kOiAvXHwvLAogICAgICAgIGtleXdvcmRzOiBhCiAgICAgIH0sIHsKICAgICAgICBiZWdpbjogIigiICsgZS5SRV9TVEFSVEVSU19SRSArICJ8dW5sZXNzKVxccyoiLAogICAgICAgIGtleXdvcmRzOiAidW5sZXNzIiwKICAgICAgICBjb250YWluczogW2ksIHsKICAgICAgICAgIGNsYXNzTmFtZTogInJlZ2V4cCIsCiAgICAgICAgICBjb250YWluczogW2UuQkFDS1NMQVNIX0VTQ0FQRSwgY10sCiAgICAgICAgICBpbGxlZ2FsOiAvXG4vLAogICAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46ICIvIiwgZW5kOiAiL1thLXpdKiJ9LCB7YmVnaW46ICIlcnsiLCBlbmQ6ICJ9W2Etel0qIn0sIHsKICAgICAgICAgICAgYmVnaW46ICIlclxcKCIsCiAgICAgICAgICAgIGVuZDogIlxcKVthLXpdKiIKICAgICAgICAgIH0sIHtiZWdpbjogIiVyISIsIGVuZDogIiFbYS16XSoifSwge2JlZ2luOiAiJXJcXFsiLCBlbmQ6ICJcXF1bYS16XSoifV0KICAgICAgICB9XS5jb25jYXQociksCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH1dLmNvbmNhdChyKTsKICAgIGMuY29udGFpbnMgPSBkLCBiLmNvbnRhaW5zID0gZDsKICAgIHZhciBnID0gW3tiZWdpbjogL15ccyo9Pi8sIHN0YXJ0czoge2VuZDogIiQiLCBjb250YWluczogZH19LCB7CiAgICAgIGNsYXNzTmFtZTogIm1ldGEiLAogICAgICBiZWdpbjogIl4oWz4/XT58W1xcdyNdK1xcKFxcdytcXCk6XFxkKzpcXGQrPnwoXFx3Ky0pP1xcZCtcXC5cXGQrXFwuXFxkKHBcXGQrKT9bXj5dKz4pIiwKICAgICAgc3RhcnRzOiB7ZW5kOiAiJCIsIGNvbnRhaW5zOiBkfQogICAgfV07CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiUnVieSIsCiAgICAgIGFsaWFzZXM6IFsicmIiLCAiZ2Vtc3BlYyIsICJwb2RzcGVjIiwgInRob3IiLCAiaXJiIl0sCiAgICAgIGtleXdvcmRzOiBhLAogICAgICBpbGxlZ2FsOiAvXC9cKi8sCiAgICAgIGNvbnRhaW5zOiByLmNvbmNhdChnKS5jb25jYXQoZCkKICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiY3NoYXJwIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0gewogICAgICAgIGtleXdvcmQ6ICJhYnN0cmFjdCBhcyBiYXNlIGJvb2wgYnJlYWsgYnl0ZSBjYXNlIGNhdGNoIGNoYXIgY2hlY2tlZCBjb25zdCBjb250aW51ZSBkZWNpbWFsIGRlZmF1bHQgZGVsZWdhdGUgZG8gZG91YmxlIGVudW0gZXZlbnQgZXhwbGljaXQgZXh0ZXJuIGZpbmFsbHkgZml4ZWQgZmxvYXQgZm9yIGZvcmVhY2ggZ290byBpZiBpbXBsaWNpdCBpbiBpbml0IGludCBpbnRlcmZhY2UgaW50ZXJuYWwgaXMgbG9jayBsb25nIG9iamVjdCBvcGVyYXRvciBvdXQgb3ZlcnJpZGUgcGFyYW1zIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyByZWFkb25seSByZWYgc2J5dGUgc2VhbGVkIHNob3J0IHNpemVvZiBzdGFja2FsbG9jIHN0YXRpYyBzdHJpbmcgc3RydWN0IHN3aXRjaCB0aGlzIHRyeSB0eXBlb2YgdWludCB1bG9uZyB1bmNoZWNrZWQgdW5zYWZlIHVzaG9ydCB1c2luZyB2aXJ0dWFsIHZvaWQgdm9sYXRpbGUgd2hpbGUgYWRkIGFsaWFzIGFzY2VuZGluZyBhc3luYyBhd2FpdCBieSBkZXNjZW5kaW5nIGR5bmFtaWMgZXF1YWxzIGZyb20gZ2V0IGdsb2JhbCBncm91cCBpbnRvIGpvaW4gbGV0IG5hbWVvZiBvbiBvcmRlcmJ5IHBhcnRpYWwgcmVtb3ZlIHNlbGVjdCBzZXQgdmFsdWUgdmFyIHdoZW4gd2hlcmUgeWllbGQiLAogICAgICAgIGxpdGVyYWw6ICJudWxsIGZhbHNlIHRydWUiCiAgICAgIH0sIGkgPSBlLmluaGVyaXQoZS5USVRMRV9NT0RFLCB7YmVnaW46ICJbYS16QS1aXShcXC4/XFx3KSoifSksIGEgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAibnVtYmVyIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogIlxcYigwYlswMSddKykifSwge2JlZ2luOiAiKC0/KVxcYihbXFxkJ10rKFxcLltcXGQnXSopP3xcXC5bXFxkJ10rKSh1fFV8bHxMfHVsfFVMfGZ8RnxifEIpIn0sIHtiZWdpbjogIigtPykoXFxiMFt4WF1bYS1mQS1GMC05J10rfChcXGJbXFxkJ10rKFxcLltcXGQnXSopP3xcXC5bXFxkJ10rKShbZUVdWy0rXT9bXFxkJ10rKT8pIn1dLAogICAgICAgIHJlbGV2YW5jZTogMAogICAgICB9LCBzID0ge2NsYXNzTmFtZTogInN0cmluZyIsIGJlZ2luOiAnQCInLCBlbmQ6ICciJywgY29udGFpbnM6IFt7YmVnaW46ICciIid9XX0sCiAgICAgIHQgPSBlLmluaGVyaXQocywge2lsbGVnYWw6IC9cbi99KSwgbCA9IHtjbGFzc05hbWU6ICJzdWJzdCIsIGJlZ2luOiAieyIsIGVuZDogIn0iLCBrZXl3b3Jkczogbn0sCiAgICAgIHIgPSBlLmluaGVyaXQobCwge2lsbGVnYWw6IC9cbi99KSwgYyA9IHsKICAgICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICAgIGJlZ2luOiAvXCQiLywKICAgICAgICBlbmQ6ICciJywKICAgICAgICBpbGxlZ2FsOiAvXG4vLAogICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luOiAie3sifSwge2JlZ2luOiAifX0ifSwgZS5CQUNLU0xBU0hfRVNDQVBFLCByXQogICAgICB9LCBvID0gewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgYmVnaW46IC9cJEAiLywKICAgICAgICBlbmQ6ICciJywKICAgICAgICBjb250YWluczogW3tiZWdpbjogInt7In0sIHtiZWdpbjogIn19In0sIHtiZWdpbjogJyIiJ30sIGxdCiAgICAgIH0sIGcgPSBlLmluaGVyaXQobywge2lsbGVnYWw6IC9cbi8sIGNvbnRhaW5zOiBbe2JlZ2luOiAie3sifSwge2JlZ2luOiAifX0ifSwge2JlZ2luOiAnIiInfSwgcl19KTsKICAgIGwuY29udGFpbnMgPSBbbywgYywgcywgZS5BUE9TX1NUUklOR19NT0RFLCBlLlFVT1RFX1NUUklOR19NT0RFLCBhLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFXSwgci5jb250YWlucyA9IFtnLCBjLCB0LCBlLkFQT1NfU1RSSU5HX01PREUsIGUuUVVPVEVfU1RSSU5HX01PREUsIGEsIGUuaW5oZXJpdChlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCB7aWxsZWdhbDogL1xuL30pXTsKICAgIHZhciBkID0ge3ZhcmlhbnRzOiBbbywgYywgcywgZS5BUE9TX1NUUklOR19NT0RFLCBlLlFVT1RFX1NUUklOR19NT0RFXX0sCiAgICAgIEUgPSB7YmVnaW46ICI8IiwgZW5kOiAiPiIsIGNvbnRhaW5zOiBbe2JlZ2luS2V5d29yZHM6ICJpbiBvdXQifSwgaV19LAogICAgICBfID0gZS5JREVOVF9SRSArICIoPCIgKyBlLklERU5UX1JFICsgIihcXHMqLFxccyoiICsgZS5JREVOVF9SRSArICIpKj4pPyhcXFtcXF0pPyIsCiAgICAgIGIgPSB7YmVnaW46ICJAIiArIGUuSURFTlRfUkUsIHJlbGV2YW5jZTogMH07CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiQyMiLAogICAgICBhbGlhc2VzOiBbImNzIiwgImMjIl0sCiAgICAgIGtleXdvcmRzOiBuLAogICAgICBpbGxlZ2FsOiAvOjovLAogICAgICBjb250YWluczogW2UuQ09NTUVOVCgiLy8vIiwgIiQiLCB7CiAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgY2xhc3NOYW1lOiAiZG9jdGFnIiwKICAgICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAiLy8vIiwgcmVsZXZhbmNlOiAwfSwge2JlZ2luOiAiXHgzYyEtLXwtLVx4M2UifSwge2JlZ2luOiAiPC8/IiwgZW5kOiAiPiJ9XQogICAgICAgIH1dCiAgICAgIH0pLCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREUsIHsKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICBiZWdpbjogIiMiLAogICAgICAgIGVuZDogIiQiLAogICAgICAgIGtleXdvcmRzOiB7Im1ldGEta2V5d29yZCI6ICJpZiBlbHNlIGVsaWYgZW5kaWYgZGVmaW5lIHVuZGVmIHdhcm5pbmcgZXJyb3IgbGluZSByZWdpb24gZW5kcmVnaW9uIHByYWdtYSBjaGVja3N1bSJ9CiAgICAgIH0sIGQsIGEsIHsKICAgICAgICBiZWdpbktleXdvcmRzOiAiY2xhc3MgaW50ZXJmYWNlIiwKICAgICAgICBlbmQ6IC9bezs9XS8sCiAgICAgICAgaWxsZWdhbDogL1teXHM6LF0vLAogICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luS2V5d29yZHM6ICJ3aGVyZSBjbGFzcyJ9LCBpLCBFLCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREVdCiAgICAgIH0sIHsKICAgICAgICBiZWdpbktleXdvcmRzOiAibmFtZXNwYWNlIiwKICAgICAgICBlbmQ6IC9bezs9XS8sCiAgICAgICAgaWxsZWdhbDogL1teXHM6XS8sCiAgICAgICAgY29udGFpbnM6IFtpLCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREVdCiAgICAgIH0sIHsKICAgICAgICBiZWdpbktleXdvcmRzOiAicmVjb3JkIiwKICAgICAgICBlbmQ6IC9bezs9XS8sCiAgICAgICAgaWxsZWdhbDogL1teXHM6XS8sCiAgICAgICAgY29udGFpbnM6IFtpLCBFLCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREVdCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICBiZWdpbjogIl5cXHMqXFxbIiwKICAgICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICAgIGVuZDogIlxcXSIsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgY29udGFpbnM6IFt7Y2xhc3NOYW1lOiAibWV0YS1zdHJpbmciLCBiZWdpbjogLyIvLCBlbmQ6IC8iL31dCiAgICAgIH0sIHtiZWdpbktleXdvcmRzOiAibmV3IHJldHVybiB0aHJvdyBhd2FpdCBlbHNlIiwgcmVsZXZhbmNlOiAwfSwgewogICAgICAgIGNsYXNzTmFtZTogImZ1bmN0aW9uIiwKICAgICAgICBiZWdpbjogIigiICsgXyArICJcXHMrKSsiICsgZS5JREVOVF9SRSArICJcXHMqKFxcPC4rXFw+KT9cXHMqXFwoIiwKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgZW5kOiAvXHMqW3s7PV0vLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIGtleXdvcmRzOiBuLAogICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgYmVnaW46IGUuSURFTlRfUkUgKyAiXFxzKihcXDwuK1xcPik/XFxzKlxcKCIsCiAgICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgICBjb250YWluczogW2UuVElUTEVfTU9ERSwgRV0sCiAgICAgICAgICByZWxldmFuY2U6IDAKICAgICAgICB9LCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJwYXJhbXMiLAogICAgICAgICAgYmVnaW46IC9cKC8sCiAgICAgICAgICBlbmQ6IC9cKS8sCiAgICAgICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgICBrZXl3b3JkczogbiwKICAgICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICAgIGNvbnRhaW5zOiBbZCwgYSwgZS5DX0JMT0NLX0NPTU1FTlRfTU9ERV0KICAgICAgICB9LCBlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREVdCiAgICAgIH0sIGJdCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInByb3BlcnRpZXMiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSAiWyBcXHRcXGZdKiIsIHQgPSAiKCIgKyBuICsgIls6PV0iICsgbiArICJ8WyBcXHRcXGZdKykiLCBhID0gIihbXlxcXFw6PSBcXHRcXGZcXG5dfFxcXFwuKSsiLCBzID0gewogICAgICBlbmQ6IHQsCiAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgc3RhcnRzOiB7Y2xhc3NOYW1lOiAic3RyaW5nIiwgZW5kOiAvJC8sIHJlbGV2YW5jZTogMCwgY29udGFpbnM6IFt7YmVnaW46ICJcXFxcXFxuIn1dfQogICAgfTsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICIucHJvcGVydGllcyIsCiAgICAgIGNhc2VfaW5zZW5zaXRpdmU6ICEwLAogICAgICBpbGxlZ2FsOiAvXFMvLAogICAgICBjb250YWluczogW2UuQ09NTUVOVCgiXlxccypbISNdIiwgIiQiKSwgewogICAgICAgIGJlZ2luOiAiKFteXFxcXFxcVzo9IFxcdFxcZlxcbl18XFxcXC4pKyIgKyB0LAogICAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgICBjb250YWluczogW3tjbGFzc05hbWU6ICJhdHRyIiwgYmVnaW46ICIoW15cXFxcXFxXOj0gXFx0XFxmXFxuXXxcXFxcLikrIiwgZW5kc1BhcmVudDogITAsIHJlbGV2YW5jZTogMH1dLAogICAgICAgIHN0YXJ0czogcwogICAgICB9LCB7CiAgICAgICAgYmVnaW46IGEgKyB0LAogICAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgY29udGFpbnM6IFt7Y2xhc3NOYW1lOiAibWV0YSIsIGJlZ2luOiBhLCBlbmRzUGFyZW50OiAhMCwgcmVsZXZhbmNlOiAwfV0sCiAgICAgICAgc3RhcnRzOiBzCiAgICAgIH0sIHtjbGFzc05hbWU6ICJhdHRyIiwgcmVsZXZhbmNlOiAwLCBiZWdpbjogYSArIG4gKyAiJCJ9XQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJzY3NzIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0ID0ge2NsYXNzTmFtZTogInZhcmlhYmxlIiwgYmVnaW46ICIoXFwkW2EtekEtWi1dW2EtekEtWjAtOV8tXSopXFxiIn0sCiAgICAgIGkgPSB7Y2xhc3NOYW1lOiAibnVtYmVyIiwgYmVnaW46ICIjWzAtOUEtRmEtZl0rIn07CiAgICByZXR1cm4gZS5DU1NfTlVNQkVSX01PREUsIGUuUVVPVEVfU1RSSU5HX01PREUsIGUuQVBPU19TVFJJTkdfTU9ERSwgZS5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgewogICAgICBuYW1lOiAiU0NTUyIsCiAgICAgIGNhc2VfaW5zZW5zaXRpdmU6ICEwLAogICAgICBpbGxlZ2FsOiAiWz0vfCddIiwKICAgICAgY29udGFpbnM6IFtlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREUsIHsKICAgICAgICBjbGFzc05hbWU6ICJzZWxlY3Rvci1pZCIsCiAgICAgICAgYmVnaW46ICJcXCNbQS1aYS16MC05Xy1dKyIsCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIHtjbGFzc05hbWU6ICJzZWxlY3Rvci1jbGFzcyIsIGJlZ2luOiAiXFwuW0EtWmEtejAtOV8tXSsiLCByZWxldmFuY2U6IDB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAic2VsZWN0b3ItYXR0ciIsCiAgICAgICAgYmVnaW46ICJcXFsiLAogICAgICAgIGVuZDogIlxcXSIsCiAgICAgICAgaWxsZWdhbDogIiQiCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJzZWxlY3Rvci10YWciLAogICAgICAgIGJlZ2luOiAiXFxiKGF8YWJicnxhY3JvbnltfGFkZHJlc3N8YXJlYXxhcnRpY2xlfGFzaWRlfGF1ZGlvfGJ8YmFzZXxiaWd8YmxvY2txdW90ZXxib2R5fGJyfGJ1dHRvbnxjYW52YXN8Y2FwdGlvbnxjaXRlfGNvZGV8Y29sfGNvbGdyb3VwfGNvbW1hbmR8ZGF0YWxpc3R8ZGR8ZGVsfGRldGFpbHN8ZGZufGRpdnxkbHxkdHxlbXxlbWJlZHxmaWVsZHNldHxmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8Zm9ybXxmcmFtZXxmcmFtZXNldHwoaFsxLTZdKXxoZWFkfGhlYWRlcnxoZ3JvdXB8aHJ8aHRtbHxpfGlmcmFtZXxpbWd8aW5wdXR8aW5zfGtiZHxrZXlnZW58bGFiZWx8bGVnZW5kfGxpfGxpbmt8bWFwfG1hcmt8bWV0YXxtZXRlcnxuYXZ8bm9mcmFtZXN8bm9zY3JpcHR8b2JqZWN0fG9sfG9wdGdyb3VwfG9wdGlvbnxvdXRwdXR8cHxwYXJhbXxwcmV8cHJvZ3Jlc3N8cXxycHxydHxydWJ5fHNhbXB8c2NyaXB0fHNlY3Rpb258c2VsZWN0fHNtYWxsfHNwYW58c3RyaWtlfHN0cm9uZ3xzdHlsZXxzdWJ8c3VwfHRhYmxlfHRib2R5fHRkfHRleHRhcmVhfHRmb290fHRofHRoZWFkfHRpbWV8dGl0bGV8dHJ8dHR8dWx8dmFyfHZpZGVvKVxcYiIsCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJzZWxlY3Rvci1wc2V1ZG8iLAogICAgICAgIGJlZ2luOiAiOih2aXNpdGVkfHZhbGlkfHJvb3R8cmlnaHR8cmVxdWlyZWR8cmVhZC13cml0ZXxyZWFkLW9ubHl8b3V0LXJhbmdlfG9wdGlvbmFsfG9ubHktb2YtdHlwZXxvbmx5LWNoaWxkfG50aC1vZi10eXBlfG50aC1sYXN0LW9mLXR5cGV8bnRoLWxhc3QtY2hpbGR8bnRoLWNoaWxkfG5vdHxsaW5rfGxlZnR8bGFzdC1vZi10eXBlfGxhc3QtY2hpbGR8bGFuZ3xpbnZhbGlkfGluZGV0ZXJtaW5hdGV8aW4tcmFuZ2V8aG92ZXJ8Zm9jdXN8Zmlyc3Qtb2YtdHlwZXxmaXJzdC1saW5lfGZpcnN0LWxldHRlcnxmaXJzdC1jaGlsZHxmaXJzdHxlbmFibGVkfGVtcHR5fGRpc2FibGVkfGRlZmF1bHR8Y2hlY2tlZHxiZWZvcmV8YWZ0ZXJ8YWN0aXZlKSIKICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogInNlbGVjdG9yLXBzZXVkbyIsCiAgICAgICAgYmVnaW46ICI6OihhZnRlcnxiZWZvcmV8Y2hvaWNlc3xmaXJzdC1sZXR0ZXJ8Zmlyc3QtbGluZXxyZXBlYXQtaW5kZXh8cmVwZWF0LWl0ZW18c2VsZWN0aW9ufHZhbHVlKSIKICAgICAgfSwgdCwgewogICAgICAgIGNsYXNzTmFtZTogImF0dHJpYnV0ZSIsCiAgICAgICAgYmVnaW46ICJcXGIoc3JjfHotaW5kZXh8d29yZC13cmFwfHdvcmQtc3BhY2luZ3x3b3JkLWJyZWFrfHdpZHRofHdpZG93c3x3aGl0ZS1zcGFjZXx2aXNpYmlsaXR5fHZlcnRpY2FsLWFsaWdufHVuaWNvZGUtYmlkaXx0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbnx0cmFuc2l0aW9uLXByb3BlcnR5fHRyYW5zaXRpb24tZHVyYXRpb258dHJhbnNpdGlvbi1kZWxheXx0cmFuc2l0aW9ufHRyYW5zZm9ybS1zdHlsZXx0cmFuc2Zvcm0tb3JpZ2lufHRyYW5zZm9ybXx0b3B8dGV4dC11bmRlcmxpbmUtcG9zaXRpb258dGV4dC10cmFuc2Zvcm18dGV4dC1zaGFkb3d8dGV4dC1yZW5kZXJpbmd8dGV4dC1vdmVyZmxvd3x0ZXh0LWluZGVudHx0ZXh0LWRlY29yYXRpb24tc3R5bGV8dGV4dC1kZWNvcmF0aW9uLWxpbmV8dGV4dC1kZWNvcmF0aW9uLWNvbG9yfHRleHQtZGVjb3JhdGlvbnx0ZXh0LWFsaWduLWxhc3R8dGV4dC1hbGlnbnx0YWItc2l6ZXx0YWJsZS1sYXlvdXR8cmlnaHR8cmVzaXplfHF1b3Rlc3xwb3NpdGlvbnxwb2ludGVyLWV2ZW50c3xwZXJzcGVjdGl2ZS1vcmlnaW58cGVyc3BlY3RpdmV8cGFnZS1icmVhay1pbnNpZGV8cGFnZS1icmVhay1iZWZvcmV8cGFnZS1icmVhay1hZnRlcnxwYWRkaW5nLXRvcHxwYWRkaW5nLXJpZ2h0fHBhZGRpbmctbGVmdHxwYWRkaW5nLWJvdHRvbXxwYWRkaW5nfG92ZXJmbG93LXl8b3ZlcmZsb3cteHxvdmVyZmxvdy13cmFwfG92ZXJmbG93fG91dGxpbmUtd2lkdGh8b3V0bGluZS1zdHlsZXxvdXRsaW5lLW9mZnNldHxvdXRsaW5lLWNvbG9yfG91dGxpbmV8b3JwaGFuc3xvcmRlcnxvcGFjaXR5fG9iamVjdC1wb3NpdGlvbnxvYmplY3QtZml0fG5vcm1hbHxub25lfG5hdi11cHxuYXYtcmlnaHR8bmF2LWxlZnR8bmF2LWluZGV4fG5hdi1kb3dufG1pbi13aWR0aHxtaW4taGVpZ2h0fG1heC13aWR0aHxtYXgtaGVpZ2h0fG1hc2t8bWFya3N8bWFyZ2luLXRvcHxtYXJnaW4tcmlnaHR8bWFyZ2luLWxlZnR8bWFyZ2luLWJvdHRvbXxtYXJnaW58bGlzdC1zdHlsZS10eXBlfGxpc3Qtc3R5bGUtcG9zaXRpb258bGlzdC1zdHlsZS1pbWFnZXxsaXN0LXN0eWxlfGxpbmUtaGVpZ2h0fGxldHRlci1zcGFjaW5nfGxlZnR8anVzdGlmeS1jb250ZW50fGluaXRpYWx8aW5oZXJpdHxpbWUtbW9kZXxpbWFnZS1vcmllbnRhdGlvbnxpbWFnZS1yZXNvbHV0aW9ufGltYWdlLXJlbmRlcmluZ3xpY29ufGh5cGhlbnN8aGVpZ2h0fGZvbnQtd2VpZ2h0fGZvbnQtdmFyaWFudC1saWdhdHVyZXN8Zm9udC12YXJpYW50fGZvbnQtc3R5bGV8Zm9udC1zdHJldGNofGZvbnQtc2l6ZS1hZGp1c3R8Zm9udC1zaXplfGZvbnQtbGFuZ3VhZ2Utb3ZlcnJpZGV8Zm9udC1rZXJuaW5nfGZvbnQtZmVhdHVyZS1zZXR0aW5nc3xmb250LWZhbWlseXxmb250fGZsb2F0fGZsZXgtd3JhcHxmbGV4LXNocmlua3xmbGV4LWdyb3d8ZmxleC1mbG93fGZsZXgtZGlyZWN0aW9ufGZsZXgtYmFzaXN8ZmxleHxmaWx0ZXJ8ZW1wdHktY2VsbHN8ZGlzcGxheXxkaXJlY3Rpb258Y3Vyc29yfGNvdW50ZXItcmVzZXR8Y291bnRlci1pbmNyZW1lbnR8Y29udGVudHxjb2x1bW4td2lkdGh8Y29sdW1uLXNwYW58Y29sdW1uLXJ1bGUtd2lkdGh8Y29sdW1uLXJ1bGUtc3R5bGV8Y29sdW1uLXJ1bGUtY29sb3J8Y29sdW1uLXJ1bGV8Y29sdW1uLWdhcHxjb2x1bW4tZmlsbHxjb2x1bW4tY291bnR8Y29sdW1uc3xjb2xvcnxjbGlwLXBhdGh8Y2xpcHxjbGVhcnxjYXB0aW9uLXNpZGV8YnJlYWstaW5zaWRlfGJyZWFrLWJlZm9yZXxicmVhay1hZnRlcnxib3gtc2l6aW5nfGJveC1zaGFkb3d8Ym94LWRlY29yYXRpb24tYnJlYWt8Ym90dG9tfGJvcmRlci13aWR0aHxib3JkZXItdG9wLXdpZHRofGJvcmRlci10b3Atc3R5bGV8Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXN8Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1c3xib3JkZXItdG9wLWNvbG9yfGJvcmRlci10b3B8Ym9yZGVyLXN0eWxlfGJvcmRlci1zcGFjaW5nfGJvcmRlci1yaWdodC13aWR0aHxib3JkZXItcmlnaHQtc3R5bGV8Ym9yZGVyLXJpZ2h0LWNvbG9yfGJvcmRlci1yaWdodHxib3JkZXItcmFkaXVzfGJvcmRlci1sZWZ0LXdpZHRofGJvcmRlci1sZWZ0LXN0eWxlfGJvcmRlci1sZWZ0LWNvbG9yfGJvcmRlci1sZWZ0fGJvcmRlci1pbWFnZS13aWR0aHxib3JkZXItaW1hZ2Utc291cmNlfGJvcmRlci1pbWFnZS1zbGljZXxib3JkZXItaW1hZ2UtcmVwZWF0fGJvcmRlci1pbWFnZS1vdXRzZXR8Ym9yZGVyLWltYWdlfGJvcmRlci1jb2xvcnxib3JkZXItY29sbGFwc2V8Ym9yZGVyLWJvdHRvbS13aWR0aHxib3JkZXItYm90dG9tLXN0eWxlfGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzfGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXN8Ym9yZGVyLWJvdHRvbS1jb2xvcnxib3JkZXItYm90dG9tfGJvcmRlcnxiYWNrZ3JvdW5kLXNpemV8YmFja2dyb3VuZC1yZXBlYXR8YmFja2dyb3VuZC1wb3NpdGlvbnxiYWNrZ3JvdW5kLW9yaWdpbnxiYWNrZ3JvdW5kLWltYWdlfGJhY2tncm91bmQtY29sb3J8YmFja2dyb3VuZC1jbGlwfGJhY2tncm91bmQtYXR0YWNobWVudHxiYWNrZ3JvdW5kLWJsZW5kLW1vZGV8YmFja2dyb3VuZHxiYWNrZmFjZS12aXNpYmlsaXR5fGF1dG98YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbnxhbmltYXRpb24tcGxheS1zdGF0ZXxhbmltYXRpb24tbmFtZXxhbmltYXRpb24taXRlcmF0aW9uLWNvdW50fGFuaW1hdGlvbi1maWxsLW1vZGV8YW5pbWF0aW9uLWR1cmF0aW9ufGFuaW1hdGlvbi1kaXJlY3Rpb258YW5pbWF0aW9uLWRlbGF5fGFuaW1hdGlvbnxhbGlnbi1zZWxmfGFsaWduLWl0ZW1zfGFsaWduLWNvbnRlbnQpXFxiIiwKICAgICAgICBpbGxlZ2FsOiAiW15cXHNdIgogICAgICB9LCB7YmVnaW46ICJcXGIod2hpdGVzcGFjZXx3YWl0fHctcmVzaXplfHZpc2libGV8dmVydGljYWwtdGV4dHx2ZXJ0aWNhbC1pZGVvZ3JhcGhpY3x1cHBlcmNhc2V8dXBwZXItcm9tYW58dXBwZXItYWxwaGF8dW5kZXJsaW5lfHRyYW5zcGFyZW50fHRvcHx0aGlufHRoaWNrfHRleHR8dGV4dC10b3B8dGV4dC1ib3R0b218dGItcmx8dGFibGUtaGVhZGVyLWdyb3VwfHRhYmxlLWZvb3Rlci1ncm91cHxzdy1yZXNpemV8c3VwZXJ8c3RyaWN0fHN0YXRpY3xzcXVhcmV8c29saWR8c21hbGwtY2Fwc3xzZXBhcmF0ZXxzZS1yZXNpemV8c2Nyb2xsfHMtcmVzaXplfHJ0bHxyb3ctcmVzaXplfHJpZGdlfHJpZ2h0fHJlcGVhdHxyZXBlYXQteXxyZXBlYXQteHxyZWxhdGl2ZXxwcm9ncmVzc3xwb2ludGVyfG92ZXJsaW5lfG91dHNpZGV8b3V0c2V0fG9ibGlxdWV8bm93cmFwfG5vdC1hbGxvd2VkfG5vcm1hbHxub25lfG53LXJlc2l6ZXxuby1yZXBlYXR8bm8tZHJvcHxuZXdzcGFwZXJ8bmUtcmVzaXplfG4tcmVzaXplfG1vdmV8bWlkZGxlfG1lZGl1bXxsdHJ8bHItdGJ8bG93ZXJjYXNlfGxvd2VyLXJvbWFufGxvd2VyLWFscGhhfGxvb3NlfGxpc3QtaXRlbXxsaW5lfGxpbmUtdGhyb3VnaHxsaW5lLWVkZ2V8bGlnaHRlcnxsZWZ0fGtlZXAtYWxsfGp1c3RpZnl8aXRhbGljfGludGVyLXdvcmR8aW50ZXItaWRlb2dyYXBofGluc2lkZXxpbnNldHxpbmxpbmV8aW5saW5lLWJsb2NrfGluaGVyaXR8aW5hY3RpdmV8aWRlb2dyYXBoLXNwYWNlfGlkZW9ncmFwaC1wYXJlbnRoZXNpc3xpZGVvZ3JhcGgtbnVtZXJpY3xpZGVvZ3JhcGgtYWxwaGF8aG9yaXpvbnRhbHxoaWRkZW58aGVscHxoYW5kfGdyb292ZXxmaXhlZHxlbGxpcHNpc3xlLXJlc2l6ZXxkb3VibGV8ZG90dGVkfGRpc3RyaWJ1dGV8ZGlzdHJpYnV0ZS1zcGFjZXxkaXN0cmlidXRlLWxldHRlcnxkaXN0cmlidXRlLWFsbC1saW5lc3xkaXNjfGRpc2FibGVkfGRlZmF1bHR8ZGVjaW1hbHxkYXNoZWR8Y3Jvc3NoYWlyfGNvbGxhcHNlfGNvbC1yZXNpemV8Y2lyY2xlfGNoYXJ8Y2VudGVyfGNhcGl0YWxpemV8YnJlYWstd29yZHxicmVhay1hbGx8Ym90dG9tfGJvdGh8Ym9sZGVyfGJvbGR8YmxvY2t8YmlkaS1vdmVycmlkZXxiZWxvd3xiYXNlbGluZXxhdXRvfGFsd2F5c3xhbGwtc2Nyb2xsfGFic29sdXRlfHRhYmxlfHRhYmxlLWNlbGwpXFxiIn0sIHsKICAgICAgICBiZWdpbjogIjoiLAogICAgICAgIGVuZDogIjsiLAogICAgICAgIGNvbnRhaW5zOiBbdCwgaSwgZS5DU1NfTlVNQkVSX01PREUsIGUuUVVPVEVfU1RSSU5HX01PREUsIGUuQVBPU19TVFJJTkdfTU9ERSwgewogICAgICAgICAgY2xhc3NOYW1lOiAibWV0YSIsCiAgICAgICAgICBiZWdpbjogIiFpbXBvcnRhbnQiCiAgICAgICAgfV0KICAgICAgfSwge2JlZ2luOiAiQChwYWdlfGZvbnQtZmFjZSkiLCBsZXhlbWVzOiAiQFthLXotXSsiLCBrZXl3b3JkczogIkBwYWdlIEBmb250LWZhY2UifSwgewogICAgICAgIGJlZ2luOiAiQCIsCiAgICAgICAgZW5kOiAiW3s7XSIsCiAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgIGtleXdvcmRzOiAiYW5kIG9yIG5vdCBvbmx5IiwKICAgICAgICBjb250YWluczogW3sKICAgICAgICAgIGJlZ2luOiAiQFthLXotXSsiLAogICAgICAgICAgY2xhc3NOYW1lOiAia2V5d29yZCIKICAgICAgICB9LCB0LCBlLlFVT1RFX1NUUklOR19NT0RFLCBlLkFQT1NfU1RSSU5HX01PREUsIGksIGUuQ1NTX05VTUJFUl9NT0RFXQogICAgICB9XQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJzd2lmdCIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgaSA9IHsKICAgICAgICBrZXl3b3JkOiAiI2F2YWlsYWJsZSAjY29sb3JMaXRlcmFsICNjb2x1bW4gI2Vsc2UgI2Vsc2VpZiAjZW5kaWYgI2ZpbGUgI2ZpbGVMaXRlcmFsICNmdW5jdGlvbiAjaWYgI2ltYWdlTGl0ZXJhbCAjbGluZSAjc2VsZWN0b3IgI3NvdXJjZUxvY2F0aW9uIF8gX19DT0xVTU5fXyBfX0ZJTEVfXyBfX0ZVTkNUSU9OX18gX19MSU5FX18gQW55IGFzIGFzISBhcz8gYXNzb2NpYXRlZHR5cGUgYXNzb2NpYXRpdml0eSBicmVhayBjYXNlIGNhdGNoIGNsYXNzIGNvbnRpbnVlIGNvbnZlbmllbmNlIGRlZmF1bHQgZGVmZXIgZGVpbml0IGRpZFNldCBkbyBkeW5hbWljIGR5bmFtaWNUeXBlIGVsc2UgZW51bSBleHRlbnNpb24gZmFsbHRocm91Z2ggZmFsc2UgZmlsZXByaXZhdGUgZmluYWwgZm9yIGZ1bmMgZ2V0IGd1YXJkIGlmIGltcG9ydCBpbiBpbmRpcmVjdCBpbmZpeCBpbml0IGlub3V0IGludGVybmFsIGlzIGxhenkgbGVmdCBsZXQgbXV0YXRpbmcgbmlsIG5vbmUgbm9ubXV0YXRpbmcgb3BlbiBvcGVyYXRvciBvcHRpb25hbCBvdmVycmlkZSBwb3N0Zml4IHByZWNlZGVuY2UgcHJlZml4IHByaXZhdGUgcHJvdG9jb2wgUHJvdG9jb2wgcHVibGljIHJlcGVhdCByZXF1aXJlZCByZXRocm93cyByZXR1cm4gcmlnaHQgc2VsZiBTZWxmIHNldCBzdGF0aWMgc3RydWN0IHN1YnNjcmlwdCBzdXBlciBzd2l0Y2ggdGhyb3cgdGhyb3dzIHRydWUgdHJ5IHRyeSEgdHJ5PyBUeXBlIHR5cGVhbGlhcyB1bm93bmVkIHZhciB3ZWFrIHdoZXJlIHdoaWxlIHdpbGxTZXQiLAogICAgICAgIGxpdGVyYWw6ICJ0cnVlIGZhbHNlIG5pbCIsCiAgICAgICAgYnVpbHRfaW46ICJhYnMgYWR2YW5jZSBhbGlnbm9mIGFsaWdub2ZWYWx1ZSBhbnlHZW5lcmF0b3IgYXNzZXJ0IGFzc2VydGlvbkZhaWx1cmUgYnJpZGdlRnJvbU9iamVjdGl2ZUMgYnJpZGdlRnJvbU9iamVjdGl2ZUNVbmNvbmRpdGlvbmFsIGJyaWRnZVRvT2JqZWN0aXZlQyBicmlkZ2VUb09iamVjdGl2ZUNVbmNvbmRpdGlvbmFsIGMgY29tcGFjdE1hcCBjb250YWlucyBjb3VudCBjb3VudEVsZW1lbnRzIGNvdW50TGVhZGluZ1plcm9zIGRlYnVnUHJpbnQgZGVidWdQcmludGxuIGRpc3RhbmNlIGRyb3BGaXJzdCBkcm9wTGFzdCBkdW1wIGVuY29kZUJpdHNBc1dvcmRzIGVudW1lcmF0ZSBlcXVhbCBmYXRhbEVycm9yIGZpbHRlciBmaW5kIGdldEJyaWRnZWRPYmplY3RpdmVDVHlwZSBnZXRWYUxpc3QgaW5kaWNlcyBpbnNlcnRpb25Tb3J0IGlzQnJpZGdlZFRvT2JqZWN0aXZlQyBpc0JyaWRnZWRWZXJiYXRpbVRvT2JqZWN0aXZlQyBpc1VuaXF1ZWx5UmVmZXJlbmNlZCBpc1VuaXF1ZWx5UmVmZXJlbmNlZE5vbk9iakMgam9pbiBsYXp5IGxleGljb2dyYXBoaWNhbENvbXBhcmUgbWFwIG1heCBtYXhFbGVtZW50IG1pbiBtaW5FbGVtZW50IG51bWVyaWNDYXN0IG92ZXJsYXBzIHBhcnRpdGlvbiBwb3NpeCBwcmVjb25kaXRpb24gcHJlY29uZGl0aW9uRmFpbHVyZSBwcmludCBwcmludGxuIHF1aWNrU29ydCByZWFkTGluZSByZWR1Y2UgcmVmbGVjdCByZWludGVycHJldENhc3QgcmV2ZXJzZSByb3VuZFVwVG9BbGlnbm1lbnQgc2l6ZW9mIHNpemVvZlZhbHVlIHNvcnQgc3BsaXQgc3RhcnRzV2l0aCBzdHJpZGUgc3RyaWRlb2Ygc3RyaWRlb2ZWYWx1ZSBzd2FwIHRvU3RyaW5nIHRyYW5zY29kZSB1bmRlcmVzdGltYXRlQ291bnQgdW5zYWZlQWRkcmVzc09mIHVuc2FmZUJpdENhc3QgdW5zYWZlRG93bmNhc3QgdW5zYWZlVW53cmFwIHVuc2FmZVJlZmxlY3Qgd2l0aEV4dGVuZGVkTGlmZXRpbWUgd2l0aE9iamVjdEF0UGx1c1plcm8gd2l0aFVuc2FmZVBvaW50ZXIgd2l0aFVuc2FmZVBvaW50ZXJUb09iamVjdCB3aXRoVW5zYWZlTXV0YWJsZVBvaW50ZXIgd2l0aFVuc2FmZU11dGFibGVQb2ludGVycyB3aXRoVW5zYWZlUG9pbnRlciB3aXRoVW5zYWZlUG9pbnRlcnMgd2l0aFZhTGlzdCB6aXAiCiAgICAgIH0sIG4gPSBlLkNPTU1FTlQoIi9cXCoiLCAiXFwqLyIsIHtjb250YWluczogWyJzZWxmIl19KSwKICAgICAgdCA9IHtjbGFzc05hbWU6ICJzdWJzdCIsIGJlZ2luOiAvXFxcKC8sIGVuZDogIlxcKSIsIGtleXdvcmRzOiBpLCBjb250YWluczogW119LCBhID0gewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgY29udGFpbnM6IFtlLkJBQ0tTTEFTSF9FU0NBUEUsIHRdLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvIiIiLywgZW5kOiAvIiIiL30sIHtiZWdpbjogLyIvLCBlbmQ6IC8iL31dCiAgICAgIH0sIHIgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAibnVtYmVyIiwKICAgICAgICBiZWdpbjogIlxcYihbXFxkX10rKFxcLltcXGRlRV9dKyk/fDB4W2EtZkEtRjAtOV9dKyhcXC5bYS1mQS1GMC05cF9dKyk/fDBiWzAxX10rfDBvWzAtN19dKylcXGIiLAogICAgICAgIHJlbGV2YW5jZTogMAogICAgICB9OwogICAgcmV0dXJuIHQuY29udGFpbnMgPSBbcl0sIHsKICAgICAgbmFtZTogIlN3aWZ0IiwKICAgICAga2V5d29yZHM6IGksCiAgICAgIGNvbnRhaW5zOiBbYSwgZS5DX0xJTkVfQ09NTUVOVF9NT0RFLCBuLCB7CiAgICAgICAgY2xhc3NOYW1lOiAidHlwZSIsCiAgICAgICAgYmVnaW46ICJcXGJbQS1aXVtcXHfDgC3KuCddKlshP10iCiAgICAgIH0sIHtjbGFzc05hbWU6ICJ0eXBlIiwgYmVnaW46ICJcXGJbQS1aXVtcXHfDgC3KuCddKiIsIHJlbGV2YW5jZTogMH0sIHIsIHsKICAgICAgICBjbGFzc05hbWU6ICJmdW5jdGlvbiIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogImZ1bmMiLAogICAgICAgIGVuZDogInsiLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIGNvbnRhaW5zOiBbZS5pbmhlcml0KGUuVElUTEVfTU9ERSwge2JlZ2luOiAvW0EtWmEteiRfXVswLTlBLVphLXokX10qL30pLCB7CiAgICAgICAgICBiZWdpbjogLzwvLAogICAgICAgICAgZW5kOiAvPi8KICAgICAgICB9LCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJwYXJhbXMiLAogICAgICAgICAgYmVnaW46IC9cKC8sCiAgICAgICAgICBlbmQ6IC9cKS8sCiAgICAgICAgICBlbmRzUGFyZW50OiAhMCwKICAgICAgICAgIGtleXdvcmRzOiBpLAogICAgICAgICAgY29udGFpbnM6IFsic2VsZiIsIHIsIGEsIGUuQ19CTE9DS19DT01NRU5UX01PREUsIHtiZWdpbjogIjoifV0sCiAgICAgICAgICBpbGxlZ2FsOiAvWyInXS8KICAgICAgICB9XSwKICAgICAgICBpbGxlZ2FsOiAvXFt8JS8KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogImNsYXNzIiwKICAgICAgICBiZWdpbktleXdvcmRzOiAic3RydWN0IHByb3RvY29sIGNsYXNzIGV4dGVuc2lvbiBlbnVtIiwKICAgICAgICBrZXl3b3JkczogaSwKICAgICAgICBlbmQ6ICJcXHsiLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIGNvbnRhaW5zOiBbZS5pbmhlcml0KGUuVElUTEVfTU9ERSwge2JlZ2luOiAvW0EtWmEteiRfXVtcdTAwQzAtXHUwMkI4MC05QS1aYS16JF9dKi99KV0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogIm1ldGEiLAogICAgICAgIGJlZ2luOiAiKEBkaXNjYXJkYWJsZVJlc3VsdHxAd2Fybl91bnVzZWRfcmVzdWx0fEBleHBvcnRlZHxAbGF6eXxAbm9lc2NhcGV8QE5TQ29weWluZ3xATlNNYW5hZ2VkfEBvYmpjfEBvYmpjTWVtYmVyc3xAY29udmVudGlvbnxAcmVxdWlyZWR8QG5vcmV0dXJufEBJQkFjdGlvbnxASUJEZXNpZ25hYmxlfEBJQkluc3BlY3RhYmxlfEBJQk91dGxldHxAaW5maXh8QHByZWZpeHxAcG9zdGZpeHxAYXV0b2Nsb3N1cmV8QHRlc3RhYmxlfEBhdmFpbGFibGV8QG5vbm9iamN8QE5TQXBwbGljYXRpb25NYWlufEBVSUFwcGxpY2F0aW9uTWFpbnxAZHluYW1pY01lbWJlckxvb2t1cHxAcHJvcGVydHlXcmFwcGVyKVxcYiIKICAgICAgfSwge2JlZ2luS2V5d29yZHM6ICJpbXBvcnQiLCBlbmQ6IC8kLywgY29udGFpbnM6IFtlLkNfTElORV9DT01NRU5UX01PREUsIG5dfV0KICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiYXBwbGVzY3JpcHQiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIHQgPSBlLmluaGVyaXQoZS5RVU9URV9TVFJJTkdfTU9ERSwge2lsbGVnYWw6ICIifSksCiAgICAgIHIgPSB7Y2xhc3NOYW1lOiAicGFyYW1zIiwgYmVnaW46ICJcXCgiLCBlbmQ6ICJcXCkiLCBjb250YWluczogWyJzZWxmIiwgZS5DX05VTUJFUl9NT0RFLCB0XX0sCiAgICAgIG4gPSBlLkNPTU1FTlQoIi0tIiwgIiQiKSwKICAgICAgaSA9IFtuLCBlLkNPTU1FTlQoIlxcKFxcKiIsICJcXCpcXCkiLCB7Y29udGFpbnM6IFsic2VsZiIsIG5dfSksIGUuSEFTSF9DT01NRU5UX01PREVdOwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIkFwcGxlU2NyaXB0IiwKICAgICAgYWxpYXNlczogWyJvc2FzY3JpcHQiXSwKICAgICAga2V5d29yZHM6IHsKICAgICAgICBrZXl3b3JkOiAiYWJvdXQgYWJvdmUgYWZ0ZXIgYWdhaW5zdCBhbmQgYXJvdW5kIGFzIGF0IGJhY2sgYmVmb3JlIGJlZ2lubmluZyBiZWhpbmQgYmVsb3cgYmVuZWF0aCBiZXNpZGUgYmV0d2VlbiBidXQgYnkgY29uc2lkZXJpbmcgY29udGFpbiBjb250YWlucyBjb250aW51ZSBjb3B5IGRpdiBkb2VzIGVpZ2h0aCBlbHNlIGVuZCBlcXVhbCBlcXVhbHMgZXJyb3IgZXZlcnkgZXhpdCBmaWZ0aCBmaXJzdCBmb3IgZm91cnRoIGZyb20gZnJvbnQgZ2V0IGdpdmVuIGdsb2JhbCBpZiBpZ25vcmluZyBpbiBpbnRvIGlzIGl0IGl0cyBsYXN0IGxvY2FsIG1lIG1pZGRsZSBtb2QgbXkgbmludGggbm90IG9mIG9uIG9udG8gb3Igb3ZlciBwcm9wIHByb3BlcnR5IHB1dCByZWYgcmVmZXJlbmNlIHJlcGVhdCByZXR1cm5pbmcgc2NyaXB0IHNlY29uZCBzZXQgc2V2ZW50aCBzaW5jZSBzaXh0aCBzb21lIHRlbGwgdGVudGggdGhhdCB0aGV8MCB0aGVuIHRoaXJkIHRocm91Z2ggdGhydSB0aW1lb3V0IHRpbWVzIHRvIHRyYW5zYWN0aW9uIHRyeSB1bnRpbCB3aGVyZSB3aGlsZSB3aG9zZSB3aXRoIHdpdGhvdXQiLAogICAgICAgIGxpdGVyYWw6ICJBcHBsZVNjcmlwdCBmYWxzZSBsaW5lZmVlZCByZXR1cm4gcGkgcXVvdGUgcmVzdWx0IHNwYWNlIHRhYiB0cnVlIiwKICAgICAgICBidWlsdF9pbjogImFsaWFzIGFwcGxpY2F0aW9uIGJvb2xlYW4gY2xhc3MgY29uc3RhbnQgZGF0ZSBmaWxlIGludGVnZXIgbGlzdCBudW1iZXIgcmVhbCByZWNvcmQgc3RyaW5nIHRleHQgYWN0aXZhdGUgYmVlcCBjb3VudCBkZWxheSBsYXVuY2ggbG9nIG9mZnNldCByZWFkIHJvdW5kIHJ1biBzYXkgc3VtbWFyaXplIHdyaXRlIGNoYXJhY3RlciBjaGFyYWN0ZXJzIGNvbnRlbnRzIGRheSBmcm9udG1vc3QgaWQgaXRlbSBsZW5ndGggbW9udGggbmFtZSBwYXJhZ3JhcGggcGFyYWdyYXBocyByZXN0IHJldmVyc2UgcnVubmluZyB0aW1lIHZlcnNpb24gd2Vla2RheSB3b3JkIHdvcmRzIHllYXIiCiAgICAgIH0sCiAgICAgIGNvbnRhaW5zOiBbdCwgZS5DX05VTUJFUl9NT0RFLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiYnVpbHRfaW4iLAogICAgICAgIGJlZ2luOiAiXFxiKGNsaXBib2FyZCBpbmZvfHRoZSBjbGlwYm9hcmR8aW5mbyBmb3J8bGlzdCAoZGlza3N8Zm9sZGVyKXxtb3VudCB2b2x1bWV8cGF0aCB0b3woY2xvc2V8b3BlbiBmb3IpIGFjY2Vzc3woZ2V0fHNldCkgZW9mfGN1cnJlbnQgZGF0ZXxkbyBzaGVsbCBzY3JpcHR8Z2V0IHZvbHVtZSBzZXR0aW5nc3xyYW5kb20gbnVtYmVyfHNldCB2b2x1bWV8c3lzdGVtIGF0dHJpYnV0ZXxzeXN0ZW0gaW5mb3x0aW1lIHRvIEdNVHwobG9hZHxydW58c3RvcmUpIHNjcmlwdHxzY3JpcHRpbmcgY29tcG9uZW50c3xBU0NJSSAoY2hhcmFjdGVyfG51bWJlcil8bG9jYWxpemVkIHN0cmluZ3xjaG9vc2UgKGFwcGxpY2F0aW9ufGNvbG9yfGZpbGV8ZmlsZSBuYW1lfGZvbGRlcnxmcm9tIGxpc3R8cmVtb3RlIGFwcGxpY2F0aW9ufFVSTCl8ZGlzcGxheSAoYWxlcnR8ZGlhbG9nKSlcXGJ8XlxccypyZXR1cm5cXGIiCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJsaXRlcmFsIiwKICAgICAgICBiZWdpbjogIlxcYih0ZXh0IGl0ZW0gZGVsaW1pdGVyc3xjdXJyZW50IGFwcGxpY2F0aW9ufG1pc3NpbmcgdmFsdWUpXFxiIgogICAgICB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAia2V5d29yZCIsCiAgICAgICAgYmVnaW46ICJcXGIoYXBhcnQgZnJvbXxhc2lkZSBmcm9tfGluc3RlYWQgb2Z8b3V0IG9mfGdyZWF0ZXIgdGhhbnxpc24ndHwoZG9lc24ndHxkb2VzIG5vdCkgKGVxdWFsfGNvbWUgYmVmb3JlfGNvbWUgYWZ0ZXJ8Y29udGFpbil8KGdyZWF0ZXJ8bGVzcykgdGhhbiggb3IgZXF1YWwpP3woc3RhcnRzP3xlbmRzfGJlZ2lucz8pIHdpdGh8Y29udGFpbmVkIGJ5fGNvbWVzIChiZWZvcmV8YWZ0ZXIpfGEgKHJlZnxyZWZlcmVuY2UpfFBPU0lYIGZpbGV8UE9TSVggcGF0aHwoZGF0ZXx0aW1lKSBzdHJpbmd8cXVvdGVkIGZvcm0pXFxiIgogICAgICB9LCB7YmVnaW5LZXl3b3JkczogIm9uIiwgaWxsZWdhbDogIlskez07XFxuXSIsIGNvbnRhaW5zOiBbZS5VTkRFUlNDT1JFX1RJVExFX01PREUsIHJdfV0uY29uY2F0KGkpLAogICAgICBpbGxlZ2FsOiAiLy98LT58PT58XFxbXFxbIgogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJhc2NpaWRvYyIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiQXNjaWlEb2MiLAogICAgICBhbGlhc2VzOiBbImFkb2MiXSwKICAgICAgY29udGFpbnM6IFtlLkNPTU1FTlQoIl4vezQsfVxcbiIsICJcXG4vezQsfSQiLCB7cmVsZXZhbmNlOiAxMH0pLCBlLkNPTU1FTlQoIl4vLyIsICIkIiwge3JlbGV2YW5jZTogMH0pLCB7CiAgICAgICAgY2xhc3NOYW1lOiAidGl0bGUiLAogICAgICAgIGJlZ2luOiAiXlxcLlxcdy4qJCIKICAgICAgfSwge2JlZ2luOiAiXls9XFwqXXs0LH1cXG4iLCBlbmQ6ICJcXG5eWz1cXCpdezQsfSQiLCByZWxldmFuY2U6IDEwfSwgewogICAgICAgIGNsYXNzTmFtZTogInNlY3Rpb24iLAogICAgICAgIHJlbGV2YW5jZTogMTAsCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46ICJeKD17MSw1fSkgLis/KCBcXDEpPyQifSwge2JlZ2luOiAiXlteXFxbXFxdXFxuXSs/XFxuWz1cXC1+XFxeXFwrXXsyLH0kIn1dCiAgICAgIH0sIHtjbGFzc05hbWU6ICJtZXRhIiwgYmVnaW46ICJeOi4rPzoiLCBlbmQ6ICJcXHMiLCBleGNsdWRlRW5kOiAhMCwgcmVsZXZhbmNlOiAxMH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICBiZWdpbjogIl5cXFsuKz9cXF0kIiwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfSwge2NsYXNzTmFtZTogInF1b3RlIiwgYmVnaW46ICJeX3s0LH1cXG4iLCBlbmQ6ICJcXG5fezQsfSQiLCByZWxldmFuY2U6IDEwfSwgewogICAgICAgIGNsYXNzTmFtZTogImNvZGUiLAogICAgICAgIGJlZ2luOiAiXltcXC1cXC5dezQsfVxcbiIsCiAgICAgICAgZW5kOiAiXFxuW1xcLVxcLl17NCx9JCIsCiAgICAgICAgcmVsZXZhbmNlOiAxMAogICAgICB9LCB7CiAgICAgICAgYmVnaW46ICJeXFwrezQsfVxcbiIsCiAgICAgICAgZW5kOiAiXFxuXFwrezQsfSQiLAogICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luOiAiPCIsIGVuZDogIj4iLCBzdWJMYW5ndWFnZTogInhtbCIsIHJlbGV2YW5jZTogMH1dLAogICAgICAgIHJlbGV2YW5jZTogMTAKICAgICAgfSwge2NsYXNzTmFtZTogImJ1bGxldCIsIGJlZ2luOiAiXihcXCorfFxcLSt8XFwuK3xbXlxcbl0rPzo6KVxccysifSwgewogICAgICAgIGNsYXNzTmFtZTogInN5bWJvbCIsCiAgICAgICAgYmVnaW46ICJeKE5PVEV8VElQfElNUE9SVEFOVHxXQVJOSU5HfENBVVRJT04pOlxccysiLAogICAgICAgIHJlbGV2YW5jZTogMTAKICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogInN0cm9uZyIsCiAgICAgICAgYmVnaW46ICJcXEJcXCooPyFbXFwqXFxzXSkiLAogICAgICAgIGVuZDogIihcXG57Mn18XFwqKSIsCiAgICAgICAgY29udGFpbnM6IFt7YmVnaW46ICJcXFxcKlxcdyIsIHJlbGV2YW5jZTogMH1dCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJlbXBoYXNpcyIsCiAgICAgICAgYmVnaW46ICJcXEInKD8hWydcXHNdKSIsCiAgICAgICAgZW5kOiAiKFxcbnsyfXwnKSIsCiAgICAgICAgY29udGFpbnM6IFt7YmVnaW46ICJcXFxcJ1xcdyIsIHJlbGV2YW5jZTogMH1dLAogICAgICAgIHJlbGV2YW5jZTogMAogICAgICB9LCB7Y2xhc3NOYW1lOiAiZW1waGFzaXMiLCBiZWdpbjogIl8oPyFbX1xcc10pIiwgZW5kOiAiKFxcbnsyfXxfKSIsIHJlbGV2YW5jZTogMH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAiYGAuKz8nJyJ9LCB7YmVnaW46ICJgLis/JyJ9XQogICAgICB9LCB7Y2xhc3NOYW1lOiAiY29kZSIsIGJlZ2luOiAiKGAuKz9gfFxcKy4rP1xcKykiLCByZWxldmFuY2U6IDB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiY29kZSIsCiAgICAgICAgYmVnaW46ICJeWyBcXHRdIiwKICAgICAgICBlbmQ6ICIkIiwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfSwgewogICAgICAgIGJlZ2luOiAiXid7Myx9WyBcXHRdKiQiLAogICAgICAgIHJlbGV2YW5jZTogMTAKICAgICAgfSwgewogICAgICAgIGJlZ2luOiAiKGxpbms6KT8oaHR0cHxodHRwc3xmdHB8ZmlsZXxpcmN8aW1hZ2U6Pyk6XFxTK1xcWy4qP1xcXSIsCiAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luOiAiKGxpbmt8aW1hZ2U6Pyk6IiwgcmVsZXZhbmNlOiAwfSwgewogICAgICAgICAgY2xhc3NOYW1lOiAibGluayIsCiAgICAgICAgICBiZWdpbjogIlxcdyIsCiAgICAgICAgICBlbmQ6ICJbXlxcW10rIiwKICAgICAgICAgIHJlbGV2YW5jZTogMAogICAgICAgIH0sIHtjbGFzc05hbWU6ICJzdHJpbmciLCBiZWdpbjogIlxcWyIsIGVuZDogIlxcXSIsIGV4Y2x1ZGVCZWdpbjogITAsIGV4Y2x1ZGVFbmQ6ICEwLCByZWxldmFuY2U6IDB9XSwKICAgICAgICByZWxldmFuY2U6IDEwCiAgICAgIH1dCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoImphdmEiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwoKICBmdW5jdGlvbiBlKGUpIHsKICAgIHJldHVybiBlID8gInN0cmluZyIgPT0gdHlwZW9mIGUgPyBlIDogZS5zb3VyY2UgOiBudWxsCiAgfQoKICBmdW5jdGlvbiBuKGUpIHsKICAgIHJldHVybiBhKCIoIiwgZSwgIik/IikKICB9CgogIGZ1bmN0aW9uIGEoLi4ubikgewogICAgcmV0dXJuIG4ubWFwKG4gPT4gZShuKSkuam9pbigiIikKICB9CgogIGZ1bmN0aW9uIHMoLi4ubikgewogICAgcmV0dXJuICIoIiArIG4ubWFwKG4gPT4gZShuKSkuam9pbigifCIpICsgIikiCiAgfQoKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0ID0gImZhbHNlIHN5bmNocm9uaXplZCBpbnQgYWJzdHJhY3QgZmxvYXQgcHJpdmF0ZSBjaGFyIGJvb2xlYW4gdmFyIHN0YXRpYyBudWxsIGlmIGNvbnN0IGZvciB0cnVlIHdoaWxlIGxvbmcgc3RyaWN0ZnAgZmluYWxseSBwcm90ZWN0ZWQgaW1wb3J0IG5hdGl2ZSBmaW5hbCB2b2lkIGVudW0gZWxzZSBicmVhayB0cmFuc2llbnQgY2F0Y2ggaW5zdGFuY2VvZiBieXRlIHN1cGVyIHZvbGF0aWxlIGNhc2UgYXNzZXJ0IHNob3J0IHBhY2thZ2UgZGVmYXVsdCBkb3VibGUgcHVibGljIHRyeSB0aGlzIHN3aXRjaCBjb250aW51ZSB0aHJvd3MgcHJvdGVjdGVkIHB1YmxpYyBwcml2YXRlIG1vZHVsZSByZXF1aXJlcyBleHBvcnRzIGRvIiwKICAgICAgaSA9IHsKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICBiZWdpbjogIkBbw4AtyrhhLXpBLVpfJF1bw4AtyrhhLXpBLVpfJDAtOV0qIiwKICAgICAgICBjb250YWluczogW3tiZWdpbjogL1woLywgZW5kOiAvXCkvLCBjb250YWluczogWyJzZWxmIl19XQogICAgICB9LCByID0gZSA9PiBhKCJbIiwgZSwgIl0rKFsiLCBlLCAiX10qWyIsIGUsICJdKyk/IiksIGMgPSB7CiAgICAgICAgY2xhc3NOYW1lOiAibnVtYmVyIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogYFxcYigwW2JCXSR7cigiMDEiKX0pW2xMXT9gfSwge2JlZ2luOiBgXFxiKDAke3IoIjAtNyIpfSlbZERmRmxMXT9gfSwge2JlZ2luOiBhKC9cYjBbeFhdLywgcyhhKHIoImEtZkEtRjAtOSIpLCAvXC4vLCByKCJhLWZBLUYwLTkiKSksIGEocigiYS1mQS1GMC05IiksIC9cLj8vKSwgYSgvXC4vLCByKCJhLWZBLUYwLTkiKSkpLCAvKFtwUF1bKy1dPyhcZCspKT8vLCAvW2ZGZERsTF0/Lyl9LCB7YmVnaW46IGEoL1xiLywgcyhhKC9cZCpcLi8sIHIoIlxcZCIpKSwgcigiXFxkIikpLCAvW2VFXVsrLV0/W1xkXStbZERmRl0/Lyl9LCB7YmVnaW46IGEoL1xiLywgcigvXGQvKSwgbigvXC4/LyksIG4ocigvXGQvKSksIC9bZERmRmxMXT8vKX1dLAogICAgICAgIHJlbGV2YW5jZTogMAogICAgICB9OwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIkphdmEiLAogICAgICBhbGlhc2VzOiBbImpzcCJdLAogICAgICBrZXl3b3JkczogdCwKICAgICAgaWxsZWdhbDogLzxcL3wjLywKICAgICAgY29udGFpbnM6IFtlLkNPTU1FTlQoIi9cXCpcXCoiLCAiXFwqLyIsIHsKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgY29udGFpbnM6IFt7YmVnaW46IC9cdytALywgcmVsZXZhbmNlOiAwfSwge2NsYXNzTmFtZTogImRvY3RhZyIsIGJlZ2luOiAiQFtBLVphLXpdKyJ9XQogICAgICB9KSwgZS5DX0xJTkVfQ09NTUVOVF9NT0RFLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCBlLkFQT1NfU1RSSU5HX01PREUsIGUuUVVPVEVfU1RSSU5HX01PREUsIHsKICAgICAgICBjbGFzc05hbWU6ICJjbGFzcyIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogImNsYXNzIGludGVyZmFjZSBlbnVtIiwKICAgICAgICBlbmQ6IC9bezs9XS8sCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAga2V5d29yZHM6ICJjbGFzcyBpbnRlcmZhY2UgZW51bSIsCiAgICAgICAgaWxsZWdhbDogL1s6IlxbXF1dLywKICAgICAgICBjb250YWluczogW3tiZWdpbktleXdvcmRzOiAiZXh0ZW5kcyBpbXBsZW1lbnRzIn0sIGUuVU5ERVJTQ09SRV9USVRMRV9NT0RFXQogICAgICB9LCB7YmVnaW5LZXl3b3JkczogIm5ldyB0aHJvdyByZXR1cm4gZWxzZSIsIHJlbGV2YW5jZTogMH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJmdW5jdGlvbiIsCiAgICAgICAgYmVnaW46ICIoW8OALcq4YS16QS1aXyRdW8OALcq4YS16QS1aXyQwLTldKig8W8OALcq4YS16QS1aXyRdW8OALcq4YS16QS1aXyQwLTldKihcXHMqLFxccypbw4AtyrhhLXpBLVpfJF1bw4AtyrhhLXpBLVpfJDAtOV0qKSo+KT9cXHMrKSsiICsgZS5VTkRFUlNDT1JFX0lERU5UX1JFICsgIlxccypcXCgiLAogICAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgICBlbmQ6IC9bezs9XS8sCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAga2V5d29yZHM6IHQsCiAgICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgICBiZWdpbjogZS5VTkRFUlNDT1JFX0lERU5UX1JFICsgIlxccypcXCgiLAogICAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgICAgcmVsZXZhbmNlOiAwLAogICAgICAgICAgY29udGFpbnM6IFtlLlVOREVSU0NPUkVfVElUTEVfTU9ERV0KICAgICAgICB9LCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJwYXJhbXMiLAogICAgICAgICAgYmVnaW46IC9cKC8sCiAgICAgICAgICBlbmQ6IC9cKS8sCiAgICAgICAgICBrZXl3b3JkczogdCwKICAgICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICAgIGNvbnRhaW5zOiBbaSwgZS5BUE9TX1NUUklOR19NT0RFLCBlLlFVT1RFX1NUUklOR19NT0RFLCBlLkNfTlVNQkVSX01PREUsIGUuQ19CTE9DS19DT01NRU5UX01PREVdCiAgICAgICAgfSwgZS5DX0xJTkVfQ09NTUVOVF9NT0RFLCBlLkNfQkxPQ0tfQ09NTUVOVF9NT0RFXQogICAgICB9LCBjLCBpXQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJqYXZhc2NyaXB0IiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICBjb25zdCBlID0gWyJhcyIsICJpbiIsICJvZiIsICJpZiIsICJmb3IiLCAid2hpbGUiLCAiZmluYWxseSIsICJ2YXIiLCAibmV3IiwgImZ1bmN0aW9uIiwgImRvIiwgInJldHVybiIsICJ2b2lkIiwgImVsc2UiLCAiYnJlYWsiLCAiY2F0Y2giLCAiaW5zdGFuY2VvZiIsICJ3aXRoIiwgInRocm93IiwgImNhc2UiLCAiZGVmYXVsdCIsICJ0cnkiLCAic3dpdGNoIiwgImNvbnRpbnVlIiwgInR5cGVvZiIsICJkZWxldGUiLCAibGV0IiwgInlpZWxkIiwgImNvbnN0IiwgImNsYXNzIiwgImRlYnVnZ2VyIiwgImFzeW5jIiwgImF3YWl0IiwgInN0YXRpYyIsICJpbXBvcnQiLCAiZnJvbSIsICJleHBvcnQiLCAiZXh0ZW5kcyJdLAogICAgbiA9IFsidHJ1ZSIsICJmYWxzZSIsICJudWxsIiwgInVuZGVmaW5lZCIsICJOYU4iLCAiSW5maW5pdHkiXSwKICAgIGEgPSBbXS5jb25jYXQoWyJzZXRJbnRlcnZhbCIsICJzZXRUaW1lb3V0IiwgImNsZWFySW50ZXJ2YWwiLCAiY2xlYXJUaW1lb3V0IiwgInJlcXVpcmUiLCAiZXhwb3J0cyIsICJldmFsIiwgImlzRmluaXRlIiwgImlzTmFOIiwgInBhcnNlRmxvYXQiLCAicGFyc2VJbnQiLCAiZGVjb2RlVVJJIiwgImRlY29kZVVSSUNvbXBvbmVudCIsICJlbmNvZGVVUkkiLCAiZW5jb2RlVVJJQ29tcG9uZW50IiwgImVzY2FwZSIsICJ1bmVzY2FwZSJdLCBbImFyZ3VtZW50cyIsICJ0aGlzIiwgInN1cGVyIiwgImNvbnNvbGUiLCAid2luZG93IiwgImRvY3VtZW50IiwgImxvY2FsU3RvcmFnZSIsICJtb2R1bGUiLCAiZ2xvYmFsIl0sIFsiSW50bCIsICJEYXRhVmlldyIsICJOdW1iZXIiLCAiTWF0aCIsICJEYXRlIiwgIlN0cmluZyIsICJSZWdFeHAiLCAiT2JqZWN0IiwgIkZ1bmN0aW9uIiwgIkJvb2xlYW4iLCAiRXJyb3IiLCAiU3ltYm9sIiwgIlNldCIsICJNYXAiLCAiV2Vha1NldCIsICJXZWFrTWFwIiwgIlByb3h5IiwgIlJlZmxlY3QiLCAiSlNPTiIsICJQcm9taXNlIiwgIkZsb2F0NjRBcnJheSIsICJJbnQxNkFycmF5IiwgIkludDMyQXJyYXkiLCAiSW50OEFycmF5IiwgIlVpbnQxNkFycmF5IiwgIlVpbnQzMkFycmF5IiwgIkZsb2F0MzJBcnJheSIsICJBcnJheSIsICJVaW50OEFycmF5IiwgIlVpbnQ4Q2xhbXBlZEFycmF5IiwgIkFycmF5QnVmZmVyIl0sIFsiRXZhbEVycm9yIiwgIkludGVybmFsRXJyb3IiLCAiUmFuZ2VFcnJvciIsICJSZWZlcmVuY2VFcnJvciIsICJTeW50YXhFcnJvciIsICJUeXBlRXJyb3IiLCAiVVJJRXJyb3IiXSk7CgogIGZ1bmN0aW9uIHMoZSkgewogICAgcmV0dXJuIHIoIig/PSIsIGUsICIpIikKICB9CgogIGZ1bmN0aW9uIHIoLi4uZSkgewogICAgcmV0dXJuIGUubWFwKGUgPT4gKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlID8gInN0cmluZyIgPT0gdHlwZW9mIGUgPyBlIDogZS5zb3VyY2UgOiBudWxsCiAgICB9KShlKSkuam9pbigiIikKICB9CgogIHJldHVybiBmdW5jdGlvbiAodCkgewogICAgdmFyIGkgPSAiW0EtWmEteiRfXVswLTlBLVphLXokX10qIiwgYyA9IHtiZWdpbjogLzxbQS1aYS16MC05XFwuXzotXSsvLCBlbmQ6IC9cL1tBLVphLXowLTlcXC5fOi1dKz58XC8+L30sIG8gPSB7CiAgICAgICRwYXR0ZXJuOiAiW0EtWmEteiRfXVswLTlBLVphLXokX10qIiwKICAgICAga2V5d29yZDogZS5qb2luKCIgIiksCiAgICAgIGxpdGVyYWw6IG4uam9pbigiICIpLAogICAgICBidWlsdF9pbjogYS5qb2luKCIgIikKICAgIH0sIGwgPSB7CiAgICAgIGNsYXNzTmFtZTogIm51bWJlciIsCiAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAiXFxiKDBbYkJdWzAxXSspbj8ifSwge2JlZ2luOiAiXFxiKDBbb09dWzAtN10rKW4/In0sIHtiZWdpbjogdC5DX05VTUJFUl9SRSArICJuPyJ9XSwKICAgICAgcmVsZXZhbmNlOiAwCiAgICB9LCBFID0ge2NsYXNzTmFtZTogInN1YnN0IiwgYmVnaW46ICJcXCRcXHsiLCBlbmQ6ICJcXH0iLCBrZXl3b3JkczogbywgY29udGFpbnM6IFtdfSwgZCA9IHsKICAgICAgYmVnaW46ICJodG1sYCIsCiAgICAgIGVuZDogIiIsCiAgICAgIHN0YXJ0czoge2VuZDogImAiLCByZXR1cm5FbmQ6ICExLCBjb250YWluczogW3QuQkFDS1NMQVNIX0VTQ0FQRSwgRV0sIHN1Ykxhbmd1YWdlOiAieG1sIn0KICAgIH0sIGcgPSB7CiAgICAgIGJlZ2luOiAiY3NzYCIsCiAgICAgIGVuZDogIiIsCiAgICAgIHN0YXJ0czoge2VuZDogImAiLCByZXR1cm5FbmQ6ICExLCBjb250YWluczogW3QuQkFDS1NMQVNIX0VTQ0FQRSwgRV0sIHN1Ykxhbmd1YWdlOiAiY3NzIn0KICAgIH0sIHUgPSB7Y2xhc3NOYW1lOiAic3RyaW5nIiwgYmVnaW46ICJgIiwgZW5kOiAiYCIsIGNvbnRhaW5zOiBbdC5CQUNLU0xBU0hfRVNDQVBFLCBFXX07CiAgICBFLmNvbnRhaW5zID0gW3QuQVBPU19TVFJJTkdfTU9ERSwgdC5RVU9URV9TVFJJTkdfTU9ERSwgZCwgZywgdSwgbCwgdC5SRUdFWFBfTU9ERV07CiAgICB2YXIgYiA9IEUuY29udGFpbnMuY29uY2F0KFt7CiAgICAgICAgYmVnaW46IC9cKC8sCiAgICAgICAgZW5kOiAvXCkvLAogICAgICAgIGNvbnRhaW5zOiBbInNlbGYiXS5jb25jYXQoRS5jb250YWlucywgW3QuQ19CTE9DS19DT01NRU5UX01PREUsIHQuQ19MSU5FX0NPTU1FTlRfTU9ERV0pCiAgICAgIH0sIHQuQ19CTE9DS19DT01NRU5UX01PREUsIHQuQ19MSU5FX0NPTU1FTlRfTU9ERV0pLAogICAgICBfID0ge2NsYXNzTmFtZTogInBhcmFtcyIsIGJlZ2luOiAvXCgvLCBlbmQ6IC9cKS8sIGV4Y2x1ZGVCZWdpbjogITAsIGV4Y2x1ZGVFbmQ6ICEwLCBjb250YWluczogYn07CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiSmF2YVNjcmlwdCIsCiAgICAgIGFsaWFzZXM6IFsianMiLCAianN4IiwgIm1qcyIsICJjanMiXSwKICAgICAga2V5d29yZHM6IG8sCiAgICAgIGNvbnRhaW5zOiBbdC5TSEVCQU5HKHtiaW5hcnk6ICJub2RlIiwgcmVsZXZhbmNlOiA1fSksIHsKICAgICAgICBjbGFzc05hbWU6ICJtZXRhIiwKICAgICAgICByZWxldmFuY2U6IDEwLAogICAgICAgIGJlZ2luOiAvXlxzKlsnIl11c2UgKHN0cmljdHxhc20pWyciXS8KICAgICAgfSwgdC5BUE9TX1NUUklOR19NT0RFLCB0LlFVT1RFX1NUUklOR19NT0RFLCBkLCBnLCB1LCB0LkNfTElORV9DT01NRU5UX01PREUsIHQuQ09NTUVOVCgiL1xcKlxcKiIsICJcXCovIiwgewogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICBjb250YWluczogW3sKICAgICAgICAgIGNsYXNzTmFtZTogImRvY3RhZyIsCiAgICAgICAgICBiZWdpbjogIkBbQS1aYS16XSsiLAogICAgICAgICAgY29udGFpbnM6IFt7Y2xhc3NOYW1lOiAidHlwZSIsIGJlZ2luOiAiXFx7IiwgZW5kOiAiXFx9IiwgcmVsZXZhbmNlOiAwfSwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJ2YXJpYWJsZSIsCiAgICAgICAgICAgIGJlZ2luOiBpICsgIig/PVxccyooLSl8JCkiLAogICAgICAgICAgICBlbmRzUGFyZW50OiAhMCwKICAgICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgICB9LCB7YmVnaW46IC8oPz1bXlxuXSlccy8sIHJlbGV2YW5jZTogMH1dCiAgICAgICAgfV0KICAgICAgfSksIHQuQ19CTE9DS19DT01NRU5UX01PREUsIGwsIHsKICAgICAgICBiZWdpbjogcigvW3ssXG5dXHMqLywgcyhyKC8oKChcL1wvLiokKXwoXC9cKigufFxuKSpcKlwvKSlccyopKi8sIGkgKyAiXFxzKjoiKSkpLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICBjb250YWluczogW3tjbGFzc05hbWU6ICJhdHRyIiwgYmVnaW46IGkgKyBzKCJcXHMqOiIpLCByZWxldmFuY2U6IDB9XQogICAgICB9LCB7CiAgICAgICAgYmVnaW46ICIoIiArIHQuUkVfU1RBUlRFUlNfUkUgKyAifFxcYihjYXNlfHJldHVybnx0aHJvdylcXGIpXFxzKiIsCiAgICAgICAga2V5d29yZHM6ICJyZXR1cm4gdGhyb3cgY2FzZSIsCiAgICAgICAgY29udGFpbnM6IFt0LkNfTElORV9DT01NRU5UX01PREUsIHQuQ19CTE9DS19DT01NRU5UX01PREUsIHQuUkVHRVhQX01PREUsIHsKICAgICAgICAgIGNsYXNzTmFtZTogImZ1bmN0aW9uIiwKICAgICAgICAgIGJlZ2luOiAiKFxcKFteKF0qKFxcKFteKF0qKFxcKFteKF0qXFwpKT9cXCkpP1xcKXwiICsgdC5VTkRFUlNDT1JFX0lERU5UX1JFICsgIilcXHMqPT4iLAogICAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgICAgZW5kOiAiXFxzKj0+IiwKICAgICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgICBjbGFzc05hbWU6ICJwYXJhbXMiLAogICAgICAgICAgICB2YXJpYW50czogW3tiZWdpbjogdC5VTkRFUlNDT1JFX0lERU5UX1JFfSwgewogICAgICAgICAgICAgIGNsYXNzTmFtZTogbnVsbCwKICAgICAgICAgICAgICBiZWdpbjogL1woXHMqXCkvLAogICAgICAgICAgICAgIHNraXA6ICEwCiAgICAgICAgICAgIH0sIHtiZWdpbjogL1woLywgZW5kOiAvXCkvLCBleGNsdWRlQmVnaW46ICEwLCBleGNsdWRlRW5kOiAhMCwga2V5d29yZHM6IG8sIGNvbnRhaW5zOiBifV0KICAgICAgICAgIH1dCiAgICAgICAgfSwge2JlZ2luOiAvLC8sIHJlbGV2YW5jZTogMH0sIHsKICAgICAgICAgIGNsYXNzTmFtZTogIiIsCiAgICAgICAgICBiZWdpbjogL1xzLywKICAgICAgICAgIGVuZDogL1xzKi8sCiAgICAgICAgICBza2lwOiAhMAogICAgICAgIH0sIHsKICAgICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAiPD4iLCBlbmQ6ICI8Lz4ifSwge2JlZ2luOiBjLmJlZ2luLCBlbmQ6IGMuZW5kfV0sCiAgICAgICAgICBzdWJMYW5ndWFnZTogInhtbCIsCiAgICAgICAgICBjb250YWluczogW3tiZWdpbjogYy5iZWdpbiwgZW5kOiBjLmVuZCwgc2tpcDogITAsIGNvbnRhaW5zOiBbInNlbGYiXX1dCiAgICAgICAgfV0sCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJmdW5jdGlvbiIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogImZ1bmN0aW9uIiwKICAgICAgICBlbmQ6IC9cey8sCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgY29udGFpbnM6IFt0LmluaGVyaXQodC5USVRMRV9NT0RFLCB7YmVnaW46IGl9KSwgX10sCiAgICAgICAgaWxsZWdhbDogL1xbfCUvCiAgICAgIH0sIHtiZWdpbjogL1wkWyguXS99LCB0Lk1FVEhPRF9HVUFSRCwgewogICAgICAgIGNsYXNzTmFtZTogImNsYXNzIiwKICAgICAgICBiZWdpbktleXdvcmRzOiAiY2xhc3MiLAogICAgICAgIGVuZDogL1t7Oz1dLywKICAgICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAgICBpbGxlZ2FsOiAvWzoiXFtcXV0vLAogICAgICAgIGNvbnRhaW5zOiBbe2JlZ2luS2V5d29yZHM6ICJleHRlbmRzIn0sIHQuVU5ERVJTQ09SRV9USVRMRV9NT0RFXQogICAgICB9LCB7YmVnaW5LZXl3b3JkczogImNvbnN0cnVjdG9yIiwgZW5kOiAvXHsvLCBleGNsdWRlRW5kOiAhMH0sIHsKICAgICAgICBiZWdpbjogIihnZXR8c2V0KVxccysoPz0iICsgaSArICJcXCgpIiwKICAgICAgICBlbmQ6IC97LywKICAgICAgICBrZXl3b3JkczogImdldCBzZXQiLAogICAgICAgIGNvbnRhaW5zOiBbdC5pbmhlcml0KHQuVElUTEVfTU9ERSwge2JlZ2luOiBpfSksIHtiZWdpbjogL1woXCkvfSwgX10KICAgICAgfV0sCiAgICAgIGlsbGVnYWw6IC8jKD8hISkvCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInR5cGVzY3JpcHQiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIGNvbnN0IGUgPSBbImFzIiwgImluIiwgIm9mIiwgImlmIiwgImZvciIsICJ3aGlsZSIsICJmaW5hbGx5IiwgInZhciIsICJuZXciLCAiZnVuY3Rpb24iLCAiZG8iLCAicmV0dXJuIiwgInZvaWQiLCAiZWxzZSIsICJicmVhayIsICJjYXRjaCIsICJpbnN0YW5jZW9mIiwgIndpdGgiLCAidGhyb3ciLCAiY2FzZSIsICJkZWZhdWx0IiwgInRyeSIsICJzd2l0Y2giLCAiY29udGludWUiLCAidHlwZW9mIiwgImRlbGV0ZSIsICJsZXQiLCAieWllbGQiLCAiY29uc3QiLCAiY2xhc3MiLCAiZGVidWdnZXIiLCAiYXN5bmMiLCAiYXdhaXQiLCAic3RhdGljIiwgImltcG9ydCIsICJmcm9tIiwgImV4cG9ydCIsICJleHRlbmRzIl0sCiAgICBuID0gWyJ0cnVlIiwgImZhbHNlIiwgIm51bGwiLCAidW5kZWZpbmVkIiwgIk5hTiIsICJJbmZpbml0eSJdLAogICAgYSA9IFtdLmNvbmNhdChbInNldEludGVydmFsIiwgInNldFRpbWVvdXQiLCAiY2xlYXJJbnRlcnZhbCIsICJjbGVhclRpbWVvdXQiLCAicmVxdWlyZSIsICJleHBvcnRzIiwgImV2YWwiLCAiaXNGaW5pdGUiLCAiaXNOYU4iLCAicGFyc2VGbG9hdCIsICJwYXJzZUludCIsICJkZWNvZGVVUkkiLCAiZGVjb2RlVVJJQ29tcG9uZW50IiwgImVuY29kZVVSSSIsICJlbmNvZGVVUklDb21wb25lbnQiLCAiZXNjYXBlIiwgInVuZXNjYXBlIl0sIFsiYXJndW1lbnRzIiwgInRoaXMiLCAic3VwZXIiLCAiY29uc29sZSIsICJ3aW5kb3ciLCAiZG9jdW1lbnQiLCAibG9jYWxTdG9yYWdlIiwgIm1vZHVsZSIsICJnbG9iYWwiXSwgWyJJbnRsIiwgIkRhdGFWaWV3IiwgIk51bWJlciIsICJNYXRoIiwgIkRhdGUiLCAiU3RyaW5nIiwgIlJlZ0V4cCIsICJPYmplY3QiLCAiRnVuY3Rpb24iLCAiQm9vbGVhbiIsICJFcnJvciIsICJTeW1ib2wiLCAiU2V0IiwgIk1hcCIsICJXZWFrU2V0IiwgIldlYWtNYXAiLCAiUHJveHkiLCAiUmVmbGVjdCIsICJKU09OIiwgIlByb21pc2UiLCAiRmxvYXQ2NEFycmF5IiwgIkludDE2QXJyYXkiLCAiSW50MzJBcnJheSIsICJJbnQ4QXJyYXkiLCAiVWludDE2QXJyYXkiLCAiVWludDMyQXJyYXkiLCAiRmxvYXQzMkFycmF5IiwgIkFycmF5IiwgIlVpbnQ4QXJyYXkiLCAiVWludDhDbGFtcGVkQXJyYXkiLCAiQXJyYXlCdWZmZXIiXSwgWyJFdmFsRXJyb3IiLCAiSW50ZXJuYWxFcnJvciIsICJSYW5nZUVycm9yIiwgIlJlZmVyZW5jZUVycm9yIiwgIlN5bnRheEVycm9yIiwgIlR5cGVFcnJvciIsICJVUklFcnJvciJdKTsKICByZXR1cm4gZnVuY3Rpb24gKHIpIHsKICAgIHZhciB0ID0gewogICAgICAkcGF0dGVybjogIltBLVphLXokX11bMC05QS1aYS16JF9dKiIsCiAgICAgIGtleXdvcmQ6IGUuY29uY2F0KFsidHlwZSIsICJuYW1lc3BhY2UiLCAidHlwZWRlZiIsICJpbnRlcmZhY2UiLCAicHVibGljIiwgInByaXZhdGUiLCAicHJvdGVjdGVkIiwgImltcGxlbWVudHMiLCAiZGVjbGFyZSIsICJhYnN0cmFjdCIsICJyZWFkb25seSJdKS5qb2luKCIgIiksCiAgICAgIGxpdGVyYWw6IG4uam9pbigiICIpLAogICAgICBidWlsdF9pbjogYS5jb25jYXQoWyJhbnkiLCAidm9pZCIsICJudW1iZXIiLCAiYm9vbGVhbiIsICJzdHJpbmciLCAib2JqZWN0IiwgIm5ldmVyIiwgImVudW0iXSkuam9pbigiICIpCiAgICB9LCBzID0ge2NsYXNzTmFtZTogIm1ldGEiLCBiZWdpbjogIkBbQS1aYS16JF9dWzAtOUEtWmEteiRfXSoifSwgaSA9IHsKICAgICAgY2xhc3NOYW1lOiAibnVtYmVyIiwKICAgICAgdmFyaWFudHM6IFt7YmVnaW46ICJcXGIoMFtiQl1bMDFdKyluPyJ9LCB7YmVnaW46ICJcXGIoMFtvT11bMC03XSspbj8ifSwge2JlZ2luOiByLkNfTlVNQkVSX1JFICsgIm4/In1dLAogICAgICByZWxldmFuY2U6IDAKICAgIH0sIG8gPSB7Y2xhc3NOYW1lOiAic3Vic3QiLCBiZWdpbjogIlxcJFxceyIsIGVuZDogIlxcfSIsIGtleXdvcmRzOiB0LCBjb250YWluczogW119LCBjID0gewogICAgICBiZWdpbjogImh0bWxgIiwKICAgICAgZW5kOiAiIiwKICAgICAgc3RhcnRzOiB7ZW5kOiAiYCIsIHJldHVybkVuZDogITEsIGNvbnRhaW5zOiBbci5CQUNLU0xBU0hfRVNDQVBFLCBvXSwgc3ViTGFuZ3VhZ2U6ICJ4bWwifQogICAgfSwgbCA9IHsKICAgICAgYmVnaW46ICJjc3NgIiwKICAgICAgZW5kOiAiIiwKICAgICAgc3RhcnRzOiB7ZW5kOiAiYCIsIHJldHVybkVuZDogITEsIGNvbnRhaW5zOiBbci5CQUNLU0xBU0hfRVNDQVBFLCBvXSwgc3ViTGFuZ3VhZ2U6ICJjc3MifQogICAgfSwgRSA9IHtjbGFzc05hbWU6ICJzdHJpbmciLCBiZWdpbjogImAiLCBlbmQ6ICJgIiwgY29udGFpbnM6IFtyLkJBQ0tTTEFTSF9FU0NBUEUsIG9dfTsKICAgIG8uY29udGFpbnMgPSBbci5BUE9TX1NUUklOR19NT0RFLCByLlFVT1RFX1NUUklOR19NT0RFLCBjLCBsLCBFLCBpLCByLlJFR0VYUF9NT0RFXTsKICAgIHZhciBkID0gewogICAgICBiZWdpbjogIlxcKCIsCiAgICAgIGVuZDogL1wpLywKICAgICAga2V5d29yZHM6IHQsCiAgICAgIGNvbnRhaW5zOiBbInNlbGYiLCByLlFVT1RFX1NUUklOR19NT0RFLCByLkFQT1NfU1RSSU5HX01PREUsIHIuTlVNQkVSX01PREVdCiAgICB9LCB1ID0gewogICAgICBjbGFzc05hbWU6ICJwYXJhbXMiLAogICAgICBiZWdpbjogL1woLywKICAgICAgZW5kOiAvXCkvLAogICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICBleGNsdWRlRW5kOiAhMCwKICAgICAga2V5d29yZHM6IHQsCiAgICAgIGNvbnRhaW5zOiBbci5DX0xJTkVfQ09NTUVOVF9NT0RFLCByLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLCBzLCBkXQogICAgfTsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJUeXBlU2NyaXB0IiwKICAgICAgYWxpYXNlczogWyJ0cyJdLAogICAgICBrZXl3b3JkczogdCwKICAgICAgY29udGFpbnM6IFtyLlNIRUJBTkcoKSwgewogICAgICAgIGNsYXNzTmFtZTogIm1ldGEiLAogICAgICAgIGJlZ2luOiAvXlxzKlsnIl11c2Ugc3RyaWN0WyciXS8KICAgICAgfSwgci5BUE9TX1NUUklOR19NT0RFLCByLlFVT1RFX1NUUklOR19NT0RFLCBjLCBsLCBFLCByLkNfTElORV9DT01NRU5UX01PREUsIHIuQ19CTE9DS19DT01NRU5UX01PREUsIGksIHsKICAgICAgICBiZWdpbjogIigiICsgci5SRV9TVEFSVEVSU19SRSArICJ8XFxiKGNhc2V8cmV0dXJufHRocm93KVxcYilcXHMqIiwKICAgICAgICBrZXl3b3JkczogInJldHVybiB0aHJvdyBjYXNlIiwKICAgICAgICBjb250YWluczogW3IuQ19MSU5FX0NPTU1FTlRfTU9ERSwgci5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgci5SRUdFWFBfTU9ERSwgewogICAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgICAgYmVnaW46ICIoXFwoW14oXSooXFwoW14oXSooXFwoW14oXSpcXCkpP1xcKSk/XFwpfCIgKyByLlVOREVSU0NPUkVfSURFTlRfUkUgKyAiKVxccyo9PiIsCiAgICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgICBlbmQ6ICJcXHMqPT4iLAogICAgICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgICAgIGNsYXNzTmFtZTogInBhcmFtcyIsCiAgICAgICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiByLlVOREVSU0NPUkVfSURFTlRfUkV9LCB7CiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBudWxsLAogICAgICAgICAgICAgIGJlZ2luOiAvXChccypcKS8sCiAgICAgICAgICAgICAgc2tpcDogITAKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGJlZ2luOiAvXCgvLAogICAgICAgICAgICAgIGVuZDogL1wpLywKICAgICAgICAgICAgICBleGNsdWRlQmVnaW46ICEwLAogICAgICAgICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgICAgICAgIGtleXdvcmRzOiB0LAogICAgICAgICAgICAgIGNvbnRhaW5zOiBkLmNvbnRhaW5zCiAgICAgICAgICAgIH1dCiAgICAgICAgICB9XQogICAgICAgIH1dLAogICAgICAgIHJlbGV2YW5jZTogMAogICAgICB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgIGJlZ2luS2V5d29yZHM6ICJmdW5jdGlvbiIsCiAgICAgICAgZW5kOiAvW1x7O10vLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIGtleXdvcmRzOiB0LAogICAgICAgIGNvbnRhaW5zOiBbInNlbGYiLCByLmluaGVyaXQoci5USVRMRV9NT0RFLCB7YmVnaW46ICJbQS1aYS16JF9dWzAtOUEtWmEteiRfXSoifSksIHVdLAogICAgICAgIGlsbGVnYWw6IC8lLywKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfSwge2JlZ2luS2V5d29yZHM6ICJjb25zdHJ1Y3RvciIsIGVuZDogL1tceztdLywgZXhjbHVkZUVuZDogITAsIGNvbnRhaW5zOiBbInNlbGYiLCB1XX0sIHsKICAgICAgICBiZWdpbjogL21vZHVsZVwuLywKICAgICAgICBrZXl3b3Jkczoge2J1aWx0X2luOiAibW9kdWxlIn0sCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIHtiZWdpbktleXdvcmRzOiAibW9kdWxlIiwgZW5kOiAvXHsvLCBleGNsdWRlRW5kOiAhMH0sIHsKICAgICAgICBiZWdpbktleXdvcmRzOiAiaW50ZXJmYWNlIiwKICAgICAgICBlbmQ6IC9cey8sCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAga2V5d29yZHM6ICJpbnRlcmZhY2UgZXh0ZW5kcyIKICAgICAgfSwge2JlZ2luOiAvXCRbKC5dL30sIHtiZWdpbjogIlxcLiIgKyByLklERU5UX1JFLCByZWxldmFuY2U6IDB9LCBzLCBkXQogICAgfQogIH0KfSgpKTsKaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCJhcmR1aW5vIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0ID0gZS5yZXF1aXJlTGFuZ3VhZ2UoImNwcCIpLnJhd0RlZmluaXRpb24oKSwgciA9IHQua2V5d29yZHM7CiAgICByZXR1cm4gci5rZXl3b3JkICs9ICIgYm9vbGVhbiBieXRlIHdvcmQgU3RyaW5nIiwgci5saXRlcmFsICs9ICIgRElHSVRBTF9NRVNTQUdFIEZJUk1BVEFfU1RSSU5HIEFOQUxPR19NRVNTQUdFIFJFUE9SVF9ESUdJVEFMIFJFUE9SVF9BTkFMT0cgSU5QVVRfUFVMTFVQIFNFVF9QSU5fTU9ERSBJTlRFUk5BTDJWNTYgU1lTVEVNX1JFU0VUIExFRF9CVUlMVElOIElOVEVSTkFMMVYxIFNZU0VYX1NUQVJUIElOVEVSTkFMIEVYVEVSTkFMIERFRkFVTFQgT1VUUFVUIElOUFVUIEhJR0ggTE9XIiwgci5idWlsdF9pbiArPSAiIHNldHVwIGxvb3AgS2V5Ym9hcmRDb250cm9sbGVyIE1vdXNlQ29udHJvbGxlciBTb2Z0d2FyZVNlcmlhbCBFdGhlcm5ldFNlcnZlciBFdGhlcm5ldENsaWVudCBMaXF1aWRDcnlzdGFsIFJvYm90Q29udHJvbCBHU01Wb2ljZUNhbGwgRXRoZXJuZXRVRFAgRXNwbG9yYVRGVCBIdHRwQ2xpZW50IFJvYm90TW90b3IgV2lGaUNsaWVudCBHU01TY2FubmVyIEZpbGVTeXN0ZW0gU2NoZWR1bGVyIEdTTVNlcnZlciBZdW5DbGllbnQgWXVuU2VydmVyIElQQWRkcmVzcyBHU01DbGllbnQgR1NNTW9kZW0gS2V5Ym9hcmQgRXRoZXJuZXQgQ29uc29sZSBHU01CYW5kIEVzcGxvcmEgU3RlcHBlciBQcm9jZXNzIFdpRmlVRFAgR1NNX1NNUyBNYWlsYm94IFVTQkhvc3QgRmlybWF0YSBQSW1hZ2UgQ2xpZW50IFNlcnZlciBHU01QSU4gRmlsZUlPIEJyaWRnZSBTZXJpYWwgRUVQUk9NIFN0cmVhbSBNb3VzZSBBdWRpbyBTZXJ2byBGaWxlIFRhc2sgR1BSUyBXaUZpIFdpcmUgVEZUIEdTTSBTUEkgU0QgcnVuU2hlbGxDb21tYW5kQXN5bmNocm9ub3VzbHkgYW5hbG9nV3JpdGVSZXNvbHV0aW9uIHJldHJpZXZlQ2FsbGluZ051bWJlciBwcmludEZpcm13YXJlVmVyc2lvbiBhbmFsb2dSZWFkUmVzb2x1dGlvbiBzZW5kRGlnaXRhbFBvcnRQYWlyIG5vTGlzdGVuT25Mb2NhbGhvc3QgcmVhZEpveXN0aWNrQnV0dG9uIHNldEZpcm13YXJlVmVyc2lvbiByZWFkSm95c3RpY2tTd2l0Y2ggc2Nyb2xsRGlzcGxheVJpZ2h0IGdldFZvaWNlQ2FsbFN0YXR1cyBzY3JvbGxEaXNwbGF5TGVmdCB3cml0ZU1pY3Jvc2Vjb25kcyBkZWxheU1pY3Jvc2Vjb25kcyBiZWdpblRyYW5zbWlzc2lvbiBnZXRTaWduYWxTdHJlbmd0aCBydW5Bc3luY2hyb25vdXNseSBnZXRBc3luY2hyb25vdXNseSBsaXN0ZW5PbkxvY2FsaG9zdCBnZXRDdXJyZW50Q2FycmllciByZWFkQWNjZWxlcm9tZXRlciBtZXNzYWdlQXZhaWxhYmxlIHNlbmREaWdpdGFsUG9ydHMgbGluZUZvbGxvd0NvbmZpZyBjb3VudHJ5TmFtZVdyaXRlIHJ1blNoZWxsQ29tbWFuZCByZWFkU3RyaW5nVW50aWwgcmV3aW5kRGlyZWN0b3J5IHJlYWRUZW1wZXJhdHVyZSBzZXRDbG9ja0RpdmlkZXIgcmVhZExpZ2h0U2Vuc29yIGVuZFRyYW5zbWlzc2lvbiBhbmFsb2dSZWZlcmVuY2UgZGV0YWNoSW50ZXJydXB0IGNvdW50cnlOYW1lUmVhZCBhdHRhY2hJbnRlcnJ1cHQgZW5jcnlwdGlvblR5cGUgcmVhZEJ5dGVzVW50aWwgcm9ib3ROYW1lV3JpdGUgcmVhZE1pY3JvcGhvbmUgcm9ib3ROYW1lUmVhZCBjaXR5TmFtZVdyaXRlIHVzZXJOYW1lV3JpdGUgcmVhZEpveXN0aWNrWSByZWFkSm95c3RpY2tYIG1vdXNlUmVsZWFzZWQgb3Blbk5leHRGaWxlIHNjYW5OZXR3b3JrcyBub0ludGVycnVwdHMgZGlnaXRhbFdyaXRlIGJlZ2luU3BlYWtlciBtb3VzZVByZXNzZWQgaXNBY3Rpb25Eb25lIG1vdXNlRHJhZ2dlZCBkaXNwbGF5TG9nb3Mgbm9BdXRvc2Nyb2xsIGFkZFBhcmFtZXRlciByZW1vdGVOdW1iZXIgZ2V0TW9kaWZpZXJzIGtleWJvYXJkUmVhZCB1c2VyTmFtZVJlYWQgd2FpdENvbnRpbnVlIHByb2Nlc3NJbnB1dCBwYXJzZUNvbW1hbmQgcHJpbnRWZXJzaW9uIHJlYWROZXR3b3JrcyB3cml0ZU1lc3NhZ2UgYmxpbmtWZXJzaW9uIGNpdHlOYW1lUmVhZCByZWFkTWVzc2FnZSBzZXREYXRhTW9kZSBwYXJzZVBhY2tldCBpc0xpc3RlbmluZyBzZXRCaXRPcmRlciBiZWdpblBhY2tldCBpc0RpcmVjdG9yeSBtb3RvcnNXcml0ZSBkcmF3Q29tcGFzcyBkaWdpdGFsUmVhZCBjbGVhclNjcmVlbiBzZXJpYWxFdmVudCByaWdodFRvTGVmdCBzZXRUZXh0U2l6ZSBsZWZ0VG9SaWdodCByZXF1ZXN0RnJvbSBrZXlSZWxlYXNlZCBjb21wYXNzUmVhZCBhbmFsb2dXcml0ZSBpbnRlcnJ1cHRzIFdpRmlTZXJ2ZXIgZGlzY29ubmVjdCBwbGF5TWVsb2R5IHBhcnNlRmxvYXQgYXV0b3Njcm9sbCBnZXRQSU5Vc2VkIHNldFBJTlVzZWQgc2V0VGltZW91dCBzZW5kQW5hbG9nIHJlYWRTbGlkZXIgYW5hbG9nUmVhZCBiZWdpbldyaXRlIGNyZWF0ZUNoYXIgbW90b3JzU3RvcCBrZXlQcmVzc2VkIHRlbXBvV3JpdGUgcmVhZEJ1dHRvbiBzdWJuZXRNYXNrIGRlYnVnUHJpbnQgbWFjQWRkcmVzcyB3cml0ZUdyZWVuIHJhbmRvbVNlZWQgYXR0YWNoR1BSUyByZWFkU3RyaW5nIHNlbmRTdHJpbmcgcmVtb3RlUG9ydCByZWxlYXNlQWxsIG1vdXNlTW92ZWQgYmFja2dyb3VuZCBnZXRYQ2hhbmdlIGdldFlDaGFuZ2UgYW5zd2VyQ2FsbCBnZXRSZXN1bHQgdm9pY2VDYWxsIGVuZFBhY2tldCBjb25zdHJhaW4gZ2V0U29ja2V0IHdyaXRlSlNPTiBnZXRCdXR0b24gYXZhaWxhYmxlIGNvbm5lY3RlZCBmaW5kVW50aWwgcmVhZEJ5dGVzIGV4aXRWYWx1ZSByZWFkR3JlZW4gd3JpdGVCbHVlIHN0YXJ0TG9vcCBJUEFkZHJlc3MgaXNQcmVzc2VkIHNlbmRTeXNleCBwYXVzZU1vZGUgZ2F0ZXdheUlQIHNldEN1cnNvciBnZXRPZW1LZXkgdHVuZVdyaXRlIG5vRGlzcGxheSBsb2FkSW1hZ2Ugc3dpdGNoUElOIG9uUmVxdWVzdCBvblJlY2VpdmUgY2hhbmdlUElOIHBsYXlGaWxlIG5vQnVmZmVyIHBhcnNlSW50IG92ZXJmbG93IGNoZWNrUElOIGtub2JSZWFkIGJlZ2luVEZUIGJpdENsZWFyIHVwZGF0ZUlSIGJpdFdyaXRlIHBvc2l0aW9uIHdyaXRlUkdCIGhpZ2hCeXRlIHdyaXRlUmVkIHNldFNwZWVkIHJlYWRCbHVlIG5vU3Ryb2tlIHJlbW90ZUlQIHRyYW5zZmVyIHNodXRkb3duIGhhbmdDYWxsIGJlZ2luU01TIGVuZFdyaXRlIGF0dGFjaGVkIG1haW50YWluIG5vQ3Vyc29yIGNoZWNrUmVnIGNoZWNrUFVLIHNoaWZ0T3V0IGlzVmFsaWQgc2hpZnRJbiBwdWxzZUluIGNvbm5lY3QgcHJpbnRsbiBsb2NhbElQIHBpbk1vZGUgZ2V0SU1FSSBkaXNwbGF5IG5vQmxpbmsgcHJvY2VzcyBnZXRCYW5kIHJ1bm5pbmcgYmVnaW5TRCBkcmF3Qk1QIGxvd0J5dGUgc2V0QmFuZCByZWxlYXNlIGJpdFJlYWQgcHJlcGFyZSBwb2ludFRvIHJlYWRSZWQgc2V0TW9kZSBub0ZpbGwgcmVtb3ZlIGxpc3RlbiBzdHJva2UgZGV0YWNoIGF0dGFjaCBub1RvbmUgZXhpc3RzIGJ1ZmZlciBoZWlnaHQgYml0U2V0IGNpcmNsZSBjb25maWcgY3Vyc29yIHJhbmRvbSBJUnJlYWQgc2V0RE5TIGVuZFNNUyBnZXRLZXkgbWljcm9zIG1pbGxpcyBiZWdpbiBwcmludCB3cml0ZSByZWFkeSBmbHVzaCB3aWR0aCBpc1BJTiBibGluayBjbGVhciBwcmVzcyBta2RpciBybWRpciBjbG9zZSBwb2ludCB5aWVsZCBpbWFnZSBCU1NJRCBjbGljayBkZWxheSByZWFkIHRleHQgbW92ZSBwZWVrIGJlZXAgcmVjdCBsaW5lIG9wZW4gc2VlayBmaWxsIHNpemUgdHVybiBzdG9wIGhvbWUgZmluZCBzdGVwIHRvbmUgc3FydCBSU1NJIFNTSUQgZW5kIGJpdCB0YW4gY29zIHNpbiBwb3cgbWFwIGFicyBtYXggbWluIGdldCBydW4gcHV0IiwgdC5uYW1lID0gIkFyZHVpbm8iLCB0LmFsaWFzZXMgPSBbImlubyJdLCB0CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInJ1c3QiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSAiKFt1aV0oOHwxNnwzMnw2NHwxMjh8c2l6ZSl8ZigzMnw2NCkpPyIsCiAgICAgIHQgPSAiZHJvcCBpOCBpMTYgaTMyIGk2NCBpMTI4IGlzaXplIHU4IHUxNiB1MzIgdTY0IHUxMjggdXNpemUgZjMyIGY2NCBzdHIgY2hhciBib29sIEJveCBPcHRpb24gUmVzdWx0IFN0cmluZyBWZWMgQ29weSBTZW5kIFNpemVkIFN5bmMgRHJvcCBGbiBGbk11dCBGbk9uY2UgVG9Pd25lZCBDbG9uZSBEZWJ1ZyBQYXJ0aWFsRXEgUGFydGlhbE9yZCBFcSBPcmQgQXNSZWYgQXNNdXQgSW50byBGcm9tIERlZmF1bHQgSXRlcmF0b3IgRXh0ZW5kIEludG9JdGVyYXRvciBEb3VibGVFbmRlZEl0ZXJhdG9yIEV4YWN0U2l6ZUl0ZXJhdG9yIFNsaWNlQ29uY2F0RXh0IFRvU3RyaW5nIGFzc2VydCEgYXNzZXJ0X2VxISBiaXRmbGFncyEgYnl0ZXMhIGNmZyEgY29sISBjb25jYXQhIGNvbmNhdF9pZGVudHMhIGRlYnVnX2Fzc2VydCEgZGVidWdfYXNzZXJ0X2VxISBlbnYhIHBhbmljISBmaWxlISBmb3JtYXQhIGZvcm1hdF9hcmdzISBpbmNsdWRlX2JpbiEgaW5jbHVkZV9zdHIhIGxpbmUhIGxvY2FsX2RhdGFfa2V5ISBtb2R1bGVfcGF0aCEgb3B0aW9uX2VudiEgcHJpbnQhIHByaW50bG4hIHNlbGVjdCEgc3RyaW5naWZ5ISB0cnkhIHVuaW1wbGVtZW50ZWQhIHVucmVhY2hhYmxlISB2ZWMhIHdyaXRlISB3cml0ZWxuISBtYWNyb19ydWxlcyEgYXNzZXJ0X25lISBkZWJ1Z19hc3NlcnRfbmUhIjsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJSdXN0IiwKICAgICAgYWxpYXNlczogWyJycyJdLAogICAgICBrZXl3b3JkczogewogICAgICAgICRwYXR0ZXJuOiBlLklERU5UX1JFICsgIiE/IiwKICAgICAgICBrZXl3b3JkOiAiYWJzdHJhY3QgYXMgYXN5bmMgYXdhaXQgYmVjb21lIGJveCBicmVhayBjb25zdCBjb250aW51ZSBjcmF0ZSBkbyBkeW4gZWxzZSBlbnVtIGV4dGVybiBmYWxzZSBmaW5hbCBmbiBmb3IgaWYgaW1wbCBpbiBsZXQgbG9vcCBtYWNybyBtYXRjaCBtb2QgbW92ZSBtdXQgb3ZlcnJpZGUgcHJpdiBwdWIgcmVmIHJldHVybiBzZWxmIFNlbGYgc3RhdGljIHN0cnVjdCBzdXBlciB0cmFpdCB0cnVlIHRyeSB0eXBlIHR5cGVvZiB1bnNhZmUgdW5zaXplZCB1c2UgdmlydHVhbCB3aGVyZSB3aGlsZSB5aWVsZCIsCiAgICAgICAgbGl0ZXJhbDogInRydWUgZmFsc2UgU29tZSBOb25lIE9rIEVyciIsCiAgICAgICAgYnVpbHRfaW46IHQKICAgICAgfSwKICAgICAgaWxsZWdhbDogIjwvIiwKICAgICAgY29udGFpbnM6IFtlLkNfTElORV9DT01NRU5UX01PREUsIGUuQ09NTUVOVCgiL1xcKiIsICJcXCovIiwge2NvbnRhaW5zOiBbInNlbGYiXX0pLCBlLmluaGVyaXQoZS5RVU9URV9TVFJJTkdfTU9ERSwgewogICAgICAgIGJlZ2luOiAvYj8iLywKICAgICAgICBpbGxlZ2FsOiBudWxsCiAgICAgIH0pLCB7CiAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogL3IoIyopIigufFxuKSo/IlwxKD8hIykvfSwge2JlZ2luOiAvYj8nXFw/KHhcd3syfXx1XHd7NH18VVx3ezh9fC4pJy99XQogICAgICB9LCB7Y2xhc3NOYW1lOiAic3ltYm9sIiwgYmVnaW46IC8nW2EtekEtWl9dW2EtekEtWjAtOV9dKi99LCB7CiAgICAgICAgY2xhc3NOYW1lOiAibnVtYmVyIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogIlxcYjBiKFswMV9dKykiICsgbn0sIHtiZWdpbjogIlxcYjBvKFswLTdfXSspIiArIG59LCB7YmVnaW46ICJcXGIweChbQS1GYS1mMC05X10rKSIgKyBufSwge2JlZ2luOiAiXFxiKFxcZFtcXGRfXSooXFwuWzAtOV9dKyk/KFtlRV1bKy1dP1swLTlfXSspPykiICsgbn1dLAogICAgICAgIHJlbGV2YW5jZTogMAogICAgICB9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgIGJlZ2luS2V5d29yZHM6ICJmbiIsCiAgICAgICAgZW5kOiAiKFxcKHw8KSIsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgY29udGFpbnM6IFtlLlVOREVSU0NPUkVfVElUTEVfTU9ERV0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogIm1ldGEiLAogICAgICAgIGJlZ2luOiAiI1xcIT9cXFsiLAogICAgICAgIGVuZDogIlxcXSIsCiAgICAgICAgY29udGFpbnM6IFt7Y2xhc3NOYW1lOiAibWV0YS1zdHJpbmciLCBiZWdpbjogLyIvLCBlbmQ6IC8iL31dCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJjbGFzcyIsCiAgICAgICAgYmVnaW5LZXl3b3JkczogInR5cGUiLAogICAgICAgIGVuZDogIjsiLAogICAgICAgIGNvbnRhaW5zOiBbZS5pbmhlcml0KGUuVU5ERVJTQ09SRV9USVRMRV9NT0RFLCB7ZW5kc1BhcmVudDogITB9KV0sCiAgICAgICAgaWxsZWdhbDogIlxcUyIKICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogImNsYXNzIiwKICAgICAgICBiZWdpbktleXdvcmRzOiAidHJhaXQgZW51bSBzdHJ1Y3QgdW5pb24iLAogICAgICAgIGVuZDogInsiLAogICAgICAgIGNvbnRhaW5zOiBbZS5pbmhlcml0KGUuVU5ERVJTQ09SRV9USVRMRV9NT0RFLCB7ZW5kc1BhcmVudDogITB9KV0sCiAgICAgICAgaWxsZWdhbDogIltcXHdcXGRdIgogICAgICB9LCB7YmVnaW46IGUuSURFTlRfUkUgKyAiOjoiLCBrZXl3b3Jkczoge2J1aWx0X2luOiB0fX0sIHtiZWdpbjogIi0+In1dCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoIm5naW54IiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0gewogICAgICBjbGFzc05hbWU6ICJ2YXJpYWJsZSIsCiAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvXCRcZCsvfSwge2JlZ2luOiAvXCRcey8sIGVuZDogL30vfSwge2JlZ2luOiAiW1xcJFxcQF0iICsgZS5VTkRFUlNDT1JFX0lERU5UX1JFfV0KICAgIH0sIGEgPSB7CiAgICAgIGVuZHNXaXRoUGFyZW50OiAhMCwKICAgICAga2V5d29yZHM6IHsKICAgICAgICAkcGF0dGVybjogIlthLXovX10rIiwKICAgICAgICBsaXRlcmFsOiAib24gb2ZmIHllcyBubyB0cnVlIGZhbHNlIG5vbmUgYmxvY2tlZCBkZWJ1ZyBpbmZvIG5vdGljZSB3YXJuIGVycm9yIGNyaXQgc2VsZWN0IGJyZWFrIGxhc3QgcGVybWFuZW50IHJlZGlyZWN0IGtxdWV1ZSBydHNpZyBlcG9sbCBwb2xsIC9kZXYvcG9sbCIKICAgICAgfSwKICAgICAgcmVsZXZhbmNlOiAwLAogICAgICBpbGxlZ2FsOiAiPT4iLAogICAgICBjb250YWluczogW2UuSEFTSF9DT01NRU5UX01PREUsIHsKICAgICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICAgIGNvbnRhaW5zOiBbZS5CQUNLU0xBU0hfRVNDQVBFLCBuXSwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogLyIvLCBlbmQ6IC8iL30sIHtiZWdpbjogLycvLCBlbmQ6IC8nL31dCiAgICAgIH0sIHsKICAgICAgICBiZWdpbjogIihbYS16XSspOi8iLAogICAgICAgIGVuZDogIlxccyIsCiAgICAgICAgZW5kc1dpdGhQYXJlbnQ6ICEwLAogICAgICAgIGV4Y2x1ZGVFbmQ6ICEwLAogICAgICAgIGNvbnRhaW5zOiBbbl0KICAgICAgfSwgewogICAgICAgIGNsYXNzTmFtZTogInJlZ2V4cCIsCiAgICAgICAgY29udGFpbnM6IFtlLkJBQ0tTTEFTSF9FU0NBUEUsIG5dLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAiXFxzXFxeIiwgZW5kOiAiXFxzfHt8OyIsIHJldHVybkVuZDogITB9LCB7CiAgICAgICAgICBiZWdpbjogIn5cXCo/XFxzKyIsCiAgICAgICAgICBlbmQ6ICJcXHN8e3w7IiwKICAgICAgICAgIHJldHVybkVuZDogITAKICAgICAgICB9LCB7YmVnaW46ICJcXCooXFwuW2EtelxcLV0rKSsifSwge2JlZ2luOiAiKFthLXpcXC1dK1xcLikrXFwqIn1dCiAgICAgIH0sIHsKICAgICAgICBjbGFzc05hbWU6ICJudW1iZXIiLAogICAgICAgIGJlZ2luOiAiXFxiXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM30oOlxcZHsxLDV9KT9cXGIiCiAgICAgIH0sIHtjbGFzc05hbWU6ICJudW1iZXIiLCBiZWdpbjogIlxcYlxcZCtba0ttTWdHZHNoZHd5XSpcXGIiLCByZWxldmFuY2U6IDB9LCBuXQogICAgfTsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJOZ2lueCBjb25maWciLAogICAgICBhbGlhc2VzOiBbIm5naW54Y29uZiJdLAogICAgICBjb250YWluczogW2UuSEFTSF9DT01NRU5UX01PREUsIHsKICAgICAgICBiZWdpbjogZS5VTkRFUlNDT1JFX0lERU5UX1JFICsgIlxccyt7IiwKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgZW5kOiAieyIsCiAgICAgICAgY29udGFpbnM6IFt7Y2xhc3NOYW1lOiAic2VjdGlvbiIsIGJlZ2luOiBlLlVOREVSU0NPUkVfSURFTlRfUkV9XSwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfSwgewogICAgICAgIGJlZ2luOiBlLlVOREVSU0NPUkVfSURFTlRfUkUgKyAiXFxzIiwKICAgICAgICBlbmQ6ICI7fHsiLAogICAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgICBjb250YWluczogW3tjbGFzc05hbWU6ICJhdHRyaWJ1dGUiLCBiZWdpbjogZS5VTkRFUlNDT1JFX0lERU5UX1JFLCBzdGFydHM6IGF9XSwKICAgICAgICByZWxldmFuY2U6IDAKICAgICAgfV0sCiAgICAgIGlsbGVnYWw6ICJbXlxcc1xcfV0iCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoImxhdGV4IiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0gewogICAgICBjbGFzc05hbWU6ICJ0YWciLAogICAgICBiZWdpbjogL1xcLywKICAgICAgcmVsZXZhbmNlOiAwLAogICAgICBjb250YWluczogW3sKICAgICAgICBjbGFzc05hbWU6ICJuYW1lIiwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogL1thLXpBLVpcdTA0MzAtXHUwNDRmXHUwNDEwLVx1MDQyZl0rWypdPy99LCB7YmVnaW46IC9bXmEtekEtWlx1MDQzMC1cdTA0NGZcdTA0MTAtXHUwNDJmMC05XS99XSwKICAgICAgICBzdGFydHM6IHsKICAgICAgICAgIGVuZHNXaXRoUGFyZW50OiAhMCwKICAgICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICAgIGNvbnRhaW5zOiBbewogICAgICAgICAgICBjbGFzc05hbWU6ICJzdHJpbmciLAogICAgICAgICAgICB2YXJpYW50czogW3tiZWdpbjogL1xbLywgZW5kOiAvXF0vfSwge2JlZ2luOiAvXHsvLCBlbmQ6IC9cfS99XQogICAgICAgICAgfSwgewogICAgICAgICAgICBiZWdpbjogL1xzKj1ccyovLAogICAgICAgICAgICBlbmRzV2l0aFBhcmVudDogITAsCiAgICAgICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICAgICAgY29udGFpbnM6IFt7Y2xhc3NOYW1lOiAibnVtYmVyIiwgYmVnaW46IC8tP1xkKlwuP1xkKyhwdHxwY3xtbXxjbXxpbnxkZHxjY3xleHxlbSk/L31dCiAgICAgICAgICB9XQogICAgICAgIH0KICAgICAgfV0KICAgIH07CiAgICByZXR1cm4gewogICAgICBuYW1lOiAiTGFUZVgiLAogICAgICBhbGlhc2VzOiBbInRleCJdLAogICAgICBjb250YWluczogW24sIHsKICAgICAgICBjbGFzc05hbWU6ICJmb3JtdWxhIiwKICAgICAgICBjb250YWluczogW25dLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICB2YXJpYW50czogW3tiZWdpbjogL1wkXCQvLCBlbmQ6IC9cJFwkL30sIHtiZWdpbjogL1wkLywgZW5kOiAvXCQvfV0KICAgICAgfSwgZS5DT01NRU5UKCIlIiwgIiQiLCB7cmVsZXZhbmNlOiAwfSldCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInlhbWwiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSAidHJ1ZSBmYWxzZSB5ZXMgbm8gbnVsbCIsIGEgPSAiW1xcdyM7Lz86QCY9KyQsLn4qXFwnKClbXFxdXSsiLCBzID0gewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgcmVsZXZhbmNlOiAwLAogICAgICAgIHZhcmlhbnRzOiBbe2JlZ2luOiAvJy8sIGVuZDogLycvfSwge2JlZ2luOiAvIi8sIGVuZDogLyIvfSwge2JlZ2luOiAvXFMrL31dLAogICAgICAgIGNvbnRhaW5zOiBbZS5CQUNLU0xBU0hfRVNDQVBFLCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJ0ZW1wbGF0ZS12YXJpYWJsZSIsCiAgICAgICAgICB2YXJpYW50czogW3tiZWdpbjogInt7IiwgZW5kOiAifX0ifSwge2JlZ2luOiAiJXsiLCBlbmQ6ICJ9In1dCiAgICAgICAgfV0KICAgICAgfSwgaSA9IGUuaW5oZXJpdChzLCB7dmFyaWFudHM6IFt7YmVnaW46IC8nLywgZW5kOiAvJy99LCB7YmVnaW46IC8iLywgZW5kOiAvIi99LCB7YmVnaW46IC9bXlxzLHt9W1xdXSsvfV19KSwKICAgICAgbCA9IHtlbmQ6ICIsIiwgZW5kc1dpdGhQYXJlbnQ6ICEwLCBleGNsdWRlRW5kOiAhMCwgY29udGFpbnM6IFtdLCBrZXl3b3JkczogbiwgcmVsZXZhbmNlOiAwfSwKICAgICAgdCA9IHtiZWdpbjogInsiLCBlbmQ6ICJ9IiwgY29udGFpbnM6IFtsXSwgaWxsZWdhbDogIlxcbiIsIHJlbGV2YW5jZTogMH0sCiAgICAgIGcgPSB7YmVnaW46ICJcXFsiLCBlbmQ6ICJcXF0iLCBjb250YWluczogW2xdLCBpbGxlZ2FsOiAiXFxuIiwgcmVsZXZhbmNlOiAwfSwgYiA9IFt7CiAgICAgICAgY2xhc3NOYW1lOiAiYXR0ciIsCiAgICAgICAgdmFyaWFudHM6IFt7YmVnaW46ICJcXHdbXFx3IDpcXC8uLV0qOig/PVsgXHRdfCQpIn0sIHtiZWdpbjogJyJcXHdbXFx3IDpcXC8uLV0qIjooPz1bIFx0XXwkKSd9LCB7YmVnaW46ICInXFx3W1xcdyA6XFwvLi1dKic6KD89WyBcdF18JCkifV0KICAgICAgfSwge2NsYXNzTmFtZTogIm1ldGEiLCBiZWdpbjogIl4tLS1zKiQiLCByZWxldmFuY2U6IDEwfSwgewogICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgYmVnaW46ICJbXFx8Pl0oWzAtOV0/WystXSk/WyBdKlxcbiggKilbXFxTIF0rXFxuKFxcMltcXFMgXStcXG4/KSoiCiAgICAgIH0sIHsKICAgICAgICBiZWdpbjogIjwlWyU9LV0/IiwKICAgICAgICBlbmQ6ICJbJS1dPyU+IiwKICAgICAgICBzdWJMYW5ndWFnZTogInJ1YnkiLAogICAgICAgIGV4Y2x1ZGVCZWdpbjogITAsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIHtjbGFzc05hbWU6ICJ0eXBlIiwgYmVnaW46ICIhXFx3KyEiICsgYX0sIHtjbGFzc05hbWU6ICJ0eXBlIiwgYmVnaW46ICIhPCIgKyBhICsgIj4ifSwgewogICAgICAgIGNsYXNzTmFtZTogInR5cGUiLAogICAgICAgIGJlZ2luOiAiISIgKyBhCiAgICAgIH0sIHtjbGFzc05hbWU6ICJ0eXBlIiwgYmVnaW46ICIhISIgKyBhfSwgewogICAgICAgIGNsYXNzTmFtZTogIm1ldGEiLAogICAgICAgIGJlZ2luOiAiJiIgKyBlLlVOREVSU0NPUkVfSURFTlRfUkUgKyAiJCIKICAgICAgfSwge2NsYXNzTmFtZTogIm1ldGEiLCBiZWdpbjogIlxcKiIgKyBlLlVOREVSU0NPUkVfSURFTlRfUkUgKyAiJCJ9LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiYnVsbGV0IiwKICAgICAgICBiZWdpbjogIlxcLSg/PVsgXXwkKSIsCiAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgIH0sIGUuSEFTSF9DT01NRU5UX01PREUsIHtiZWdpbktleXdvcmRzOiBuLCBrZXl3b3Jkczoge2xpdGVyYWw6IG59fSwgewogICAgICAgIGNsYXNzTmFtZTogIm51bWJlciIsCiAgICAgICAgYmVnaW46ICJcXGJbMC05XXs0fSgtWzAtOV1bMC05XSl7MCwyfShbVHQgXFx0XVswLTldWzAtOV0/KDpbMC05XVswLTldKXsyfSk/KFxcLlswLTldKik/KFsgXFx0XSkqKFp8Wy0rXVswLTldWzAtOV0/KDpbMC05XVswLTldKT8pP1xcYiIKICAgICAgfSwge2NsYXNzTmFtZTogIm51bWJlciIsIGJlZ2luOiBlLkNfTlVNQkVSX1JFICsgIlxcYiJ9LCB0LCBnLCBzXSwgYyA9IFsuLi5iXTsKICAgIHJldHVybiBjLnBvcCgpLCBjLnB1c2goaSksIGwuY29udGFpbnMgPSBjLCB7CiAgICAgIG5hbWU6ICJZQU1MIiwKICAgICAgY2FzZV9pbnNlbnNpdGl2ZTogITAsCiAgICAgIGFsaWFzZXM6IFsieW1sIiwgIllBTUwiXSwKICAgICAgY29udGFpbnM6IGIKICAgIH0KICB9Cn0oKSk7CmhsanMucmVnaXN0ZXJMYW5ndWFnZSgiZXJsYW5nIiwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgIHZhciBuID0gIlthLXonXVthLXpBLVowLTlfJ10qIiwgciA9ICIoIiArIG4gKyAiOiIgKyBuICsgInwiICsgbiArICIpIiwgYSA9IHsKICAgICAgICBrZXl3b3JkOiAiYWZ0ZXIgYW5kIGFuZGFsc298MTAgYmFuZCBiZWdpbiBibm90IGJvciBic2wgYnpyIGJ4b3IgY2FzZSBjYXRjaCBjb25kIGRpdiBlbmQgZnVuIGlmIGxldCBub3Qgb2Ygb3JlbHNlfDEwIHF1ZXJ5IHJlY2VpdmUgcmVtIHRyeSB3aGVuIHhvciIsCiAgICAgICAgbGl0ZXJhbDogImZhbHNlIHRydWUiCiAgICAgIH0sIGkgPSBlLkNPTU1FTlQoIiUiLCAiJCIpLCBjID0gewogICAgICAgIGNsYXNzTmFtZTogIm51bWJlciIsCiAgICAgICAgYmVnaW46ICJcXGIoXFxkKyhfXFxkKykqI1thLWZBLUYwLTldKyhfW2EtZkEtRjAtOV0rKSp8XFxkKyhfXFxkKykqKFxcLlxcZCsoX1xcZCspKik/KFtlRV1bLStdP1xcZCspPykiLAogICAgICAgIHJlbGV2YW5jZTogMAogICAgICB9LCBzID0ge2JlZ2luOiAiZnVuXFxzKyIgKyBuICsgIi9cXGQrIn0sIHQgPSB7CiAgICAgICAgYmVnaW46IHIgKyAiXFwoIiwKICAgICAgICBlbmQ6ICJcXCkiLAogICAgICAgIHJldHVybkJlZ2luOiAhMCwKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgY29udGFpbnM6IFt7YmVnaW46IHIsIHJlbGV2YW5jZTogMH0sIHsKICAgICAgICAgIGJlZ2luOiAiXFwoIiwKICAgICAgICAgIGVuZDogIlxcKSIsCiAgICAgICAgICBlbmRzV2l0aFBhcmVudDogITAsCiAgICAgICAgICByZXR1cm5FbmQ6ICEwLAogICAgICAgICAgcmVsZXZhbmNlOiAwCiAgICAgICAgfV0KICAgICAgfSwgZCA9IHtiZWdpbjogInsiLCBlbmQ6ICJ9IiwgcmVsZXZhbmNlOiAwfSwgbyA9IHtiZWdpbjogIlxcYl8oW0EtWl1bQS1aYS16MC05X10qKT8iLCByZWxldmFuY2U6IDB9LAogICAgICBsID0ge2JlZ2luOiAiW0EtWl1bYS16QS1aMC05X10qIiwgcmVsZXZhbmNlOiAwfSwgYiA9IHsKICAgICAgICBiZWdpbjogIiMiICsgZS5VTkRFUlNDT1JFX0lERU5UX1JFLAogICAgICAgIHJlbGV2YW5jZTogMCwKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgY29udGFpbnM6IFt7YmVnaW46ICIjIiArIGUuVU5ERVJTQ09SRV9JREVOVF9SRSwgcmVsZXZhbmNlOiAwfSwge2JlZ2luOiAieyIsIGVuZDogIn0iLCByZWxldmFuY2U6IDB9XQogICAgICB9LCBnID0ge2JlZ2luS2V5d29yZHM6ICJmdW4gcmVjZWl2ZSBpZiB0cnkgY2FzZSIsIGVuZDogImVuZCIsIGtleXdvcmRzOiBhfTsKICAgIGcuY29udGFpbnMgPSBbaSwgcywgZS5pbmhlcml0KGUuQVBPU19TVFJJTkdfTU9ERSwge2NsYXNzTmFtZTogIiJ9KSwgZywgdCwgZS5RVU9URV9TVFJJTkdfTU9ERSwgYywgZCwgbywgbCwgYl07CiAgICB2YXIgdSA9IFtpLCBzLCBnLCB0LCBlLlFVT1RFX1NUUklOR19NT0RFLCBjLCBkLCBvLCBsLCBiXTsKICAgIHQuY29udGFpbnNbMV0uY29udGFpbnMgPSB1LCBkLmNvbnRhaW5zID0gdSwgYi5jb250YWluc1sxXS5jb250YWlucyA9IHU7CiAgICB2YXIgRSA9IHtjbGFzc05hbWU6ICJwYXJhbXMiLCBiZWdpbjogIlxcKCIsIGVuZDogIlxcKSIsIGNvbnRhaW5zOiB1fTsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6ICJFcmxhbmciLAogICAgICBhbGlhc2VzOiBbImVybCJdLAogICAgICBrZXl3b3JkczogYSwKICAgICAgaWxsZWdhbDogIig8L3xcXCo9fFxcKz18LT18L1xcKnxcXCovfFxcKFxcKnxcXCpcXCkpIiwKICAgICAgY29udGFpbnM6IFt7CiAgICAgICAgY2xhc3NOYW1lOiAiZnVuY3Rpb24iLAogICAgICAgIGJlZ2luOiAiXiIgKyBuICsgIlxccypcXCgiLAogICAgICAgIGVuZDogIi0+IiwKICAgICAgICByZXR1cm5CZWdpbjogITAsCiAgICAgICAgaWxsZWdhbDogIlxcKHwjfC8vfC9cXCp8XFxcXHw6fDsiLAogICAgICAgIGNvbnRhaW5zOiBbRSwgZS5pbmhlcml0KGUuVElUTEVfTU9ERSwge2JlZ2luOiBufSldLAogICAgICAgIHN0YXJ0czoge2VuZDogIjt8XFwuIiwga2V5d29yZHM6IGEsIGNvbnRhaW5zOiB1fQogICAgICB9LCBpLCB7CiAgICAgICAgYmVnaW46ICJeLSIsCiAgICAgICAgZW5kOiAiXFwuIiwKICAgICAgICByZWxldmFuY2U6IDAsCiAgICAgICAgZXhjbHVkZUVuZDogITAsCiAgICAgICAgcmV0dXJuQmVnaW46ICEwLAogICAgICAgIGtleXdvcmRzOiB7CiAgICAgICAgICAkcGF0dGVybjogIi0iICsgZS5JREVOVF9SRSwKICAgICAgICAgIGtleXdvcmQ6ICItbW9kdWxlIC1yZWNvcmQgLXVuZGVmIC1leHBvcnQgLWlmZGVmIC1pZm5kZWYgLWF1dGhvciAtY29weXJpZ2h0IC1kb2MgLXZzbiAtaW1wb3J0IC1pbmNsdWRlIC1pbmNsdWRlX2xpYiAtY29tcGlsZSAtZGVmaW5lIC1lbHNlIC1lbmRpZiAtZmlsZSAtYmVoYXZpb3VyIC1iZWhhdmlvciAtc3BlYyIKICAgICAgICB9LAogICAgICAgIGNvbnRhaW5zOiBbRV0KICAgICAgfSwgYywgZS5RVU9URV9TVFJJTkdfTU9ERSwgYiwgbywgbCwgZCwge2JlZ2luOiAvXC4kL31dCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoImRvY2tlcmZpbGUiLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwogIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIkRvY2tlcmZpbGUiLAogICAgICBhbGlhc2VzOiBbImRvY2tlciJdLAogICAgICBjYXNlX2luc2Vuc2l0aXZlOiAhMCwKICAgICAga2V5d29yZHM6ICJmcm9tIG1haW50YWluZXIgZXhwb3NlIGVudiBhcmcgdXNlciBvbmJ1aWxkIHN0b3BzaWduYWwiLAogICAgICBjb250YWluczogW2UuSEFTSF9DT01NRU5UX01PREUsIGUuQVBPU19TVFJJTkdfTU9ERSwgZS5RVU9URV9TVFJJTkdfTU9ERSwgZS5OVU1CRVJfTU9ERSwgewogICAgICAgIGJlZ2luS2V5d29yZHM6ICJydW4gY21kIGVudHJ5cG9pbnQgdm9sdW1lIGFkZCBjb3B5IHdvcmtkaXIgbGFiZWwgaGVhbHRoY2hlY2sgc2hlbGwiLAogICAgICAgIHN0YXJ0czoge2VuZDogL1teXFxdJC8sIHN1Ykxhbmd1YWdlOiAiYmFzaCJ9CiAgICAgIH1dLAogICAgICBpbGxlZ2FsOiAiPC8iCiAgICB9CiAgfQp9KCkpOwpobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoInNxbCIsIGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgdCA9IGUuQ09NTUVOVCgiLS0iLCAiJCIpOwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIlNRTCIsIGNhc2VfaW5zZW5zaXRpdmU6ICEwLCBpbGxlZ2FsOiAvWzw+e30qXS8sIGNvbnRhaW5zOiBbewogICAgICAgIGJlZ2luS2V5d29yZHM6ICJiZWdpbiBlbmQgc3RhcnQgY29tbWl0IHJvbGxiYWNrIHNhdmVwb2ludCBsb2NrIGFsdGVyIGNyZWF0ZSBkcm9wIHJlbmFtZSBjYWxsIGRlbGV0ZSBkbyBoYW5kbGVyIGluc2VydCBsb2FkIHJlcGxhY2Ugc2VsZWN0IHRydW5jYXRlIHVwZGF0ZSBzZXQgc2hvdyBwcmFnbWEgZ3JhbnQgbWVyZ2UgZGVzY3JpYmUgdXNlIGV4cGxhaW4gaGVscCBkZWNsYXJlIHByZXBhcmUgZXhlY3V0ZSBkZWFsbG9jYXRlIHJlbGVhc2UgdW5sb2NrIHB1cmdlIHJlc2V0IGNoYW5nZSBzdG9wIGFuYWx5emUgY2FjaGUgZmx1c2ggb3B0aW1pemUgcmVwYWlyIGtpbGwgaW5zdGFsbCB1bmluc3RhbGwgY2hlY2tzdW0gcmVzdG9yZSBjaGVjayBiYWNrdXAgcmV2b2tlIGNvbW1lbnQgdmFsdWVzIHdpdGgiLAogICAgICAgIGVuZDogLzsvLAogICAgICAgIGVuZHNXaXRoUGFyZW50OiAhMCwKICAgICAgICBrZXl3b3JkczogewogICAgICAgICAgJHBhdHRlcm46IC9bXHdcLl0rLywKICAgICAgICAgIGtleXdvcmQ6ICJhcyBhYm9ydCBhYnMgYWJzb2x1dGUgYWNjIGFjY2UgYWNjZXAgYWNjZXB0IGFjY2VzcyBhY2Nlc3NlZCBhY2Nlc3NpYmxlIGFjY291bnQgYWNvcyBhY3Rpb24gYWN0aXZhdGUgYWRkIGFkZHRpbWUgYWRtaW4gYWRtaW5pc3RlciBhZHZhbmNlZCBhZHZpc2UgYWVzX2RlY3J5cHQgYWVzX2VuY3J5cHQgYWZ0ZXIgYWdlbnQgYWdncmVnYXRlIGFsaSBhbGlhIGFsaWFzIGFsbCBhbGxvY2F0ZSBhbGxvdyBhbHRlciBhbHdheXMgYW5hbHl6ZSBhbmNpbGxhcnkgYW5kIGFudGkgYW55IGFueWRhdGEgYW55ZGF0YXNldCBhbnlzY2hlbWEgYW55dHlwZSBhcHBseSBhcmNoaXZlIGFyY2hpdmVkIGFyY2hpdmVsb2cgYXJlIGFzIGFzYyBhc2NpaSBhc2luIGFzc2VtYmx5IGFzc2VydGlvbiBhc3NvY2lhdGUgYXN5bmNocm9ub3VzIGF0IGF0YW4gYXRuMiBhdHRyIGF0dHJpIGF0dHJpYiBhdHRyaWJ1IGF0dHJpYnV0IGF0dHJpYnV0ZSBhdHRyaWJ1dGVzIGF1ZGl0IGF1dGhlbnRpY2F0ZWQgYXV0aGVudGljYXRpb24gYXV0aGlkIGF1dGhvcnMgYXV0byBhdXRvYWxsb2NhdGUgYXV0b2RibGluayBhdXRvZXh0ZW5kIGF1dG9tYXRpYyBhdmFpbGFiaWxpdHkgYXZnIGJhY2t1cCBiYWRmaWxlIGJhc2ljZmlsZSBiZWZvcmUgYmVnaW4gYmVnaW5uaW5nIGJlbmNobWFyayBiZXR3ZWVuIGJmaWxlIGJmaWxlX2Jhc2UgYmlnIGJpZ2ZpbGUgYmluIGJpbmFyeV9kb3VibGUgYmluYXJ5X2Zsb2F0IGJpbmxvZyBiaXRfYW5kIGJpdF9jb3VudCBiaXRfbGVuZ3RoIGJpdF9vciBiaXRfeG9yIGJpdG1hcCBibG9iX2Jhc2UgYmxvY2sgYmxvY2tzaXplIGJvZHkgYm90aCBib3VuZCBidWNrZXQgYnVmZmVyX2NhY2hlIGJ1ZmZlcl9wb29sIGJ1aWxkIGJ1bGsgYnkgYnl0ZSBieXRlb3JkZXJtYXJrIGJ5dGVzIGNhY2hlIGNhY2hpbmcgY2FsbCBjYWxsaW5nIGNhbmNlbCBjYXBhY2l0eSBjYXNjYWRlIGNhc2NhZGVkIGNhc2UgY2FzdCBjYXRhbG9nIGNhdGVnb3J5IGNlaWwgY2VpbGluZyBjaGFpbiBjaGFuZ2UgY2hhbmdlZCBjaGFyX2Jhc2UgY2hhcl9sZW5ndGggY2hhcmFjdGVyX2xlbmd0aCBjaGFyYWN0ZXJzIGNoYXJhY3RlcnNldCBjaGFyaW5kZXggY2hhcnNldCBjaGFyc2V0Zm9ybSBjaGFyc2V0aWQgY2hlY2sgY2hlY2tzdW0gY2hlY2tzdW1fYWdnIGNoaWxkIGNob29zZSBjaHIgY2h1bmsgY2xhc3MgY2xlYW51cCBjbGVhciBjbGllbnQgY2xvYiBjbG9iX2Jhc2UgY2xvbmUgY2xvc2UgY2x1c3Rlcl9pZCBjbHVzdGVyX3Byb2JhYmlsaXR5IGNsdXN0ZXJfc2V0IGNsdXN0ZXJpbmcgY29hbGVzY2UgY29lcmNpYmlsaXR5IGNvbCBjb2xsYXRlIGNvbGxhdGlvbiBjb2xsZWN0IGNvbHUgY29sdW0gY29sdW1uIGNvbHVtbl92YWx1ZSBjb2x1bW5zIGNvbHVtbnNfdXBkYXRlZCBjb21tZW50IGNvbW1pdCBjb21wYWN0IGNvbXBhdGliaWxpdHkgY29tcGlsZWQgY29tcGxldGUgY29tcG9zaXRlX2xpbWl0IGNvbXBvdW5kIGNvbXByZXNzIGNvbXB1dGUgY29uY2F0IGNvbmNhdF93cyBjb25jdXJyZW50IGNvbmZpcm0gY29ubiBjb25uZWMgY29ubmVjdCBjb25uZWN0X2J5X2lzY3ljbGUgY29ubmVjdF9ieV9pc2xlYWYgY29ubmVjdF9ieV9yb290IGNvbm5lY3RfdGltZSBjb25uZWN0aW9uIGNvbnNpZGVyIGNvbnNpc3RlbnQgY29uc3RhbnQgY29uc3RyYWludCBjb25zdHJhaW50cyBjb25zdHJ1Y3RvciBjb250YWluZXIgY29udGVudCBjb250ZW50cyBjb250ZXh0IGNvbnRyaWJ1dG9ycyBjb250cm9sZmlsZSBjb252IGNvbnZlcnQgY29udmVydF90eiBjb3JyIGNvcnJfayBjb3JyX3MgY29ycmVzcG9uZGluZyBjb3JydXB0aW9uIGNvcyBjb3N0IGNvdW50IGNvdW50X2JpZyBjb3VudGVkIGNvdmFyX3BvcCBjb3Zhcl9zYW1wIGNwdV9wZXJfY2FsbCBjcHVfcGVyX3Nlc3Npb24gY3JjMzIgY3JlYXRlIGNyZWF0aW9uIGNyaXRpY2FsIGNyb3NzIGN1YmUgY3VtZV9kaXN0IGN1cmRhdGUgY3VycmVudCBjdXJyZW50X2RhdGUgY3VycmVudF90aW1lIGN1cnJlbnRfdGltZXN0YW1wIGN1cnJlbnRfdXNlciBjdXJzb3IgY3VydGltZSBjdXN0b21kYXR1bSBjeWNsZSBkYXRhIGRhdGFiYXNlIGRhdGFiYXNlcyBkYXRhZmlsZSBkYXRhZmlsZXMgZGF0YWxlbmd0aCBkYXRlX2FkZCBkYXRlX2NhY2hlIGRhdGVfZm9ybWF0IGRhdGVfc3ViIGRhdGVhZGQgZGF0ZWRpZmYgZGF0ZWZyb21wYXJ0cyBkYXRlbmFtZSBkYXRlcGFydCBkYXRldGltZTJmcm9tcGFydHMgZGF5IGRheV90b19zZWNvbmQgZGF5bmFtZSBkYXlvZm1vbnRoIGRheW9md2VlayBkYXlvZnllYXIgZGF5cyBkYl9yb2xlX2NoYW5nZSBkYnRpbWV6b25lIGRkbCBkZWFsbG9jYXRlIGRlY2xhcmUgZGVjb2RlIGRlY29tcG9zZSBkZWNyZW1lbnQgZGVjcnlwdCBkZWR1cGxpY2F0ZSBkZWYgZGVmYSBkZWZhdSBkZWZhdWwgZGVmYXVsdCBkZWZhdWx0cyBkZWZlcnJlZCBkZWZpIGRlZmluIGRlZmluZSBkZWdyZWVzIGRlbGF5ZWQgZGVsZWdhdGUgZGVsZXRlIGRlbGV0ZV9hbGwgZGVsaW1pdGVkIGRlbWFuZCBkZW5zZV9yYW5rIGRlcHRoIGRlcXVldWUgZGVzX2RlY3J5cHQgZGVzX2VuY3J5cHQgZGVzX2tleV9maWxlIGRlc2MgZGVzY3IgZGVzY3JpIGRlc2NyaWIgZGVzY3JpYmUgZGVzY3JpcHRvciBkZXRlcm1pbmlzdGljIGRpYWdub3N0aWNzIGRpZmZlcmVuY2UgZGltZW5zaW9uIGRpcmVjdF9sb2FkIGRpcmVjdG9yeSBkaXNhYmxlIGRpc2FibGVfYWxsIGRpc2FsbG93IGRpc2Fzc29jaWF0ZSBkaXNjYXJkZmlsZSBkaXNjb25uZWN0IGRpc2tncm91cCBkaXN0aW5jdCBkaXN0aW5jdHJvdyBkaXN0cmlidXRlIGRpc3RyaWJ1dGVkIGRpdiBkbyBkb2N1bWVudCBkb21haW4gZG90bmV0IGRvdWJsZSBkb3duZ3JhZGUgZHJvcCBkdW1wZmlsZSBkdXBsaWNhdGUgZHVyYXRpb24gZWFjaCBlZGl0aW9uIGVkaXRpb25hYmxlIGVkaXRpb25zIGVsZW1lbnQgZWxsaXBzaXMgZWxzZSBlbHNpZiBlbHQgZW1wdHkgZW5hYmxlIGVuYWJsZV9hbGwgZW5jbG9zZWQgZW5jb2RlIGVuY29kaW5nIGVuY3J5cHQgZW5kIGVuZC1leGVjIGVuZGlhbiBlbmZvcmNlZCBlbmdpbmUgZW5naW5lcyBlbnF1ZXVlIGVudGVycHJpc2UgZW50aXR5ZXNjYXBpbmcgZW9tb250aCBlcnJvciBlcnJvcnMgZXNjYXBlZCBldmFsbmFtZSBldmFsdWF0ZSBldmVudCBldmVudGRhdGEgZXZlbnRzIGV4Y2VwdCBleGNlcHRpb24gZXhjZXB0aW9ucyBleGNoYW5nZSBleGNsdWRlIGV4Y2x1ZGluZyBleGVjdSBleGVjdXQgZXhlY3V0ZSBleGVtcHQgZXhpc3RzIGV4aXQgZXhwIGV4cGlyZSBleHBsYWluIGV4cGxvZGUgZXhwb3J0IGV4cG9ydF9zZXQgZXh0ZW5kZWQgZXh0ZW50IGV4dGVybmFsIGV4dGVybmFsXzEgZXh0ZXJuYWxfMiBleHRlcm5hbGx5IGV4dHJhY3QgZmFpbGVkIGZhaWxlZF9sb2dpbl9hdHRlbXB0cyBmYWlsb3ZlciBmYWlsdXJlIGZhciBmYXN0IGZlYXR1cmVfc2V0IGZlYXR1cmVfdmFsdWUgZmV0Y2ggZmllbGQgZmllbGRzIGZpbGUgZmlsZV9uYW1lX2NvbnZlcnQgZmlsZXN5c3RlbV9saWtlX2xvZ2dpbmcgZmluYWwgZmluaXNoIGZpcnN0IGZpcnN0X3ZhbHVlIGZpeGVkIGZsYXNoX2NhY2hlIGZsYXNoYmFjayBmbG9vciBmbHVzaCBmb2xsb3dpbmcgZm9sbG93cyBmb3IgZm9yYWxsIGZvcmNlIGZvcmVpZ24gZm9ybSBmb3JtYSBmb3JtYXQgZm91bmQgZm91bmRfcm93cyBmcmVlbGlzdCBmcmVlbGlzdHMgZnJlZXBvb2xzIGZyZXNoIGZyb20gZnJvbV9iYXNlNjQgZnJvbV9kYXlzIGZ0cCBmdWxsIGZ1bmN0aW9uIGdlbmVyYWwgZ2VuZXJhdGVkIGdldCBnZXRfZm9ybWF0IGdldF9sb2NrIGdldGRhdGUgZ2V0dXRjZGF0ZSBnbG9iYWwgZ2xvYmFsX25hbWUgZ2xvYmFsbHkgZ28gZ290byBncmFudCBncmFudHMgZ3JlYXRlc3QgZ3JvdXAgZ3JvdXBfY29uY2F0IGdyb3VwX2lkIGdyb3VwaW5nIGdyb3VwaW5nX2lkIGdyb3VwcyBndGlkX3N1YnRyYWN0IGd1YXJhbnRlZSBndWFyZCBoYW5kbGVyIGhhc2ggaGFzaGtleXMgaGF2aW5nIGhlYSBoZWFkIGhlYWRpIGhlYWRpbiBoZWFkaW5nIGhlYXAgaGVscCBoZXggaGllcmFyY2h5IGhpZ2ggaGlnaF9wcmlvcml0eSBob3N0cyBob3VyIGhvdXJzIGh0dHAgaWQgaWRlbnRfY3VycmVudCBpZGVudF9pbmNyIGlkZW50X3NlZWQgaWRlbnRpZmllZCBpZGVudGl0eSBpZGxlX3RpbWUgaWYgaWZudWxsIGlnbm9yZSBpaWYgaWxpa2UgaWxtIGltbWVkaWF0ZSBpbXBvcnQgaW4gaW5jbHVkZSBpbmNsdWRpbmcgaW5jcmVtZW50IGluZGV4IGluZGV4ZXMgaW5kZXhpbmcgaW5kZXh0eXBlIGluZGljYXRvciBpbmRpY2VzIGluZXQ2X2F0b24gaW5ldDZfbnRvYSBpbmV0X2F0b24gaW5ldF9udG9hIGluZmlsZSBpbml0aWFsIGluaXRpYWxpemVkIGluaXRpYWxseSBpbml0cmFucyBpbm1lbW9yeSBpbm5lciBpbm5vZGIgaW5wdXQgaW5zZXJ0IGluc3RhbGwgaW5zdGFuY2UgaW5zdGFudGlhYmxlIGluc3RyIGludGVyZmFjZSBpbnRlcmxlYXZlZCBpbnRlcnNlY3QgaW50byBpbnZhbGlkYXRlIGludmlzaWJsZSBpcyBpc19mcmVlX2xvY2sgaXNfaXB2NCBpc19pcHY0X2NvbXBhdCBpc19ub3QgaXNfbm90X251bGwgaXNfdXNlZF9sb2NrIGlzZGF0ZSBpc251bGwgaXNvbGF0aW9uIGl0ZXJhdGUgamF2YSBqb2luIGpzb24ganNvbl9leGlzdHMga2VlcCBrZWVwX2R1cGxpY2F0ZXMga2V5IGtleXMga2lsbCBsYW5ndWFnZSBsYXJnZSBsYXN0IGxhc3RfZGF5IGxhc3RfaW5zZXJ0X2lkIGxhc3RfdmFsdWUgbGF0ZXJhbCBsYXggbGNhc2UgbGVhZCBsZWFkaW5nIGxlYXN0IGxlYXZlcyBsZWZ0IGxlbiBsZW5naHQgbGVuZ3RoIGxlc3MgbGV2ZWwgbGV2ZWxzIGxpYnJhcnkgbGlrZSBsaWtlMiBsaWtlNCBsaWtlYyBsaW1pdCBsaW5lcyBsaW5rIGxpc3QgbGlzdGFnZyBsaXR0bGUgbG4gbG9hZCBsb2FkX2ZpbGUgbG9iIGxvYnMgbG9jYWwgbG9jYWx0aW1lIGxvY2FsdGltZXN0YW1wIGxvY2F0ZSBsb2NhdG9yIGxvY2sgbG9ja2VkIGxvZyBsb2cxMCBsb2cyIGxvZ2ZpbGUgbG9nZmlsZXMgbG9nZ2luZyBsb2dpY2FsIGxvZ2ljYWxfcmVhZHNfcGVyX2NhbGwgbG9nb2ZmIGxvZ29uIGxvZ3MgbG9uZyBsb29wIGxvdyBsb3dfcHJpb3JpdHkgbG93ZXIgbHBhZCBscnRyaW0gbHRyaW0gbWFpbiBtYWtlX3NldCBtYWtlZGF0ZSBtYWtldGltZSBtYW5hZ2VkIG1hbmFnZW1lbnQgbWFudWFsIG1hcCBtYXBwaW5nIG1hc2sgbWFzdGVyIG1hc3Rlcl9wb3Nfd2FpdCBtYXRjaCBtYXRjaGVkIG1hdGVyaWFsaXplZCBtYXggbWF4ZXh0ZW50cyBtYXhpbWl6ZSBtYXhpbnN0YW5jZXMgbWF4bGVuIG1heGxvZ2ZpbGVzIG1heGxvZ2hpc3RvcnkgbWF4bG9nbWVtYmVycyBtYXhzaXplIG1heHRyYW5zIG1kNSBtZWFzdXJlcyBtZWRpYW4gbWVkaXVtIG1lbWJlciBtZW1jb21wcmVzcyBtZW1vcnkgbWVyZ2UgbWljcm9zZWNvbmQgbWlkIG1pZ3JhdGlvbiBtaW4gbWluZXh0ZW50cyBtaW5pbXVtIG1pbmluZyBtaW51cyBtaW51dGUgbWludXRlcyBtaW52YWx1ZSBtaXNzaW5nIG1vZCBtb2RlIG1vZGVsIG1vZGlmaWNhdGlvbiBtb2RpZnkgbW9kdWxlIG1vbml0b3JpbmcgbW9udGggbW9udGhzIG1vdW50IG1vdmUgbW92ZW1lbnQgbXVsdGlzZXQgbXV0ZXggbmFtZSBuYW1lX2NvbnN0IG5hbWVzIG5hbiBuYXRpb25hbCBuYXRpdmUgbmF0dXJhbCBuYXYgbmNoYXIgbmNsb2IgbmVzdGVkIG5ldmVyIG5ldyBuZXdsaW5lIG5leHQgbmV4dHZhbCBubyBub193cml0ZV90b19iaW5sb2cgbm9hcmNoaXZlbG9nIG5vYXVkaXQgbm9iYWRmaWxlIG5vY2hlY2sgbm9jb21wcmVzcyBub2NvcHkgbm9jeWNsZSBub2RlbGF5IG5vZGlzY2FyZGZpbGUgbm9lbnRpdHllc2NhcGluZyBub2d1YXJhbnRlZSBub2tlZXAgbm9sb2dmaWxlIG5vbWFwcGluZyBub21heHZhbHVlIG5vbWluaW1pemUgbm9taW52YWx1ZSBub21vbml0b3Jpbmcgbm9uZSBub25lZGl0aW9uYWJsZSBub25zY2hlbWEgbm9vcmRlciBub3ByIG5vcHJvIG5vcHJvbSBub3Byb21wIG5vcHJvbXB0IG5vcmVseSBub3Jlc2V0bG9ncyBub3JldmVyc2Ugbm9ybWFsIG5vcm93ZGVwZW5kZW5jaWVzIG5vc2NoZW1hY2hlY2sgbm9zd2l0Y2ggbm90IG5vdGhpbmcgbm90aWNlIG5vdG51bGwgbm90cmltIG5vdmFsaWRhdGUgbm93IG5vd2FpdCBudGhfdmFsdWUgbnVsbGlmIG51bGxzIG51bSBudW1iIG51bWJlIG52YXJjaGFyIG52YXJjaGFyMiBvYmplY3Qgb2NpY29sbCBvY2lkYXRlIG9jaWRhdGV0aW1lIG9jaWR1cmF0aW9uIG9jaWludGVydmFsIG9jaWxvYmxvY2F0b3Igb2NpbnVtYmVyIG9jaXJlZiBvY2lyZWZjdXJzb3Igb2Npcm93aWQgb2Npc3RyaW5nIG9jaXR5cGUgb2N0IG9jdGV0X2xlbmd0aCBvZiBvZmYgb2ZmbGluZSBvZmZzZXQgb2lkIG9pZGluZGV4IG9sZCBvbiBvbmxpbmUgb25seSBvcGFxdWUgb3BlbiBvcGVyYXRpb25zIG9wZXJhdG9yIG9wdGltYWwgb3B0aW1pemUgb3B0aW9uIG9wdGlvbmFsbHkgb3Igb3JhY2xlIG9yYWNsZV9kYXRlIG9yYWRhdGEgb3JkIG9yZGF1ZGlvIG9yZGRpY29tIG9yZGRvYyBvcmRlciBvcmRpbWFnZSBvcmRpbmFsaXR5IG9yZHZpZGVvIG9yZ2FuaXphdGlvbiBvcmxhbnkgb3JsdmFyeSBvdXQgb3V0ZXIgb3V0ZmlsZSBvdXRsaW5lIG91dHB1dCBvdmVyIG92ZXJmbG93IG92ZXJyaWRpbmcgcGFja2FnZSBwYWQgcGFyYWxsZWwgcGFyYWxsZWxfZW5hYmxlIHBhcmFtZXRlcnMgcGFyZW50IHBhcnNlIHBhcnRpYWwgcGFydGl0aW9uIHBhcnRpdGlvbnMgcGFzY2FsIHBhc3NpbmcgcGFzc3dvcmQgcGFzc3dvcmRfZ3JhY2VfdGltZSBwYXNzd29yZF9sb2NrX3RpbWUgcGFzc3dvcmRfcmV1c2VfbWF4IHBhc3N3b3JkX3JldXNlX3RpbWUgcGFzc3dvcmRfdmVyaWZ5X2Z1bmN0aW9uIHBhdGNoIHBhdGggcGF0aW5kZXggcGN0aW5jcmVhc2UgcGN0dGhyZXNob2xkIHBjdHVzZWQgcGN0dmVyc2lvbiBwZXJjZW50IHBlcmNlbnRfcmFuayBwZXJjZW50aWxlX2NvbnQgcGVyY2VudGlsZV9kaXNjIHBlcmZvcm1hbmNlIHBlcmlvZCBwZXJpb2RfYWRkIHBlcmlvZF9kaWZmIHBlcm1hbmVudCBwaHlzaWNhbCBwaSBwaXBlIHBpcGVsaW5lZCBwaXZvdCBwbHVnZ2FibGUgcGx1Z2luIHBvbGljeSBwb3NpdGlvbiBwb3N0X3RyYW5zYWN0aW9uIHBvdyBwb3dlciBwcmFnbWEgcHJlYnVpbHQgcHJlY2VkZXMgcHJlY2VkaW5nIHByZWNpc2lvbiBwcmVkaWN0aW9uIHByZWRpY3Rpb25fY29zdCBwcmVkaWN0aW9uX2RldGFpbHMgcHJlZGljdGlvbl9wcm9iYWJpbGl0eSBwcmVkaWN0aW9uX3NldCBwcmVwYXJlIHByZXNlbnQgcHJlc2VydmUgcHJpb3IgcHJpb3JpdHkgcHJpdmF0ZSBwcml2YXRlX3NnYSBwcml2aWxlZ2VzIHByb2NlZHVyYWwgcHJvY2VkdXJlIHByb2NlZHVyZV9hbmFseXplIHByb2Nlc3NsaXN0IHByb2ZpbGVzIHByb2plY3QgcHJvbXB0IHByb3RlY3Rpb24gcHVibGljIHB1Ymxpc2hpbmdzZXJ2ZXJuYW1lIHB1cmdlIHF1YXJ0ZXIgcXVlcnkgcXVpY2sgcXVpZXNjZSBxdW90YSBxdW90ZW5hbWUgcmFkaWFucyByYWlzZSByYW5kIHJhbmdlIHJhbmsgcmF3IHJlYWQgcmVhZHMgcmVhZHNpemUgcmVidWlsZCByZWNvcmQgcmVjb3JkcyByZWNvdmVyIHJlY292ZXJ5IHJlY3Vyc2l2ZSByZWN5Y2xlIHJlZG8gcmVkdWNlZCByZWYgcmVmZXJlbmNlIHJlZmVyZW5jZWQgcmVmZXJlbmNlcyByZWZlcmVuY2luZyByZWZyZXNoIHJlZ2V4cF9saWtlIHJlZ2lzdGVyIHJlZ3JfYXZneCByZWdyX2F2Z3kgcmVncl9jb3VudCByZWdyX2ludGVyY2VwdCByZWdyX3IyIHJlZ3Jfc2xvcGUgcmVncl9zeHggcmVncl9zeHkgcmVqZWN0IHJla2V5IHJlbGF0aW9uYWwgcmVsYXRpdmUgcmVsYXlsb2cgcmVsZWFzZSByZWxlYXNlX2xvY2sgcmVsaWVzX29uIHJlbG9jYXRlIHJlbHkgcmVtIHJlbWFpbmRlciByZW5hbWUgcmVwYWlyIHJlcGVhdCByZXBsYWNlIHJlcGxpY2F0ZSByZXBsaWNhdGlvbiByZXF1aXJlZCByZXNldCByZXNldGxvZ3MgcmVzaXplIHJlc291cmNlIHJlc3BlY3QgcmVzdG9yZSByZXN0cmljdGVkIHJlc3VsdCByZXN1bHRfY2FjaGUgcmVzdW1hYmxlIHJlc3VtZSByZXRlbnRpb24gcmV0dXJuIHJldHVybmluZyByZXR1cm5zIHJldXNlIHJldmVyc2UgcmV2b2tlIHJpZ2h0IHJsaWtlIHJvbGUgcm9sZXMgcm9sbGJhY2sgcm9sbGluZyByb2xsdXAgcm91bmQgcm93IHJvd19jb3VudCByb3dkZXBlbmRlbmNpZXMgcm93aWQgcm93bnVtIHJvd3MgcnRyaW0gcnVsZXMgc2FmZSBzYWx0IHNhbXBsZSBzYXZlIHNhdmVwb2ludCBzYjEgc2IyIHNiNCBzY2FuIHNjaGVtYSBzY2hlbWFjaGVjayBzY24gc2NvcGUgc2Nyb2xsIHNkb19nZW9yYXN0ZXIgc2RvX3RvcG9fZ2VvbWV0cnkgc2VhcmNoIHNlY190b190aW1lIHNlY29uZCBzZWNvbmRzIHNlY3Rpb24gc2VjdXJlZmlsZSBzZWN1cml0eSBzZWVkIHNlZ21lbnQgc2VsZWN0IHNlbGYgc2VtaSBzZXF1ZW5jZSBzZXF1ZW50aWFsIHNlcmlhbGl6YWJsZSBzZXJ2ZXIgc2VydmVyZXJyb3Igc2Vzc2lvbiBzZXNzaW9uX3VzZXIgc2Vzc2lvbnNfcGVyX3VzZXIgc2V0IHNldHMgc2V0dGluZ3Mgc2hhIHNoYTEgc2hhMiBzaGFyZSBzaGFyZWQgc2hhcmVkX3Bvb2wgc2hvcnQgc2hvdyBzaHJpbmsgc2h1dGRvd24gc2lfYXZlcmFnZWNvbG9yIHNpX2NvbG9yaGlzdG9ncmFtIHNpX2ZlYXR1cmVsaXN0IHNpX3Bvc2l0aW9uYWxjb2xvciBzaV9zdGlsbGltYWdlIHNpX3RleHR1cmUgc2libGluZ3Mgc2lkIHNpZ24gc2luIHNpemUgc2l6ZV90IHNpemVzIHNraXAgc2xhdmUgc2xlZXAgc21hbGxkYXRldGltZWZyb21wYXJ0cyBzbWFsbGZpbGUgc25hcHNob3Qgc29tZSBzb25hbWUgc29ydCBzb3VuZGV4IHNvdXJjZSBzcGFjZSBzcGFyc2Ugc3BmaWxlIHNwbGl0IHNxbCBzcWxfYmlnX3Jlc3VsdCBzcWxfYnVmZmVyX3Jlc3VsdCBzcWxfY2FjaGUgc3FsX2NhbGNfZm91bmRfcm93cyBzcWxfc21hbGxfcmVzdWx0IHNxbF92YXJpYW50X3Byb3BlcnR5IHNxbGNvZGUgc3FsZGF0YSBzcWxlcnJvciBzcWxuYW1lIHNxbHN0YXRlIHNxcnQgc3F1YXJlIHN0YW5kYWxvbmUgc3RhbmRieSBzdGFydCBzdGFydGluZyBzdGFydHVwIHN0YXRlbWVudCBzdGF0aWMgc3RhdGlzdGljcyBzdGF0c19iaW5vbWlhbF90ZXN0IHN0YXRzX2Nyb3NzdGFiIHN0YXRzX2tzX3Rlc3Qgc3RhdHNfbW9kZSBzdGF0c19td190ZXN0IHN0YXRzX29uZV93YXlfYW5vdmEgc3RhdHNfdF90ZXN0XyBzdGF0c190X3Rlc3RfaW5kZXAgc3RhdHNfdF90ZXN0X29uZSBzdGF0c190X3Rlc3RfcGFpcmVkIHN0YXRzX3dzcl90ZXN0IHN0YXR1cyBzdGQgc3RkZGV2IHN0ZGRldl9wb3Agc3RkZGV2X3NhbXAgc3RkZXYgc3RvcCBzdG9yYWdlIHN0b3JlIHN0b3JlZCBzdHIgc3RyX3RvX2RhdGUgc3RyYWlnaHRfam9pbiBzdHJjbXAgc3RyaWN0IHN0cmluZyBzdHJ1Y3Qgc3R1ZmYgc3R5bGUgc3ViZGF0ZSBzdWJwYXJ0aXRpb24gc3VicGFydGl0aW9ucyBzdWJzdGl0dXRhYmxlIHN1YnN0ciBzdWJzdHJpbmcgc3VidGltZSBzdWJ0cmluZ19pbmRleCBzdWJ0eXBlIHN1Y2Nlc3Mgc3VtIHN1c3BlbmQgc3dpdGNoIHN3aXRjaG9mZnNldCBzd2l0Y2hvdmVyIHN5bmMgc3luY2hyb25vdXMgc3lub255bSBzeXMgc3lzX3htbGFnZyBzeXNhc20gc3lzYXV4IHN5c2RhdGUgc3lzZGF0ZXRpbWVvZmZzZXQgc3lzZGJhIHN5c29wZXIgc3lzdGVtIHN5c3RlbV91c2VyIHN5c3V0Y2RhdGV0aW1lIHRhYmxlIHRhYmxlcyB0YWJsZXNwYWNlIHRhYmxlc2FtcGxlIHRhbiB0ZG8gdGVtcGxhdGUgdGVtcG9yYXJ5IHRlcm1pbmF0ZWQgdGVydGlhcnlfd2VpZ2h0cyB0ZXN0IHRoYW4gdGhlbiB0aHJlYWQgdGhyb3VnaCB0aWVyIHRpZXMgdGltZSB0aW1lX2Zvcm1hdCB0aW1lX3pvbmUgdGltZWRpZmYgdGltZWZyb21wYXJ0cyB0aW1lb3V0IHRpbWVzdGFtcCB0aW1lc3RhbXBhZGQgdGltZXN0YW1wZGlmZiB0aW1lem9uZV9hYmJyIHRpbWV6b25lX21pbnV0ZSB0aW1lem9uZV9yZWdpb24gdG8gdG9fYmFzZTY0IHRvX2RhdGUgdG9fZGF5cyB0b19zZWNvbmRzIHRvZGF0ZXRpbWVvZmZzZXQgdHJhY2UgdHJhY2tpbmcgdHJhbnNhY3Rpb24gdHJhbnNhY3Rpb25hbCB0cmFuc2xhdGUgdHJhbnNsYXRpb24gdHJlYXQgdHJpZ2dlciB0cmlnZ2VyX25lc3RsZXZlbCB0cmlnZ2VycyB0cmltIHRydW5jYXRlIHRyeV9jYXN0IHRyeV9jb252ZXJ0IHRyeV9wYXJzZSB0eXBlIHViMSB1YjIgdWI0IHVjYXNlIHVuYXJjaGl2ZWQgdW5ib3VuZGVkIHVuY29tcHJlc3MgdW5kZXIgdW5kbyB1bmhleCB1bmljb2RlIHVuaWZvcm0gdW5pbnN0YWxsIHVuaW9uIHVuaXF1ZSB1bml4X3RpbWVzdGFtcCB1bmtub3duIHVubGltaXRlZCB1bmxvY2sgdW5uZXN0IHVucGl2b3QgdW5yZWNvdmVyYWJsZSB1bnNhZmUgdW5zaWduZWQgdW50aWwgdW50cnVzdGVkIHVudXNhYmxlIHVudXNlZCB1cGRhdGUgdXBkYXRlZCB1cGdyYWRlIHVwcGVkIHVwcGVyIHVwc2VydCB1cmwgdXJvd2lkIHVzYWJsZSB1c2FnZSB1c2UgdXNlX3N0b3JlZF9vdXRsaW5lcyB1c2VyIHVzZXJfZGF0YSB1c2VyX3Jlc291cmNlcyB1c2VycyB1c2luZyB1dGNfZGF0ZSB1dGNfdGltZXN0YW1wIHV1aWQgdXVpZF9zaG9ydCB2YWxpZGF0ZSB2YWxpZGF0ZV9wYXNzd29yZF9zdHJlbmd0aCB2YWxpZGF0aW9uIHZhbGlzdCB2YWx1ZSB2YWx1ZXMgdmFyIHZhcl9zYW1wIHZhcmNoYXJjIHZhcmkgdmFyaWEgdmFyaWFiIHZhcmlhYmwgdmFyaWFibGUgdmFyaWFibGVzIHZhcmlhbmNlIHZhcnAgdmFycmF3IHZhcnJhd2MgdmFycmF5IHZlcmlmeSB2ZXJzaW9uIHZlcnNpb25zIHZpZXcgdmlydHVhbCB2aXNpYmxlIHZvaWQgd2FpdCB3YWxsZXQgd2FybmluZyB3YXJuaW5ncyB3ZWVrIHdlZWtkYXkgd2Vla29meWVhciB3ZWxsZm9ybWVkIHdoZW4gd2hlbmUgd2hlbmV2IHdoZW5ldmUgd2hlbmV2ZXIgd2hlcmUgd2hpbGUgd2hpdGVzcGFjZSB3aW5kb3cgd2l0aCB3aXRoaW4gd2l0aG91dCB3b3JrIHdyYXBwZWQgeGRiIHhtbCB4bWxhZ2cgeG1sYXR0cmlidXRlcyB4bWxjYXN0IHhtbGNvbGF0dHZhbCB4bWxlbGVtZW50IHhtbGV4aXN0cyB4bWxmb3Jlc3QgeG1saW5kZXggeG1sbmFtZXNwYWNlcyB4bWxwaSB4bWxxdWVyeSB4bWxyb290IHhtbHNjaGVtYSB4bWxzZXJpYWxpemUgeG1sdGFibGUgeG1sdHlwZSB4b3IgeWVhciB5ZWFyX3RvX21vbnRoIHllYXJzIHllYXJ3ZWVrIiwKICAgICAgICAgIGxpdGVyYWw6ICJ0cnVlIGZhbHNlIG51bGwgdW5rbm93biIsCiAgICAgICAgICBidWlsdF9pbjogImFycmF5IGJpZ2ludCBiaW5hcnkgYml0IGJsb2IgYm9vbCBib29sZWFuIGNoYXIgY2hhcmFjdGVyIGRhdGUgZGVjIGRlY2ltYWwgZmxvYXQgaW50IGludDggaW50ZWdlciBpbnRlcnZhbCBudW1iZXIgbnVtZXJpYyByZWFsIHJlY29yZCBzZXJpYWwgc2VyaWFsOCBzbWFsbGludCB0ZXh0IHRpbWUgdGltZXN0YW1wIHRpbnlpbnQgdmFyY2hhciB2YXJjaGFyMiB2YXJ5aW5nIHZvaWQiCiAgICAgICAgfSwKICAgICAgICBjb250YWluczogW3tjbGFzc05hbWU6ICJzdHJpbmciLCBiZWdpbjogIiciLCBlbmQ6ICInIiwgY29udGFpbnM6IFt7YmVnaW46ICInJyJ9XX0sIHsKICAgICAgICAgIGNsYXNzTmFtZTogInN0cmluZyIsCiAgICAgICAgICBiZWdpbjogJyInLAogICAgICAgICAgZW5kOiAnIicsCiAgICAgICAgICBjb250YWluczogW3tiZWdpbjogJyIiJ31dCiAgICAgICAgfSwgewogICAgICAgICAgY2xhc3NOYW1lOiAic3RyaW5nIiwKICAgICAgICAgIGJlZ2luOiAiYCIsCiAgICAgICAgICBlbmQ6ICJgIgogICAgICAgIH0sIGUuQ19OVU1CRVJfTU9ERSwgZS5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgdCwgZS5IQVNIX0NPTU1FTlRfTU9ERV0KICAgICAgfSwgZS5DX0JMT0NLX0NPTU1FTlRfTU9ERSwgdCwgZS5IQVNIX0NPTU1FTlRfTU9ERV0KICAgIH0KICB9Cn0oKSk7CgondXNlIHN0cmljdCc7CmNvbnN0IGluaXQgPSAoKSA9PiB7CiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlJykuZm9yRWFjaCgoYmxvY2spID0+IHsKICAgIGNvbnNvbGUubG9nKGJsb2NrLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0KQogICAgaWYgKCEoYmxvY2sucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZ2hsaWdodC1wbGFpbicpCiAgICAgIHx8IGJsb2NrLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWdobGlnaHQtbm9uZScpCiAgICAgICAgfHwgKGJsb2NrLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWdobGlnaHQtdGV4dCcpKSkpIHsKICAgICAgaGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7CiAgICB9CiAgfSk7Cn0KCmxldCBsb2FkZWQgPSAwOwpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgaW5pdCk7Cg==`
)

var htmlTemplate = template.Must(template.New("tmp").Parse(`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>{{ .Title }}</title>
    <style type="text/css" media="all">{{ .GfmCss }}</style>
    <style type="text/css" media="print">{{ .PrintCss }}</style>
    <link rel="stylesheet" href="/custom.css">
    <script type="application/ecmascript">{{ .ReloadJs }}</script>
</head>
<body>
<article class="markdown-body entry-content">
    {{ .Content }}
</article>
<script src="/custom.js"></script>
</body>
</html>`))
